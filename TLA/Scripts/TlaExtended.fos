// FOS Common  Sort -7
////Old script name: TlaExtended.fosh. Patched 01.10 22:40:44

// Недостающие определения

//#pragma property Item Public bool 
//#pragma property Item Public bool Locker_Broken
//#pragma property Item Public bool IsBroken
#pragma property Critter Protected uint8 PerkBonusMove
#pragma property Critter Protected        int   MaxMoveApBase
//#pragma property Critter Protected        bool   IsNoArmor
//#pragma property Critter Public hash ModelNameBase

//#pragma property Critter PrivateCommon const bool[] Anims

#pragma property Critter Public hash AnimType


#ifdef __SERVER
// Недостающие события
# pragma event "EventCritterSomeCritterDead( Critter& critter, Critter& killed, Critter@ killer)" deferred
# pragma event "EventCritterSomeCritterUseSkill( Critter& critter, Critter& fromCr, CritterProperty skill, Critter@ onCritter, Item@ onItem, const Item@ onScenery )" deferred
# pragma event "EventCritterSomeCritterUseItem( Critter& critter, Critter& fromCr, Item& item, Critter@ onCritter, Item@ onItem, const Item@ onScenery, uint param )" deferred
# pragma event "EventCritterSomeCritterDropItem( Critter& critter, Critter& fromCr, Item& item )"
# pragma event "EventCritterSomeCritterMoveItem( Critter& critter, Critter& fromCr, Item& item, uint8 itemMode )"
# pragma event "EventCritterSomeCritterAttack( Critter& critter, Critter& attacker, Critter& target, Item& weapon, uint8 weaponMode, const Item@ ammo )"
# pragma event "EventCritterSomeCritterStealing( Critter& critter, Critter& thief, Critter& fromCr, Item&, uint )"
# pragma event "EventCritterSomeCritterAttacked( Critter& critter, Critter& target, Critter& attacker )"
// Не хватает объявления криттера

# pragma event "EventGlobalMapInviteEx( Critter& critter, Item@, uint, int, uint&, uint16&, uint16&, uint8& )"
# pragma event "EventCritterDeadEx( Critter& critter, Critter@ killer)"
# pragma event "EventMapLoopEx( Map& map, uint loopIndex )"
# pragma event "EventNpcPlaneBeginEx( Critter& critter, NpcPlane&, int, Critter@, Item@ )"
# pragma event "EventNpcPlaneEndEx( Critter& critter, NpcPlane&, int, Critter@, Item@ )"
# pragma event "EventNpcPlaneRunEx( Critter& critter, NpcPlane&, int, uint&, uint&, uint& )"
// 631

# pragma event "EventMapCritterOutEx( Map& map, Critter& critter )"
# pragma event "EventCritterAttacked( Critter& critter, Critter& attacker )"
# pragma event "EventGlobalMapProcess( int, Critter& critter, Item@, float&, float&, float&, float&, float&, uint&, bool& )"


// revision 631
////import uint GlobalmapGroupExtended::GetFollowGroup0( Critter& critter, int findType, Critter@[]@ group ) from "GlobalmapGroupExtended";
////import Critter@ GlobalmapGroupExtended::GetFollowLeader0(Critter& critter) from "GlobalmapGroupExtended";
////import Critter@[] GetGlobalGroup0(Critter& critter) from "GlobalmapGroupExtended";
////import void LeaveGlobalGroup0(Critter& critter) from "GlobalmapGroupExtended";
////import void DropTimers0( Critter& cr) from "GlobalmapGroupExtended";

//645
# pragma event "EventGlobalMapInvite( Critter& critter, Item@, uint, int, uint&, uint16&, uint16&, uint8& )"

#endif

// SayTypeExtended
const hash SayEncounterAny = 14; // Activate dialog box on global map, using before encounter
const hash SayEncounterRt = 15; // Activate dialog box on global map, using before encounter
#define SAY_ENCOUNTER_TB           				(16) // Activate dialog box on global map, using before encounter
#define SAY_FIX_RESULT              			(17)
const hash SayDialogboxText = 18;
#define SAY_DIALOGBOX_BUTTON #(b)   			(19+(b)) // Max 20 buttons (0..19)
const hash SaySayTitle = 39;
const hash SaySayText = 40;

//excluded valid
#define valid # (smth) (smth !is null)

// EventMapLoops
# pragma event "EventMapLoop1( Map& map )"
# pragma event "EventMapLoop2( Map& map )"
# pragma event "EventMapLoop3( Map& map )"
# pragma event "EventMapLoop4( Map& map )"
# pragma event "EventMapLoop5( Map& map )"

# pragma event "EventMapCritterDead( Map& map, Critter& critter, Critter@ killer )"

// Dialogboxes

const hash DialogboxNcrIllBrahmin = 1; // диалог из NcrCommon
const hash DialogboxPurgatoryInvite = 2; // Диалог Чистилища

// Недостающие типы существ



#pragma property Item PrivateServer bool IsLockpick
#pragma property Item PrivateServer uint8 Lockpick_Points
#pragma property Item PrivateServer bool Lockpick_IsElectro

#pragma property Item PrivateServer bool Door_IsMultyHex
#pragma property Item PrivateServer uint8[] Door_MultyHexLine1
#pragma property Item PrivateServer uint8[] Door_MultyHexLine2
#pragma property Item PrivateServer uint[] Door_BlockerIds
// Locker
/*
#define LOCKER_ISOPEN                            ( 0x01 ) // Hardcoded
#define LOCKER_LOCKED                            ( 0x02 )
#define LOCKER_JAMMED                            ( 0x04 )
#define LOCKER_BROKEN                            ( 0x08 )
#define LOCKER_NOOPEN                            ( 0x10 ) // Hardcoded
#define LOCKER_ELECTRO                           ( 0x20 )

*/
// Flags
// Tactics specific
// 8        9       10 1 2 3 4 5 6 7 8 9 20  1 2  3 4 5 6  7 8 9 30  1
// | Crouch | Prone                       | Skin  | | Hair | | Armor |
//ExtendedAnims
#define ANIM1_CROUCH                                                         ( 0x0100 )
#define ANIM1_PRONE                                                          ( 0x0200 )
#define ANIM1_COLOR_SKIN                                                     # (index)   ( ( ( index ) & 0xF ) << 20 ) // 0..15, colors see in colorOffsets animation.fos
#define ANIM1_COLOR_HAIR                                                     # (index)   ( ( ( index ) & 0xF ) << 24 ) // 0..15, colors see in colorOffsets animation.fos
#define ANIM1_COLOR_ARMOR                                                    # (index)   ( ( ( index ) & 0xF ) << 28 ) // 0..15, colors see in colorOffsets animation.fos
// Arcanum specific
// 8 9 10 1 2        3 4 5 6     7     8 9 20 1 2 3 4 5 6 7 8 9 30 1
//          | Shield       |< Palette >|
// Arcanum specific Anims
#define ANIM1_SHIELD                                                         ( 0x1000 )
#define ANIM1_PALETTE                                                        # (num)         ( ( ( num ) & 3 ) << ( ANIM1_FLAGS_BITS + 8 ) )

// Tactics
#define CRTYPE_TACTICS_RHUMANOID		 ( GetStrHash( "RHumanoid" ) )
//	Line 368: @  460    RHumanoid             316  0  2  1  1  1  0  1   1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0    400  200   0  0  RHumanoidU

// Fix boy function call states
const hash FixboyList = 0;
const hash FixboyButton = 1;
const hash FixboyCraft = 2;

// Fix boy craft results
#define FIXBOY_ALLOW_CRAFT                       ( 0x0001 )
#define FIXBOY_CHECK_TIMEOUT                     ( 0x0002 )
#define FIXBOY_SET_TIMEOUT                       ( 0x0004 )
#define FIXBOY_CHECK_PARAMS                      ( 0x0008 )
#define FIXBOY_CHECK_MATERIALS                   ( 0x0010 )
#define FIXBOY_CHECK_TOOLS                       ( 0x0020 )
#define FIXBOY_SUB_MATERIALS                     ( 0x0040 )
#define FIXBOY_ADD_CRAFT_ITEMS                   ( 0x0080 )
#define FIXBOY_ADD_EXPERIENCE                    ( 0x0100 )
#define FIXBOY_SEND_SUCC_MESSAGE                 ( 0x0200 )
#define FIXBOY_SEND_FAIL_MESSAGE                 ( 0x0400 )
#define FIXBOY_DEFAULT                           ( 0xFFFF )

//rev631


#pragma property Critter Protected int  Charisma
#pragma property Critter Protected bool IsNoAim

//rev 645
#pragma property Critter Protected uint8 PerkQuickPockets
#pragma property Critter Protected uint8 PerkMasterTrader
#pragma property Critter Protected uint8 PerkSilentRunning
#pragma property Item Public           uint16 LockerCondition


// Global map events
const hash GlobalProcessMove = 0;          // Called every __GlobalMapMoveTime
const hash GlobalProcessEnter = 1;
const hash GlobalProcessStartFast = 2;
const hash GlobalProcessStart = 3;
const hash GlobalProcessSetMove = 4;
const hash GlobalProcessStopped = 5;
const hash GlobalProcessNpcIdle = 6;          // Called every __CritterIdleTick
const hash GlobalProcessKick = 7;
#define GLOBAL_MAP_BASE_SPEED              ( 2.4f )       // Base speed, 2.4 pixels per second


// Global map walk types
const hash GmWalkGround = 0;
const hash GmWalkFly = 1;
const hash GmWalkWater = 2;


// MarkInsert
//#pragma rpc Client void ShowScreenElevator( int elevatorType, int p1, int p2 )




// Клиент реорганизация

#ifdef __CLIENT

#pragma event "EventCritterSneak( Critter@ critter )"

// 6 uint parameters, separated by commas
// Chosen actions
#define CHOSEN_NONE                      ( 0 )    //
const hash ChosenMove = 1;    // HexX, HexY, Is run, Cut path, Wait double click, Double click tick
const hash ChosenMoveToCrit = 2;    // Critter id, None, Is run, Cut path, Wait double click, Double click tick
const hash ChosenDir = 3;    // 0 (CW) or 1 (CCW)
const hash ChosenUseItem = 6;    // Item id, Item pid, Target type (see below), Target id, Item mode (see below), Some param (timer)
const hash ChosenMoveItem = 7;    // Item id, Item count, To slot, Is barter container, Is second try
const hash ChosenMoveItemCont = 8;    // From container, Item id, Count
const hash ChosenTakeAll = 9;    //
const hash ChosenPutAll = 10;   //
const hash ChosenUseSklOnCritter = 11;   // Skill, Critter id
const hash ChosenUseSklOnItem = 12;   // Is inventory, Skill index (SK_*), Item id
const hash ChosenUseSklOnScen = 13;   // Skill, Pid, HexX, HexY
const hash ChosenTalkNpc = 14;   // Critter id
const hash ChosenPickItem = 15;   // Pid, HexX, HexY
const hash ChosenPickCrit = 16;   // Critter id, (loot - 0, push - 1)
const hash ChosenSneak = 17;
#ifndef __CHOSENACTIONS
////import uint ChosenActions::GetChosenActions0( array< uint >@ actions ) from "ChosenActions";
////import void ChosenActions::SetChosenActions0( array< uint >@ actions ) from "ChosenActions";
#endif
#endif

dict< CritterProperty, int > GetCritPropsDict(int[] props)
{
	dict< CritterProperty, int > propsDict;

	for(uint i = 0, l = props.length(); i < l; i++)
	{
		propsDict[CritterProperty(props[i])] = props[i+1];
		i++;
	}

	return propsDict;
}

#define REAL_MS                # (x) ( Time::RealMs( x ) )
#define REAL_SECOND            # (x) ( Time::RealSecond( x ) )
#define REAL_MINUTE            # (x) ( Time::RealMinute( x ) )
#define REAL_HOUR              # (x) ( Time::RealHour( x ) )
#define REAL_DAY               # (x) ( Time::RealDay( x ) )
#define REAL_MONTH             # (x) ( Time::RealMonth( x ) )
#define REAL_YEAR              # (x) ( Time::RealYear( x ) )
