// FOS Server
// Author: heX, cvet, Tab10id

#ifndef __STDLIB
/** Выполняет "бросок кубика" на умения.
 */
import int RollVsSkill( Critter& cr, CritterProperty skill, int bonus ) from "Stdlib";

/** Проверяет, является ли результат "броска кубика" успешным.
 */
import bool IsSuccessRvS( int val ) from "Stdlib";

/** Проверяет, является ли результат "броска кубика" критическим.
 */
import bool IsCriticalRvS( int val ) from "Stdlib";

/** Вылечить игрока (оживить, выставить максимум жизней).
 */
import void HealCritter( Critter& player ) from "Stdlib";

/** Телепортирует игрока на указанную точке на карте в рамках указанной локации.
 */
import bool TransitToLoc( Critter& cr, hash locPid, uint mapIndex, uint entranceNum ) from "Stdlib";

/** Телепортирует криттера на указанную точке на карте.
 */
import bool TransitToMap( Critter& cr, hash mapPid, uint entranceNum ) from "Stdlib";

/** Создаеться новая уникальная локация, на которую телепортируется криттер.
 */
import bool TransitToNewLocation( Critter& cr, hash locPid ) from "Stdlib";

/** Выводит информацию в окно сообщений игрока. Текст береться из пункта "строки" в редакторе диалогов.
 */
import void InfoMessage( Critter& player, Critter& npc, uint strNum ) from "Stdlib";

/** Выводит текст над Нпц. Текст береться из пункта "строки" в редакторе диалогов.
 */
import void NpcMessageNorm( Critter& npc, uint strNum ) from "Stdlib";

/** Выводит крик над персонажем. Текст береться из пункта "строки" в редакторе диалогов.
 */
import void NpcMessageShout( Critter& npc, uint strNum ) from "Stdlib";

/** Выводит шепот над персонажем. Текст береться из пункта "строки" в редакторе диалогов.
 */
import void NpcMessageWhisp( Critter& npc, uint strNum ) from "Stdlib";

/** Выводит эмо текст над персонажем. Текст береться из пункта "строки" в редакторе диалогов.
 */
import void NpcMessageEmo( Critter& npc, uint strNum ) from "Stdlib";

/** Выставка времени таймаута.
   Используйте функцию d_TimeOutCheck для проверки истечения времени.
   На ветку которая выдает квест вешаем условие: d_TimeOutCheck().
   Затем в момент выдачи квеста вызываем: r_TimeOutSet(2).
   Это означает что ветка будет недоступна два игровых часа.
   Функциями TimeOutSub и TimeOutAdd можно влиять на запущенный таймаут.
   Таймаут у каждого Нпц свой личный.
 */
import void TimeoutSet( Critter& npc, uint gameHours ) from "Stdlib";

/** Уменьшение таймаута.
 */
import void TimeoutSub( Critter& npc, uint gameHoursSub ) from "Stdlib";

/** Увеличение таймаута.
 */
import void TimeoutAdd( Critter& npc, uint gameHoursAdd ) from "Stdlib";

/** Выдать стандартное предупреждение. Текст: "Стоять! Не подходи!" / "Hey you! Do not approach!"
 */
import void Warn( Critter& player, int npcRole ) from "Stdlib";

/** Управление дверью.
 */
import void DoorControl( Critter& player, uint entireNum, bool toOpen ) from "Stdlib";

/** Запустить диалог с ближайшем Нпц по его роли.
 */
import bool DialogNpc( Critter& player, int role ) from "Stdlib";

/** Взять ближайшего криттера, eсли критеров нет то возвращаем null.
 */
import Critter@ GetNearCritterWithRole( Map@ map, uint16 hexX, int hexY, uint radius, int role ) from "Stdlib";

import void Kill( Critter& player, int type ) from "Stdlib";

import void Damage( Critter& player, int dmg, int type, int dir ) from "Stdlib";

import void AttackStop( Critter& player, int npcRole ) from "Stdlib";

import void Attack( Critter& player, int npcRole ) from "Stdlib";
import bool TransitToMap( Critter& cr, int locPid, int mapIndex, int entranceNum ) from "Stdlib";

import void SkillUp( Critter& player, CritterProperty skill ) from "Stdlib";

import void QuestRewardExperience( Critter& cr, uint8 base ) from "Stdlib";

#endif
