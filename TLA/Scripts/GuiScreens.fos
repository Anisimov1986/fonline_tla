// FOS Client

// GUI scheme name: Default

#include "Core/Gui"
#include "GuiScreensExt"

void InitializeScreens()
{
    GUI_RegisterScreen( CLIENT_MAIN_SCREEN_LOGIN, Login::CreateScreen );
    GUI_RegisterScreen( CLIENT_MAIN_SCREEN_REGISTRATION, Registration::CreateScreen );
    GUI_RegisterScreen( CLIENT_MAIN_SCREEN_GAME, Game::CreateScreen );
    GUI_RegisterScreen( CLIENT_MAIN_SCREEN_GLOBAL_MAP, GlobalMap::CreateScreen );
    GUI_RegisterScreen( CLIENT_MAIN_SCREEN_WAIT, Wait::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_CREDITS, Credits::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_OPTIONS, Options::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_INVENTORY, Inventory::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_PICKUP, PickUp::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_CHARACTER, Character::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_DIALOG, Dialog::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_BARTER, Barter::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_PIP_BOY, PipBoy::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_FIX_BOY, FixBoy::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_MENU, Menu::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_AIM, Aim::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_SPLIT, Split::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_TIMER, Timer::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_DIALOGBOX, DialogBox::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_ELEVATOR, Elevator::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_SAY, Say::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_GM_TOWN, GMTown::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_INPUT_BOX, InputBox::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_SKILLBOX, SkillBox::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_USE, Use::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_PERK, Perk::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_TOWN_VIEW, TownView::CreateScreen );
    GUI_RegisterScreen( CLIENT_SCREEN_CURSOR, Cursor::CreateScreen );
    // Custom hierarchy: ItemsContainer::CreateHierarchy
    // Custom hierarchy: Preview::CreateHierarchy
    GUI_RegisterScreen( CLIENT_SCREEN_SAY_EXTENDED, SayExtended::CreateScreen );
}

namespace Login
{
    class Login : GUIScreen
    {
        void OnConstruct() override
        {
            SetPosition( 50, 50 );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
        }

        void OnGlobalInput( uint8 key, string@ text ) override
        {
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
        }
    }

    class Menu : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 80, 60 );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/login.png" );
        }
    }

    class Play : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 207 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            if( !__Singleplayer )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
            else
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
        }
    }

    class Text1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetTextFont( FONT_FAT );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_LOGIN_PLAY );
        }
    }

    class Registration : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 237 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            if( !__Singleplayer )
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
            else
                ShowScreen( CLIENT_SCREEN_SAVE_LOAD );
        }
    }

    class Text2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetText( MSG_GAME( STR_LOGIN_REGISTRATION ) );
            SetTextFont( FONT_FAT );
        }
    }

    class Options : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 267 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_OPTIONS );
        }
    }

    class Text3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetText( MSG_GAME( STR_LOGIN_OPTIONS ) );
            SetTextFont( FONT_FAT );
        }
    }

    class About : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 297 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_CREDITS );
        }
    }

    class Text4 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetText( MSG_GAME( STR_LOGIN_CREDITS ) );
            SetTextFont( FONT_FAT );
        }
    }

    class Exit : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 87, 327 );
            SetSize( 19, 19 );
            SetPressedImage( "art/intrface/login_button_down.png" );
        }

        void OnLMouseClick() override
        {
            TryExit();
        }
    }

    class Text5 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetText( MSG_GAME( STR_LOGIN_EXIT ) );
            SetTextFont( FONT_FAT );
        }
    }

    class InputLogin : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 80, 141 );
            SetSize( 145, 18 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __Name );
        }
    }

    class InputPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 80, 168 );
            SetSize( 145, 18 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
            SetInputPassword( "#" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( CustomCall( "GetPassword" ) );
        }
    }

    class Version : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 10, 5 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
            SetText( MSG_GAME( STR_VERSION_INFO ) );
            SetTextColor( COLOR_WHITE );
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 30, 50 );
            SetSize( 370, 50 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    Login@ CreateLoginHierarchy( GUIObject@ parent )
    {
        Login obj();
        CreateMenuHierarchy( obj );
        CreateVersionHierarchy( obj );
        CreateMessageBoxHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Menu@ CreateMenuHierarchy( GUIObject@ parent )
    {
        Menu obj();
        CreatePlayHierarchy( obj );
        CreateRegistrationHierarchy( obj );
        CreateOptionsHierarchy( obj );
        CreateAboutHierarchy( obj );
        CreateExitHierarchy( obj );
        CreateInputLoginHierarchy( obj );
        CreateInputPasswordHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Play@ CreatePlayHierarchy( GUIObject@ parent )
    {
        Play obj();
        CreateText1Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text1@ CreateText1Hierarchy( GUIObject@ parent )
    {
        Text1 obj();
        obj.Init( parent );
        return obj;
    }

    Registration@ CreateRegistrationHierarchy( GUIObject@ parent )
    {
        Registration obj();
        CreateText2Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text2@ CreateText2Hierarchy( GUIObject@ parent )
    {
        Text2 obj();
        obj.Init( parent );
        return obj;
    }

    Options@ CreateOptionsHierarchy( GUIObject@ parent )
    {
        Options obj();
        CreateText3Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text3@ CreateText3Hierarchy( GUIObject@ parent )
    {
        Text3 obj();
        obj.Init( parent );
        return obj;
    }

    About@ CreateAboutHierarchy( GUIObject@ parent )
    {
        About obj();
        CreateText4Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text4@ CreateText4Hierarchy( GUIObject@ parent )
    {
        Text4 obj();
        obj.Init( parent );
        return obj;
    }

    Exit@ CreateExitHierarchy( GUIObject@ parent )
    {
        Exit obj();
        CreateText5Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text5@ CreateText5Hierarchy( GUIObject@ parent )
    {
        Text5 obj();
        obj.Init( parent );
        return obj;
    }

    InputLogin@ CreateInputLoginHierarchy( GUIObject@ parent )
    {
        InputLogin obj();
        obj.Init( parent );
        return obj;
    }

    InputPassword@ CreateInputPasswordHierarchy( GUIObject@ parent )
    {
        InputPassword obj();
        obj.Init( parent );
        return obj;
    }

    Version@ CreateVersionHierarchy( GUIObject@ parent )
    {
        Version obj();
        obj.Init( parent );
        return obj;
    }

    MessageBox@ CreateMessageBoxHierarchy( GUIObject@ parent )
    {
        MessageBox obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateLoginHierarchy( null );
    }
}

namespace Registration
{
    import dict< CritterProperty, int > GenerateRegProps() from "Parameters";
    import void CritterGenerate( dict< CritterProperty, int >& props ) from "Parameters";
    import bool CritterGenerateCheck( dict< CritterProperty, int >& props ) from "Parameters";
    #ifdef PLAYERS_3D
    import void Set3DRegistrationGender( int gender ) from "Client3dChaReg";
    #endif
    
    CritterProperty[] ShowBaseStats = { CritterProperty::StrengthBase, CritterProperty::PerceptionBase, CritterProperty::EnduranceBase, CritterProperty::CharismaBase, CritterProperty::IntellectBase, CritterProperty::AgilityBase, CritterProperty::LuckBase };
    CritterProperty[] ShowHealthStats = { CritterProperty::MaxLifeBase, CritterProperty::IsPoisoned, CritterProperty::IsRadiated, CritterProperty::IsDamagedEye, CritterProperty::IsDamagedRightArm, CritterProperty::IsDamagedLeftArm, CritterProperty::IsDamagedRightLeg, CritterProperty::IsDamagedLeftLeg };
    CritterProperty[] ShowExtendedStats = { CritterProperty::ArmorClassBase, CritterProperty::ActionPointsBase, CritterProperty::CarryWeightBase, CritterProperty::MeleeDamageBase, CritterProperty::NormalResistanceBase, CritterProperty::PoisonResistanceBase, CritterProperty::RadiationResistanceBase, CritterProperty::SequenceBase, CritterProperty::HealingRateBase, CritterProperty::CriticalChanceBase };
    CritterProperty[] ShowTraitsLeft = { CritterProperty::IsTraitFastMetabolism, CritterProperty::IsTraitBruiser, CritterProperty::IsTraitSmallFrame, CritterProperty::IsTraitOneHander, CritterProperty::IsTraitFinesse, CritterProperty::IsTraitKamikaze, CritterProperty::IsTraitHeavyHanded, CritterProperty::IsTraitFastShot };
    CritterProperty[] ShowTraitsRight = { CritterProperty::IsTraitBloodyMess, CritterProperty::IsTraitJinxed, CritterProperty::IsTraitGoodNatured, CritterProperty::IsTraitChemReliant, CritterProperty::IsTraitChemResistant, CritterProperty::IsTraitSexAppeal, CritterProperty::IsTraitSkilled, CritterProperty::IsTraitNightPerson };
    CritterProperty[] ShowSkills = { CritterProperty::SkillSmallGuns, CritterProperty::SkillBigGuns, CritterProperty::SkillEnergyWeapons, CritterProperty::SkillUnarmed, CritterProperty::SkillMeleeWeapons, CritterProperty::SkillThrowing, CritterProperty::SkillFirstAid, CritterProperty::SkillDoctor, CritterProperty::SkillSneak,
        CritterProperty::SkillLockpick, CritterProperty::SkillSteal, CritterProperty::SkillTraps, CritterProperty::SkillScience, CritterProperty::SkillRepair, CritterProperty::SkillSpeech, CritterProperty::SkillBarter, CritterProperty::SkillGambling, CritterProperty::SkillOutdoorsman };
    
    dict< CritterProperty, int > RegProps;
    dict< CritterProperty, int > Props;
    CritterProperty CurTip = CritterProperty::Invalid;
    
    int GetPropValue( CritterProperty prop )
    {
        return Props.get( prop, 0 );
    }
    
    void GenProps()
    {
        Props = RegProps;
        CritterGenerate( Props );
        #ifdef PLAYERS_3D
        Set3DRegistrationGender( Props[ CritterProperty::Gender ] );
        #endif
    }
    
    int GetUnspentStatPoints()
    {
        int unspent = __StartSpecialPoints;
        for( uint i = 0; i < ShowBaseStats.length(); i++ )
            unspent -= RegProps.get( ShowBaseStats[ i ], 0 );
        return unspent;
    }
    
    bool IsTagSkill( CritterProperty prop )
    {
        return GetPropValue( CritterProperty::TagSkill1 ) == prop ||
            GetPropValue( CritterProperty::TagSkill2 ) == prop ||
            GetPropValue( CritterProperty::TagSkill3 ) == prop;
    }
    
    string@ FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Registration : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
        }

        void OnInit() override
        {
            RegProps = GenerateRegProps();
            GenProps();
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 80, 60 );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/registr.png" );
        }
    }

    class BaseStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 15, 35 );
            SetCellPrototype( "BaseStat" );
            SetGridSize( ShowBaseStats.length() );
        }
    }

    class BaseStat : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 155, 33 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowBaseStats[ cellIndex ];
        }
    }

    class StatName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 4, 4 );
            SetSize( 40, 20 );
            SetText( "TXT" );
            SetTextFont( FONT_BIG );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Prop ) );
        }
    }

    class StatValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 44, 2 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetPropValue( cast< BaseStat >( Parent ).Prop ) );
        }
    }

    class StatValueDesc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 87, 4 );
            SetSize( 45, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL_ABB( GetPropValue( cast< BaseStat >( Parent ).Prop ) ) );
        }
    }

    class StatInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 134, 4 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/plus_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< BaseStat >( Parent ).Prop;
            if( Props[ prop ] < 10 && GetUnspentStatPoints() > 0 )
            {
                RegProps[ prop ] = RegProps[ prop ] + 1;
                GenProps();
            }
        }
    }

    class StatDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 134, 15 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< BaseStat >( Parent ).Prop;
            if( Props[ prop ] > 1 )
            {
                RegProps[ prop ] = RegProps[ prop ] - 1;
                GenProps();
            }
        }
    }

    class BaseStatPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 25, 276 );
        }
    }

    class Title1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -4, 4 );
            SetSize( 100, 30 );
            SetText( MSG_GAME( STR_REG_SPECIAL_SUM ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class StatPointsValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 97, 2 );
            SetSize( 34, 30 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetUnspentStatPoints() );
        }
    }

    class HealthStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 42 );
            SetCellPrototype( "HealthStat" );
            SetGridSize( ShowHealthStats.length() );
        }
    }

    class HealthStat : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 122, 14 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowHealthStats[ cellIndex ];
        }
    }

    class StatDesc : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 122, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            CritterProperty prop = cast< HealthStat >( Parent ).Prop;
            uint color;
            if( prop == CritterProperty::IsRadiated )
                color = ( GetPropValue( CritterProperty::RadiationLevel ) != 0 ? 0 : COLOR_DARK );
            else if( prop == CritterProperty::IsPoisoned )
                color = ( GetPropValue( CritterProperty::PoisoningLevel ) != 0 ? 0 : COLOR_DARK );
            else
                color = ( GetPropValue( prop ) != 0 ? 0: COLOR_DARK );
            SetTextColor( color );
        }

        string@ get_Text() override
        {
            CritterProperty prop = cast< HealthStat >( Parent ).Prop;
            if( prop == CritterProperty::MaxLife )
                return MSG_GAME( STR_INV_HP ) + "  " + GetPropValue( CritterProperty::CurrentHp ) + " / " + GetPropValue( CritterProperty::MaxLife );
            return MSG_GAME( STR_PARAM_NAME( prop ) );
        }
    }

    class ExtendedStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 179 );
            SetCellPrototype( "ExtendedStat" );
            SetGridSize( ShowExtendedStats.length() );
        }
    }

    class ExtendedStat : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 122, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowExtendedStats[ cellIndex ];
        }
    }

    class StatName2 : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 100, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            CritterProperty prop = cast< ExtendedStat >( Parent ).Prop;
            Text                 = MSG_GAME( STR_PARAM_NAME_SHORT( prop ) );
        }
    }

    class StatValue2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 98, 0 );
            SetSize( 25, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            CritterProperty prop = cast< ExtendedStat >( Parent ).Prop;
            string text;
            if( prop == CritterProperty::CarryWeight )
                text = "" + ( GetPropValue( prop ) / 1000 );
            else if( prop == CritterProperty::NormalResistance || prop == CritterProperty::PoisonResistance || prop == CritterProperty::RadiationResistance )
                text = "" + GetPropValue( prop ) + "%";
            else
                text = "" + GetPropValue( prop );
            return text;
        }
    }

    class Traits : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 19, 347 );
        }
    }

    class TraitsLeft : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 4, 6 );
            SetCellPrototype( "TraitLeft" );
            SetGridSize( ShowTraitsLeft.length() );
        }
    }

    class TraitLeft : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 150, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowTraitsLeft[ cellIndex ];
        }
    }

    class Switcher1 : GUIButton
    {
        void OnConstruct() override
        {
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< TraitLeft >( Parent ).Prop;
            if( RegProps[ prop ] == 0 )
            {
                int count = 0;
                for( uint i = 0; i < CritterPropertyTraits.length(); i++ )
                    if( RegProps[ CritterPropertyTraits[ i ] ] != 0 )
                        count++;
                 if( count < 2 )
                     RegProps[ prop ] = 1;
            }
            else
            {
                RegProps[ prop ] = 0;
            }
            
            Parent.FindText( "TraitName1" ).SetTextColor( RegProps[ prop ] != 0 ? COLOR_LGRAY : 0 );
            
            GenProps();
        }
    }

    class TraitName1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, -1 );
            SetSize( 140, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitLeft >( Parent ).Prop ) );
        }
    }

    class TraitsRight : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 154, 6 );
            SetCellPrototype( "TraitRight" );
            SetGridSize( ShowTraitsRight.length() );
        }
    }

    class TraitRight : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 148, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowTraitsRight[ cellIndex ];
        }
    }

    class Switcher2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 125, 0 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< TraitRight >( Parent ).Prop;
            if( RegProps[ prop ] == 0 )
            {
                int count = 0;
                for( uint i = 0; i < CritterPropertyTraits.length(); i++ )
                    if( RegProps[ CritterPropertyTraits[ i ] ] != 0 )
                        count++;
                 if( count < 2 )
                     RegProps[ prop ] = 1;
            }
            else
            {
                RegProps[ prop ] = 0;
            }
            
            Parent.FindText( "TraitName2" ).SetTextColor( RegProps[ prop ] != 0 ? COLOR_LGRAY : 0 );
            
            GenProps();
        }
    }

    class TraitName2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 10, -1 );
            SetSize( 110, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitRight >( Parent ).Prop ) );
        }
    }

    class Skills : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 348, 26 );
            SetCellPrototype( "Skill" );
            SetGridSize( ShowSkills.length() );
        }
    }

    class Skill : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 280, 11 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowSkills[ cellIndex ];
        }
    }

    class TagSkill : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -2, 0 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CritterProperty prop = cast< Skill >( Parent ).Prop;
            int freeTagSkills    = __StartTagSkillPoints - ( RegProps[ CritterProperty::TagSkill1 ] != 0 ? 1 : 0 ) - ( RegProps[ CritterProperty::TagSkill2 ] != 0 ? 1 : 0 ) - ( RegProps[ CritterProperty::TagSkill3 ] != 0 ? 1 : 0 );
            
            if( RegProps[ CritterProperty::TagSkill1 ] == prop )
                RegProps[ CritterProperty::TagSkill1 ] = 0;
            else if( RegProps[ CritterProperty::TagSkill2 ] == prop )
                RegProps[ CritterProperty::TagSkill2 ] = 0;
            else if( RegProps[ CritterProperty::TagSkill3 ] == prop )
                RegProps[ CritterProperty::TagSkill3 ] = 0;
            else if( RegProps[ CritterProperty::TagSkill1 ] == 0 && freeTagSkills > 0 )
                RegProps[ CritterProperty::TagSkill1 ] = prop;
            else if( RegProps[ CritterProperty::TagSkill2 ] == 0 && freeTagSkills > 0 )
                RegProps[ CritterProperty::TagSkill2 ] = prop;
            else if( RegProps[ CritterProperty::TagSkill3 ] == 0 && freeTagSkills > 0 )
                RegProps[ CritterProperty::TagSkill3 ] = prop;
            
            bool tagged = ( RegProps[ CritterProperty::TagSkill1 ] == prop || RegProps[ CritterProperty::TagSkill2 ] == prop || RegProps[ CritterProperty::TagSkill3 ] == prop );
            Parent.FindText( "SkillName" ).SetTextColor( tagged ? COLOR_LGRAY : 0 );
            Parent.FindText( "SkillValue" ).SetTextColor( tagged ? COLOR_LGRAY : 0 );
            
            GenProps();
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, -1 );
            SetSize( 200, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Prop ) );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Prop ) ? 0xFFAAAAAA : COLOR_TEXT );
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 225, -1 );
            SetSize( 40, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Prop ) ? 0xFFAAAAAA : COLOR_TEXT );
        }

        string@ get_Text() override
        {
            return GetPropValue( cast< Skill >( Parent ).Prop ) + "%";
        }
    }

    class Title3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 19, -25 );
            SetSize( 150, 24 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentSkillPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 352, 227 );
        }
    }

    class Title2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 1, 1 );
            SetSize( 150, 26 );
            SetText( MSG_GAME( STR_REG_UNSPENT_TAGS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 171, 1 );
            SetSize( 30, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int freeTagSkills = __StartTagSkillPoints - ( RegProps[ CritterProperty::TagSkill1 ] != 0 ? 1 : 0 ) - ( RegProps[ CritterProperty::TagSkill2 ] != 0 ? 1 : 0 ) - ( RegProps[ CritterProperty::TagSkill3 ] != 0 ? 1 : 0 );
            return FormatXX( freeTagSkills );
        }
    }

    class Tip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 342, 264 );
        }

        void OnDraw() override
        {
            GUIObject@ obj = GUI_GetFocusedObject();
            if( obj is null )
                return;
            
            CritterProperty prop = CritterProperty::Invalid;
            
            #define CHECK_PROP_PARENT #( className ) if( prop == CritterProperty::Invalid && cast< className >( obj.Parent ) !is null ) prop = cast< className >( obj.Parent ).Prop
            
            CHECK_PROP_PARENT( BaseStat );
            CHECK_PROP_PARENT( HealthStat );
            CHECK_PROP_PARENT( ExtendedStat );
            CHECK_PROP_PARENT( TraitLeft );
            CHECK_PROP_PARENT( TraitRight );
            CHECK_PROP_PARENT( Skill );
            
            if( prop != CritterProperty::Invalid && CurTip != prop )
            {
                CurTip = prop;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( prop ) );
                FindText( "Desc" ).Text = MSG_GAME( STR_PARAM_DESC( prop ) );
                FindPanel( "Image" ).SetBackgroundImage( STR_PARAM_PIC( prop ) );
            }
        }
    }

    class Image : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 44 );
        }
    }

    class Name : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 7 );
            SetSize( 270, 31 );
            SetTextFont( FONT_THIN );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Desc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 44 );
            SetSize( 150, 124 );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Buttons : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 334, 448 );
        }
    }

    class Print : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 31, 0 );
        }
    }

    class Button1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -21, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_PRINT ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Done : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 0 );
        }
    }

    class Button2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -19, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            if( CritterGenerateCheck( RegProps ) )
            {
                string propsStr;
                for( uint i = 0; i < RegProps.length(); i++ )
                    if( RegProps.getValue( i ) != 0 )
                        propsStr += " " + RegProps.getKey( i ) + " " + RegProps.getValue( i );
                CustomCall( "Register" + propsStr );
            }
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_OK ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Back : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 237, 0 );
        }
    }

    class Button3 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -18, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            TryExit();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -1, 5 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class CharacterName : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 21, 1 );
        }
    }

    class Button4 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -10, -1 );
            SetSize( 145, 35 );
            SetPressedImage( "art/intrface/name_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterNamePopUp" ).SetActive( true );
        }
    }

    class CharacterText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 67, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return __RegName;
        }
    }

    class CharacterAge : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 160, 1 );
        }
    }

    class Button5 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -6, -1 );
            SetSize( 81, 32 );
            SetPressedImage( "art/intrface/age_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterAgePopUp" ).SetActive( true );
        }
    }

    class AgeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 39, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return "" + GetPropValue( CritterProperty::Age );
        }
    }

    class CharacterGender : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 240, 1 );
        }
    }

    class Button6 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -6, -1 );
            SetSize( 80, 32 );
            SetPressedImage( "art/intrface/gender_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterGenderPopUp" ).SetActive( true );
        }
    }

    class GenderText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 32, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return GetPropValue( CritterProperty::Gender ) == GENDER_MALE ? MSG_GAME( STR_MALE_NAME ) : MSG_GAME( STR_FEMALE_NAME );
        }
    }

    class CharacterNamePopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 21, 5 );
            SetSize( 168, 108 );
            SetBackgroundImage( "art/intrface/cha_name.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                GUI_SetFocusedObject( FindTextInput( "ChaName" ) );
        }
    }

    class ChaName : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 22, 32 );
            SetSize( 120, 14 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __RegName );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __RegName = Text;
            
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Parent.SetActive( false );
        }
    }

    class ChaPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 22, 73 );
            SetSize( 120, 14 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __RegPassword );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __RegPassword = Text;
            
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Parent.SetActive( false );
        }
    }

    class CharacterAgePopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 126, 5 );
            SetSize( 139, 43 );
            SetBackgroundImage( "art/intrface/cha_age.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class IncAge : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 11 );
            SetSize( 20, 18 );
            SetPressedImage( "art/intrface/age_inc_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            RegProps[ CritterProperty::Age ] = RegProps[ CritterProperty::Age ] + 1;
            if( RegProps[ CritterProperty::Age ] > AGE_MAX )
                RegProps[ CritterProperty::Age ] = AGE_MIN;
            GenProps();
        }
    }

    class DecAge : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 17, 11 );
            SetSize( 20, 18 );
            SetPressedImage( "art/intrface/age_dec_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            RegProps[ CritterProperty::Age ] = RegProps[ CritterProperty::Age ] - 1;
            if( RegProps[ CritterProperty::Age ] < AGE_MIN )
                RegProps[ CritterProperty::Age ] = AGE_MAX;
            GenProps();
        }
    }

    class AgeValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 54, 8 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetPropValue( CritterProperty::Age ) );
        }
    }

    class CharacterGenderPopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 208, 5 );
            SetSize( 139, 72 );
            SetBackgroundImage( "art/intrface/cha_sex.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class Male : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 17, 16 );
            SetSize( 45, 43 );
            SetPressedImage( "art/intrface/male_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            RegProps[ CritterProperty::Gender ] = GENDER_MALE;
            GenProps();
            SetSwitch( true );
            Parent.FindButton( "Female" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( RegProps[ CritterProperty::Gender ] == GENDER_MALE );
        }
    }

    class Female : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 76, 16 );
            SetSize( 45, 42 );
            SetPressedImage( "art/intrface/female_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            RegProps[ CritterProperty::Gender ] = GENDER_FEMALE;
            GenProps();
            SetSwitch( true );
            Parent.FindButton( "Male" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( RegProps[ CritterProperty::Gender ] == GENDER_FEMALE );
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 30, 0 );
            SetSize( 700, 50 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    Registration@ CreateRegistrationHierarchy( GUIObject@ parent )
    {
        Registration obj();
        CreateMainHierarchy( obj );
        CreateMessageBoxHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Main@ CreateMainHierarchy( GUIObject@ parent )
    {
        Main obj();
        CreateBaseStatsHierarchy( obj );
        CreateBaseStatPointsHierarchy( obj );
        CreateHealthStatsHierarchy( obj );
        CreateExtendedStatsHierarchy( obj );
        CreateTraitsHierarchy( obj );
        CreateSkillsHierarchy( obj );
        CreateUnspentSkillPointsHierarchy( obj );
        CreateTipHierarchy( obj );
        CreateButtonsHierarchy( obj );
        CreateCharacterNameHierarchy( obj );
        CreateCharacterAgeHierarchy( obj );
        CreateCharacterGenderHierarchy( obj );
        CreateCharacterNamePopUpHierarchy( obj );
        CreateCharacterAgePopUpHierarchy( obj );
        CreateCharacterGenderPopUpHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    BaseStats@ CreateBaseStatsHierarchy( GUIObject@ parent )
    {
        BaseStats obj();
        CreateBaseStatHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    BaseStat@ CreateBaseStatHierarchy( GUIObject@ parent )
    {
        BaseStat obj();
        CreateStatNameHierarchy( obj );
        CreateStatValueHierarchy( obj );
        CreateStatValueDescHierarchy( obj );
        CreateStatIncHierarchy( obj );
        CreateStatDecHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    StatName@ CreateStatNameHierarchy( GUIObject@ parent )
    {
        StatName obj();
        obj.Init( parent );
        return obj;
    }

    StatValue@ CreateStatValueHierarchy( GUIObject@ parent )
    {
        StatValue obj();
        obj.Init( parent );
        return obj;
    }

    StatValueDesc@ CreateStatValueDescHierarchy( GUIObject@ parent )
    {
        StatValueDesc obj();
        obj.Init( parent );
        return obj;
    }

    StatInc@ CreateStatIncHierarchy( GUIObject@ parent )
    {
        StatInc obj();
        obj.Init( parent );
        return obj;
    }

    StatDec@ CreateStatDecHierarchy( GUIObject@ parent )
    {
        StatDec obj();
        obj.Init( parent );
        return obj;
    }

    BaseStatPoints@ CreateBaseStatPointsHierarchy( GUIObject@ parent )
    {
        BaseStatPoints obj();
        CreateTitle1Hierarchy( obj );
        CreateStatPointsValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Title1@ CreateTitle1Hierarchy( GUIObject@ parent )
    {
        Title1 obj();
        obj.Init( parent );
        return obj;
    }

    StatPointsValue@ CreateStatPointsValueHierarchy( GUIObject@ parent )
    {
        StatPointsValue obj();
        obj.Init( parent );
        return obj;
    }

    HealthStats@ CreateHealthStatsHierarchy( GUIObject@ parent )
    {
        HealthStats obj();
        CreateHealthStatHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    HealthStat@ CreateHealthStatHierarchy( GUIObject@ parent )
    {
        HealthStat obj();
        CreateStatDescHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    StatDesc@ CreateStatDescHierarchy( GUIObject@ parent )
    {
        StatDesc obj();
        obj.Init( parent );
        return obj;
    }

    ExtendedStats@ CreateExtendedStatsHierarchy( GUIObject@ parent )
    {
        ExtendedStats obj();
        CreateExtendedStatHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ExtendedStat@ CreateExtendedStatHierarchy( GUIObject@ parent )
    {
        ExtendedStat obj();
        CreateStatName2Hierarchy( obj );
        CreateStatValue2Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    StatName2@ CreateStatName2Hierarchy( GUIObject@ parent )
    {
        StatName2 obj();
        obj.Init( parent );
        return obj;
    }

    StatValue2@ CreateStatValue2Hierarchy( GUIObject@ parent )
    {
        StatValue2 obj();
        obj.Init( parent );
        return obj;
    }

    Traits@ CreateTraitsHierarchy( GUIObject@ parent )
    {
        Traits obj();
        CreateTraitsLeftHierarchy( obj );
        CreateTraitsRightHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TraitsLeft@ CreateTraitsLeftHierarchy( GUIObject@ parent )
    {
        TraitsLeft obj();
        CreateTraitLeftHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TraitLeft@ CreateTraitLeftHierarchy( GUIObject@ parent )
    {
        TraitLeft obj();
        CreateSwitcher1Hierarchy( obj );
        CreateTraitName1Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Switcher1@ CreateSwitcher1Hierarchy( GUIObject@ parent )
    {
        Switcher1 obj();
        obj.Init( parent );
        return obj;
    }

    TraitName1@ CreateTraitName1Hierarchy( GUIObject@ parent )
    {
        TraitName1 obj();
        obj.Init( parent );
        return obj;
    }

    TraitsRight@ CreateTraitsRightHierarchy( GUIObject@ parent )
    {
        TraitsRight obj();
        CreateTraitRightHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TraitRight@ CreateTraitRightHierarchy( GUIObject@ parent )
    {
        TraitRight obj();
        CreateSwitcher2Hierarchy( obj );
        CreateTraitName2Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Switcher2@ CreateSwitcher2Hierarchy( GUIObject@ parent )
    {
        Switcher2 obj();
        obj.Init( parent );
        return obj;
    }

    TraitName2@ CreateTraitName2Hierarchy( GUIObject@ parent )
    {
        TraitName2 obj();
        obj.Init( parent );
        return obj;
    }

    Skills@ CreateSkillsHierarchy( GUIObject@ parent )
    {
        Skills obj();
        CreateSkillHierarchy( obj );
        CreateTitle3Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Skill@ CreateSkillHierarchy( GUIObject@ parent )
    {
        Skill obj();
        CreateTagSkillHierarchy( obj );
        CreateSkillNameHierarchy( obj );
        CreateSkillValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TagSkill@ CreateTagSkillHierarchy( GUIObject@ parent )
    {
        TagSkill obj();
        obj.Init( parent );
        return obj;
    }

    SkillName@ CreateSkillNameHierarchy( GUIObject@ parent )
    {
        SkillName obj();
        obj.Init( parent );
        return obj;
    }

    SkillValue@ CreateSkillValueHierarchy( GUIObject@ parent )
    {
        SkillValue obj();
        obj.Init( parent );
        return obj;
    }

    Title3@ CreateTitle3Hierarchy( GUIObject@ parent )
    {
        Title3 obj();
        obj.Init( parent );
        return obj;
    }

    UnspentSkillPoints@ CreateUnspentSkillPointsHierarchy( GUIObject@ parent )
    {
        UnspentSkillPoints obj();
        CreateTitle2Hierarchy( obj );
        CreateUnspentValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Title2@ CreateTitle2Hierarchy( GUIObject@ parent )
    {
        Title2 obj();
        obj.Init( parent );
        return obj;
    }

    UnspentValue@ CreateUnspentValueHierarchy( GUIObject@ parent )
    {
        UnspentValue obj();
        obj.Init( parent );
        return obj;
    }

    Tip@ CreateTipHierarchy( GUIObject@ parent )
    {
        Tip obj();
        CreateImageHierarchy( obj );
        CreateNameHierarchy( obj );
        CreateDescHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Image@ CreateImageHierarchy( GUIObject@ parent )
    {
        Image obj();
        obj.Init( parent );
        return obj;
    }

    Name@ CreateNameHierarchy( GUIObject@ parent )
    {
        Name obj();
        obj.Init( parent );
        return obj;
    }

    Desc@ CreateDescHierarchy( GUIObject@ parent )
    {
        Desc obj();
        obj.Init( parent );
        return obj;
    }

    Buttons@ CreateButtonsHierarchy( GUIObject@ parent )
    {
        Buttons obj();
        CreatePrintHierarchy( obj );
        CreateDoneHierarchy( obj );
        CreateBackHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Print@ CreatePrintHierarchy( GUIObject@ parent )
    {
        Print obj();
        CreateButton1Hierarchy( obj );
        CreateText7Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button1@ CreateButton1Hierarchy( GUIObject@ parent )
    {
        Button1 obj();
        obj.Init( parent );
        return obj;
    }

    Text7@ CreateText7Hierarchy( GUIObject@ parent )
    {
        Text7 obj();
        obj.Init( parent );
        return obj;
    }

    Done@ CreateDoneHierarchy( GUIObject@ parent )
    {
        Done obj();
        CreateButton2Hierarchy( obj );
        CreateText8Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button2@ CreateButton2Hierarchy( GUIObject@ parent )
    {
        Button2 obj();
        obj.Init( parent );
        return obj;
    }

    Text8@ CreateText8Hierarchy( GUIObject@ parent )
    {
        Text8 obj();
        obj.Init( parent );
        return obj;
    }

    Back@ CreateBackHierarchy( GUIObject@ parent )
    {
        Back obj();
        CreateButton3Hierarchy( obj );
        CreateText9Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button3@ CreateButton3Hierarchy( GUIObject@ parent )
    {
        Button3 obj();
        obj.Init( parent );
        return obj;
    }

    Text9@ CreateText9Hierarchy( GUIObject@ parent )
    {
        Text9 obj();
        obj.Init( parent );
        return obj;
    }

    CharacterName@ CreateCharacterNameHierarchy( GUIObject@ parent )
    {
        CharacterName obj();
        CreateButton4Hierarchy( obj );
        CreateCharacterTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button4@ CreateButton4Hierarchy( GUIObject@ parent )
    {
        Button4 obj();
        obj.Init( parent );
        return obj;
    }

    CharacterText@ CreateCharacterTextHierarchy( GUIObject@ parent )
    {
        CharacterText obj();
        obj.Init( parent );
        return obj;
    }

    CharacterAge@ CreateCharacterAgeHierarchy( GUIObject@ parent )
    {
        CharacterAge obj();
        CreateButton5Hierarchy( obj );
        CreateAgeTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button5@ CreateButton5Hierarchy( GUIObject@ parent )
    {
        Button5 obj();
        obj.Init( parent );
        return obj;
    }

    AgeText@ CreateAgeTextHierarchy( GUIObject@ parent )
    {
        AgeText obj();
        obj.Init( parent );
        return obj;
    }

    CharacterGender@ CreateCharacterGenderHierarchy( GUIObject@ parent )
    {
        CharacterGender obj();
        CreateButton6Hierarchy( obj );
        CreateGenderTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button6@ CreateButton6Hierarchy( GUIObject@ parent )
    {
        Button6 obj();
        obj.Init( parent );
        return obj;
    }

    GenderText@ CreateGenderTextHierarchy( GUIObject@ parent )
    {
        GenderText obj();
        obj.Init( parent );
        return obj;
    }

    CharacterNamePopUp@ CreateCharacterNamePopUpHierarchy( GUIObject@ parent )
    {
        CharacterNamePopUp obj();
        CreateChaNameHierarchy( obj );
        CreateChaPasswordHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChaName@ CreateChaNameHierarchy( GUIObject@ parent )
    {
        ChaName obj();
        obj.Init( parent );
        return obj;
    }

    ChaPassword@ CreateChaPasswordHierarchy( GUIObject@ parent )
    {
        ChaPassword obj();
        obj.Init( parent );
        return obj;
    }

    CharacterAgePopUp@ CreateCharacterAgePopUpHierarchy( GUIObject@ parent )
    {
        CharacterAgePopUp obj();
        CreateIncAgeHierarchy( obj );
        CreateDecAgeHierarchy( obj );
        CreateAgeValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    IncAge@ CreateIncAgeHierarchy( GUIObject@ parent )
    {
        IncAge obj();
        obj.Init( parent );
        return obj;
    }

    DecAge@ CreateDecAgeHierarchy( GUIObject@ parent )
    {
        DecAge obj();
        obj.Init( parent );
        return obj;
    }

    AgeValue@ CreateAgeValueHierarchy( GUIObject@ parent )
    {
        AgeValue obj();
        obj.Init( parent );
        return obj;
    }

    CharacterGenderPopUp@ CreateCharacterGenderPopUpHierarchy( GUIObject@ parent )
    {
        CharacterGenderPopUp obj();
        CreateMaleHierarchy( obj );
        CreateFemaleHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Male@ CreateMaleHierarchy( GUIObject@ parent )
    {
        Male obj();
        obj.Init( parent );
        return obj;
    }

    Female@ CreateFemaleHierarchy( GUIObject@ parent )
    {
        Female obj();
        obj.Init( parent );
        return obj;
    }

    MessageBox@ CreateMessageBoxHierarchy( GUIObject@ parent )
    {
        MessageBox obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateRegistrationHierarchy( null );
    }
}

namespace Game
{
    string@ FormatXXX( int value )
    {
        string@ result = "";
        int offs = 0;
        if( value >= 0 )
        {
            result += EncodeUTF8( '9' + 4 );
        }
        else
        {
            offs = 0x20;
            result += EncodeUTF8( '9' + offs + 3 );
            value = -value;
        }
    
        value = CLAMP( value, 0, 999 );
    
        result += EncodeUTF8( '0' + offs + value / 100 );
        result += EncodeUTF8( '0' + offs + value / 10 % 10 );
        result += EncodeUTF8( '0' + offs + value % 10 );
    
        return result;
    }
    
    
     void GameLMouseDown()
    {
        Critter@ chosen = GetChosen();
        if( chosen is null )
            return;
    
        int cursor = __Cursor;
        if( cursor == CursorType::Move )
        {
            uint[] actions;
            GetChosenActions( actions );
            bool isMoveAction = ( actions.length() > 0 && actions[ 0 ] == CHOSEN_MOVE );
            if( isMoveAction && GetTick() - actions[ 6 ] < __DoubleClickTime )
            {
                actions[ 3 ] = ( __AlwaysRun ? 0 : 1 );
                actions[ 5 ] = 0;
                SetChosenActions( actions );
            }
            else
            {
                uint16 hx = 0, hy = 0;
                if( GetMonitorHex( __MouseX, __MouseY, hx, hy ) )
                {
                    uint dist = GetDistantion( chosen.HexX, chosen.HexY, hx, hy );
                    bool isRun = ( IsShiftDown() ? !__AlwaysRun : __AlwaysRun && dist >= __AlwaysRunMoveDist );
                    SetChosenActions( array< uint > = { CHOSEN_MOVE, hx, hy, isRun ? 1 : 0, 0, isMoveAction ? 0 : 1, GetTick() } );
                }
            }
        }
        else if( cursor == CursorType::UseItem || cursor == CursorType::UseWeapon )
        {
            bool        isAttack = ( cursor == CursorType::UseWeapon );
            const Item@ useItem = ( !isAttack && __CursorData != 0 ? chosen.GetItemById( __CursorData ) : chosen.GetSlotItem( SLOT_HAND1 ) );
            if( useItem !is null )
            {
                Entity@ entity = null;
                if( isAttack )
                    @entity = GetMonitorCritter( __MouseX, __MouseY );
                else
                    @entity = GetMonitorEntity( __MouseX, __MouseY );
    
                Critter@ cr = cast< Critter >( entity );
                Item@    item = cast< Item >( entity );
                if( cr !is null )
                {
                    if( isAttack && _WeaponModeAim( useItem.Mode ) != 0 )
                    {
                        //IsCritterCanAim( chosen.ModelName ) && 
                        if( !chosen.IsNoAim )
                        {
                            dictionary dict;
                            dict[ "CritterId" ] = cr.Id;
                            ShowScreen( CLIENT_SCREEN_AIM, dict );
                        }
                    }
                    else
                    {
                        SetChosenActions( array< uint > = { CHOSEN_USE_ITEM, useItem.Id, 0, TARGET_CRITTER, cr.Id, isAttack ? useItem.Mode : USE_USE, 0 } );
                    }
                }
                else if( item !is null )
                {
                    SetChosenActions( array< uint > = { CHOSEN_USE_ITEM, useItem.Id, 0, TARGET_ITEM, item.Id, USE_USE, 0 } );
                }
            }
        }
    }
     
     
     void GameLMouseUp()
     {
            
     }

    class Screen : GUIScreen
    {
        bool isHitIfaceOnMouseDown;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetPosition( 82, 41 );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
            SetNotHittable( true );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( __MapZooming && __SpritesZoomMin != __SpritesZoomMax )
            {
                if( button == MOUSE_BUTTON_WHEEL_UP )
                    ChangeZoom( __SpritesZoom - 0.01 );
                else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                    ChangeZoom( __SpritesZoom + 0.01 );
                else if( button == MOUSE_BUTTON_MIDDLE )
                    ChangeZoom( 1.0 );
            }
            
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MOUSE_BUTTON_LEFT )
                    GameLMouseDown();
                else if( button == MOUSE_BUTTON_RIGHT )
                    isHitIfaceOnMouseDown = ( FindMouseHit() !is null );
            }
        }

        void OnGlobalMouseUp( int button ) override
        {
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MOUSE_BUTTON_LEFT )
                    GameLMouseUp();
                else if( button == MOUSE_BUTTON_RIGHT && !isHitIfaceOnMouseDown )
                    NextCursor();
            }
        }

        void OnGlobalMouseMove() override
        {
            //CustomCall( "ProcessMouseScroll" );
             if( __MouseScroll)
                        {
                            __ScrollMouseRight = ( __MouseX >= __ScreenWidth - 1 );
                            __ScrollMouseLeft  = ( __MouseX <= 0 );
                            __ScrollMouseDown  = ( __MouseY >= __ScreenHeight - 1 );
                            __ScrollMouseUp    = ( __MouseY <= 0 );
                        }
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 475 );
            SetSize( 800, 125 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_RIGHT| ANCHOR_BOTTOM );
            SetCheckTransparentOnHit( true );
            SetBackgroundImage( "art/intrface/iface.png" );
        }
    }

    class Console : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, -37 );
        }
    }

    class ConsoleImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 800, 35 );
            SetBackgroundImage( "art/intrface/panel.png" );
        }
    }

    class ConsoleText : GUIConsole
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 13, 14 );
            SetNotHittable( true );
        }

        void OnActiveChanged() override
        {
            Parent.Find( "ConsoleImage" ).SetActive( ActiveSelf ); 
        }
    }

    class MessageBoxExtended : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 0, -55 );
            SetSize( 372, 112 );
            SetBackgroundImage( "art/intrface/iface_add_mess.png" );
        }
    }

    class MessageBoxText : GUIMessageBox
    {
        void FiltersChanged()
        {
            int[] messageTypes;
            if( cast< GUICheckBox >( Parent.Find( "Filter1" ) ).IsChecked )
                messageTypes.insertLast( FOMB_TALK );
            if( cast< GUICheckBox >( Parent.Find( "Filter2" ) ).IsChecked )
                messageTypes.insertLast( FOMB_COMBAT_RESULT );
        
            if( messageTypes.length() == 0 )
                messageTypes.insertLast( FOMB_ALL );
        
            SetDisplayedMessages( messageTypes );
        }

        void OnConstruct() override
        {
            SetPosition( 34, 28 );
            SetSize( 306, 76 );
            SetAnchor( ANCHOR_TOP );
        }
    }

    class ExtendMessageBox : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 355, 60 );
            SetSize( 11, 6 );
            SetPressedImage( "art/intrface/iface_small_btn.png" );
        }

        void OnCheckedChanged() override
        {
            GUIObject@ messageBoxText = Parent.Find( "MessageBoxText" );
            GUIObject@ messageBoxExtended = Parent.Find( "MessageBoxExtended" );
            GUIObject@ console = Parent.Find( "Console" );
            
            messageBoxText.SetSize( messageBoxText.Width, IsChecked ? 131 : 76 );
            messageBoxText.SetPosition( messageBoxText.PosX, IsChecked ? -27 : 28 );
            messageBoxExtended.SetActive( IsChecked );
            console.SetPosition( 0, IsChecked ? -92 : -37 );
        }
    }

    class Filter1 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 355, 68 );
            SetSize( 11, 6 );
            SetPressedImage( "art/intrface/iface_small_btn.png" );
        }

        void OnCheckedChanged() override
        {
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    }

    class Filter2 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 355, 75 );
            SetSize( 11, 6 );
            SetPressedImage( "art/intrface/iface_small_btn.png" );
        }

        void OnCheckedChanged() override
        {
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    }

    class GameMenu : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 370, 87 );
            SetSize( 34, 34 );
            SetPressedImage( "art/intrface/game_menu_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MENU );
        }
    }

    class Inventory : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 371, 65 );
            SetSize( 32, 21 );
            SetPressedImage( "art/intrface/inv_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_INVENTORY );
        }
    }

    class SwitchItems : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 378, 32 );
            SetSize( 22, 21 );
            SetPressedImage( "art/intrface/big_red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "ChangeSlot" );
        }
    }

    class Skills : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 636, 32 );
            SetSize( 22, 21 );
            SetPressedImage( "art/intrface/big_red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_SKILLBOX );
        }
    }

    class Map : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 686, 46 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/map_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MINIMAP );
        }
    }

    class Character : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 686, 65 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/cha_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_CHARACTER );
        }
    }

    class PipBoy : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 686, 84 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/pip_boy_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_PIP_BOY );
        }
    }

    class FixBoy : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 686, 103 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/iface_fix.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_FIX_BOY );
        }
    }

    class Combat : GUIPanel
    {
        bool CombatActive;

        void OnConstruct() override
        {
            SetPosition( 740, 64 );
            SetBackgroundImage( "art/intrface/combat.fofrm" );
        }

        void OnInit() override
        {
            BackgroundImage.SetFirstFrame();
        }

        void OnDraw() override
        {
            Critter@ chosen = GetChosen();
            bool combatActive = ( chosen !is null && IS_TIMEOUT( chosen.TimeoutBattle ) );
            if( combatActive != CombatActive )
            {
                CombatActive = combatActive;
                BackgroundImage.PlayAnimation( false, !combatActive );
                PlaySound( "ICIBOXX1" );
            }
            /*
            GetChild( 0 ).SetActive( CombatActive && CustomCall( "IsTurnBasedMyTurn" ) == "true" );
            GetChild( 1 ).SetActive( CombatActive && IsTurnBased() );
            */
        }
    }

    class EndTurn : GUIButton
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 10, 5 );
            SetSize( 38, 22 );
            SetPressedImage( "art/intrface/end_turn_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "EndTurn" );
        }
    }

    class EndCombat : GUICheckBox
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 10, 27 );
            SetSize( 38, 22 );
            SetPressedImage( "art/intrface/end_combat_button_dn.png" );
        }

        void OnDraw() override
        {
            Critter@ chosen = GetChosen();
            //SetChecked( IsTurnBased() && chosen !is null && chosen.IsEndCombat );
        }

        void OnLMouseClick() override
        {
            CustomCall( "EndCombat" );
        }
    }

    class ActionPoints : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 475, 40 );
            SetCellPrototype( "Led" );
            SetGridSize( 10 );
            SetColumns( 10 );
            SetPadding( 9, 0 );
        }

        void OnDraw() override
        {
            Critter@ chosen = GetChosen();
            int ap      = ( chosen !is null ? chosen.CurrentAp / AP_DIVIDER : 0 );
            uint moveAp = 0;//( IsTurnBased() && chosen !is null ? chosen.MoveAp : 0 );
            for( uint i = 0; i < Cells.length(); i++ )
            {
                uint absAp = uint( ABS( ap ) );
                bool active = ( i < absAp + moveAp );
                Cells[ i ].SetActive( active );
                if( active )
                {
                    Cells[ i ].GetChild( 0 ).SetActive( ap >= 0 && i < absAp ); // Green
                    Cells[ i ].GetChild( 1 ).SetActive( ap < 0 && i < absAp ); // Red
                    Cells[ i ].GetChild( 2 ).SetActive( i >= absAp ); // Yellow
                }
            }
        }
    }

    class Led : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class LedGreen : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 5, 5 );
            SetBackgroundImage( "art/intrface/led_green.png" );
        }
    }

    class LedRed : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 5, 5 );
            SetBackgroundImage( "art/intrface/led_red.png" );
        }
    }

    class LedYellow : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 5, 5 );
            SetBackgroundImage( "art/intrface/led_yellow.png" );
        }
    }

    class BreakTime : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 571, 40 );
        }

        void OnDraw() override
        {
            Critter@ chosen = GetChosen();
            GetChild( 0 ).SetActive( chosen !is null && chosen.IsBusy() );
        }
    }

    class BreakTimeLed : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 5, 5 );
            SetBackgroundImage( "art/intrface/led_red.png" );
        }
    }

    class HitPoints : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 633, 71 );
            SetTextFont( FONT_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int result = 0;
            Critter@ chosen = GetChosen();
            if( chosen !is null )
                result = chosen.CurrentHp;
            return FormatXXX( result );
        }
    }

    class ArmorClass : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 633, 102 );
            SetTextFont( FONT_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int result = 0;
            Critter@ chosen = GetChosen();
            if( chosen !is null )
                result = chosen.ArmorClass;
            return FormatXXX( result );
        }
    }

    import void SwitchMainItemMode( bool next ) from "Parameters";

    class MainItemPlate : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 426, 52 );
            SetSize( 188, 67 );
            SetPressedImage( "art/intrface/iface_item.png" );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT || button == MOUSE_BUTTON_RIGHT )
                GetChild( 0 ).SetPosition( 0, -2 );
        }

        void OnMouseUp( int button, bool lost ) override
        {
            GetChild( 0 ).SetPosition( 0, 0 );
        }

        void OnMouseClick( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT )
                CustomCall( "UseMainItem" );
            else if( button == MOUSE_BUTTON_RIGHT )
                SwitchMainItemMode( true );
            else if( button == MOUSE_BUTTON_WHEEL_UP )
                SwitchMainItemMode( false );
            else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                SwitchMainItemMode( true );
        }
    }

    class MainItemSlot : GUIItemView
    {
        void OnConstruct() override
        {
            SetNotHittable( true );
            SetCellPrototype( "MainItemSlotCell" );
            SetGridSize( 1 );
        }

        int OnCheckItem( Item@ item ) override
        {
            return item.CritSlot == SLOT_HAND1 ? 0 : -1;
        }
    }

    class MainItemSlotCell : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 188, 67 );
            SetNotHittable( true );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint picInv = 0;
            if( item !is null )
                picInv = ( item.PicInv != 0 ? item.PicInv : item.PicInv );
            SetBackgroundImage( picInv, IMAGE_LAYOUT_ZOOM );
        }
    }

    class AmmoCount : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 7, 14 );
            SetNotHittable( true );
            SetTextFont( FONT_SPECIAL );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetText( item !is null && item.Type == ItemType::Weapon ? "" + item.AmmoCount : "" );
        }
    }

    class DeteriorationValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 7, 24 );
            SetNotHittable( true );
            SetTextFont( FONT_SPECIAL );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetText( item !is null && item.Deteriorable ? item.Deterioration + "%" : "" );
        }
    }

    class UsePic : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 163, 8 );
            SetSize( 17, 12 );
            SetAnchor( ANCHOR_RIGHT| ANCHOR_TOP );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/ap_pic.png" );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint usePic = 0;
            
            const Item@ useItem = item;
            
            Critter@ chosen = GetChosen();
            if( useItem is null && chosen !is null )
                @useItem = chosen.GetSlotItem( SLOT_HAND1 );
            
            if( useItem !is null )
            {
                int use = _WeaponModeUse( useItem.Mode );
                if( useItem.Type == ItemType::Weapon )
                {
                    if( use == USE_RELOAD )
                        usePic = GetStrHash( "art/intrface/reload.frm" );
                    else if( use == USE_USE )
                        usePic = GetStrHash( "art/intrface/useon.frm" );
                    else if( use < MAX_USES )
                        usePic = _WeaponPicUse( useItem, use );
                }
                if( usePic == 0 && useItem.IsCanUseOnSmth )
                    usePic = GetStrHash( "art/intrface/useon.frm" );
                if( usePic == 0 && useItem.IsCanUse )
                    usePic = GetStrHash( "art/intrface/uset.frm" );
            }
            
            BackgroundImage.Load( usePic );
            SetPosition( 180 - BackgroundImage.Width, PosY );
        }
    }

    import uint GetItemUseApCost( const Critter& cr, const Item& proto, uint8 mode ) from "Parameters";

    class ApCost : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 10, 44 );
            SetNotHittable( true );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint apCost = 0;
            if( item !is null && item.Accessory == ItemOwnership::CritterInventory )
            {
                apCost = GetItemUseApCost( GetCritter( item.CritId ), item, item.Mode );
            }
            else if( item is null )
            {
                Critter@ chosen = GetChosen();
                if( chosen !is null )
                {
                    const Item@ item2 = chosen.GetSlotItem( SLOT_HAND1 );
                    apCost = GetItemUseApCost( chosen, item2, item2.Mode );
                }
            }
            
            SetActive( apCost > 0 );
            if( apCost > 0 )
                FindText( "ApCostValue" ).SetText( "" + apCost );
        }
    }

    class ApCostImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 17, 12 );
            SetBackgroundImage( "art/intrface/ap_pic.png" );
        }
    }

    class ApCostValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 20, 0 );
            SetTextFont( FONT_SAND_NUM );
            SetTextColor( COLOR_IFACE );
        }
    }

    class AimPic : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 162, 41 );
            SetSize( 18, 18 );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/aim_pic.png" );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            Critter@ chosen = GetChosen();
            uint8 mode = 0;
            if( item !is null )
                mode = item.Mode;
            else if( chosen !is null )
                mode = chosen.GetSlotItem( SLOT_HAND1 ).Mode;
            
            BackgroundImage.Hidden = ( _WeaponModeAim( mode ) == HIT_LOCATION_NONE );
        }
    }

    class Indicators : GUIPanel
    {
        #define INDICATOR_LINES          ( 0 )
        #define INDICATOR_NUMBERS        ( 1 )
        #define INDICATOR_BOTH           ( 2 )
        #define INDICATOR_CHANGE_TICK    ( 35 )
        
        void DrawIndicator( int[] rect, int[]& points, uint color, int cur, int max, uint& tick, bool isVertical, bool fromTopOrLeft )
        {
            int percent = 0;
            if( max != 0 )
            {
                percent = cur * 100 / max;
                percent = CLAMP( percent, 0, 100 );
            }
        
            if( GetTick() >= tick )
            {
                uint pointsCount = ( isVertical ? rect[ 3 ] : rect[ 2 ] ) / 2 * percent / 100;
                if( pointsCount == 0 && percent > 0 )
                    pointsCount = 1;
        
                if( points.length() / 3 != pointsCount )
                {
                    if( pointsCount > points.length() / 3 )
                        pointsCount = points.length() / 3 + 1;
                    else
                        pointsCount = points.length() / 3 - 1;
        
                    points.resize( pointsCount * 3 );
                    for( uint i = 0; i < pointsCount; i++ )
                    {
                        int x, y;
                        if( isVertical )
                        {
                            x = rect[ 0 ];
                            if( fromTopOrLeft )
                                y = rect[ 1 ] + i * 2;
                            else
                                y = rect[ 1 ] + rect[ 3 ] - i * 2;
                        }
                        else
                        {
                            y = rect[ 1 ];
                            if( fromTopOrLeft )
                                x = rect[ 0 ] + i * 2;
                            else
                                x = rect[ 0 ] + rect[ 2 ] - i * 2;
                        }
                        points[ i * 3 + 0 ] = x;
                        points[ i * 3 + 1 ] = y;
                        points[ i * 3 + 2 ] = color;
                    }
                }
                tick = GetTick() + INDICATOR_CHANGE_TICK;
            }
        
            if( points.length() > 0 )
                DrawPrimitive( DRAW_PRIMITIVE_POINTLIST, points );
        }

        void OnConstruct() override
        {
            SetPosition( 197, 0 );
        }
    }

    class AmmoLine : GUIPanel
    {
        int[] Points;
        uint CurTick;

        void OnConstruct() override
        {
            SetSize( 1, 70 );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            if( __IndicatorType != INDICATOR_LINES && __IndicatorType != INDICATOR_BOTH )
                return;
            
            int indicatorMax = 0;
            int indicatorCur = 0;
            
            if( item !is null )
            {
                if( item.Type == ItemType::Weapon && item.Weapon_MaxAmmoCount > 0 )
                {
                    indicatorMax = item.Weapon_MaxAmmoCount;
                    indicatorCur = item.AmmoCount;
                }
                else
                {
                    indicatorMax = item.IndicatorMax;
                    indicatorCur = item.Indicator;
                }
            }
            
            int[] rect = { AbsolutePosX, AbsolutePosY, Width, Height };
            cast< Indicators >( Parent ).DrawIndicator( rect, Points, COLOR_GREEN, indicatorCur, indicatorMax, CurTick, true, false );
        }
    }

    class DeteriorationLine : GUIPanel
    {
        int[] Points;
        uint CurTick;

        void OnConstruct() override
        {
            SetPosition( 3, 0 );
            SetSize( 1, 70 );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            if( __IndicatorType != INDICATOR_LINES && __IndicatorType != INDICATOR_BOTH )
                return;
            
            int indicatorMax = 0;
            int indicatorCur = 0;
            
            if( item !is null && item.Deteriorable )
            {
                indicatorMax = MAX_DETERIORATION;
                indicatorCur = item.Deterioration;
            }
            
            int[] rect = { AbsolutePosX, AbsolutePosY, Width, Height };
            cast< Indicators >( Parent ).DrawIndicator( rect, Points, COLOR_RED, indicatorCur, indicatorMax, CurTick, true, false );
        }
    }

    Screen@ CreateScreenHierarchy( GUIObject@ parent )
    {
        Screen obj();
        CreateMainHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Main@ CreateMainHierarchy( GUIObject@ parent )
    {
        Main obj();
        CreateConsoleHierarchy( obj );
        CreateMessageBoxExtendedHierarchy( obj );
        CreateMessageBoxTextHierarchy( obj );
        CreateExtendMessageBoxHierarchy( obj );
        CreateFilter1Hierarchy( obj );
        CreateFilter2Hierarchy( obj );
        CreateGameMenuHierarchy( obj );
        CreateInventoryHierarchy( obj );
        CreateSwitchItemsHierarchy( obj );
        CreateSkillsHierarchy( obj );
        CreateMapHierarchy( obj );
        CreateCharacterHierarchy( obj );
        CreatePipBoyHierarchy( obj );
        CreateFixBoyHierarchy( obj );
        CreateCombatHierarchy( obj );
        CreateActionPointsHierarchy( obj );
        CreateBreakTimeHierarchy( obj );
        CreateHitPointsHierarchy( obj );
        CreateArmorClassHierarchy( obj );
        CreateMainItemPlateHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Console@ CreateConsoleHierarchy( GUIObject@ parent )
    {
        Console obj();
        CreateConsoleImageHierarchy( obj );
        CreateConsoleTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ConsoleImage@ CreateConsoleImageHierarchy( GUIObject@ parent )
    {
        ConsoleImage obj();
        obj.Init( parent );
        return obj;
    }

    ConsoleText@ CreateConsoleTextHierarchy( GUIObject@ parent )
    {
        ConsoleText obj();
        obj.Init( parent );
        return obj;
    }

    MessageBoxExtended@ CreateMessageBoxExtendedHierarchy( GUIObject@ parent )
    {
        MessageBoxExtended obj();
        obj.Init( parent );
        return obj;
    }

    MessageBoxText@ CreateMessageBoxTextHierarchy( GUIObject@ parent )
    {
        MessageBoxText obj();
        obj.Init( parent );
        return obj;
    }

    ExtendMessageBox@ CreateExtendMessageBoxHierarchy( GUIObject@ parent )
    {
        ExtendMessageBox obj();
        obj.Init( parent );
        return obj;
    }

    Filter1@ CreateFilter1Hierarchy( GUIObject@ parent )
    {
        Filter1 obj();
        obj.Init( parent );
        return obj;
    }

    Filter2@ CreateFilter2Hierarchy( GUIObject@ parent )
    {
        Filter2 obj();
        obj.Init( parent );
        return obj;
    }

    GameMenu@ CreateGameMenuHierarchy( GUIObject@ parent )
    {
        GameMenu obj();
        obj.Init( parent );
        return obj;
    }

    Inventory@ CreateInventoryHierarchy( GUIObject@ parent )
    {
        Inventory obj();
        obj.Init( parent );
        return obj;
    }

    SwitchItems@ CreateSwitchItemsHierarchy( GUIObject@ parent )
    {
        SwitchItems obj();
        obj.Init( parent );
        return obj;
    }

    Skills@ CreateSkillsHierarchy( GUIObject@ parent )
    {
        Skills obj();
        obj.Init( parent );
        return obj;
    }

    Map@ CreateMapHierarchy( GUIObject@ parent )
    {
        Map obj();
        obj.Init( parent );
        return obj;
    }

    Character@ CreateCharacterHierarchy( GUIObject@ parent )
    {
        Character obj();
        obj.Init( parent );
        return obj;
    }

    PipBoy@ CreatePipBoyHierarchy( GUIObject@ parent )
    {
        PipBoy obj();
        obj.Init( parent );
        return obj;
    }

    FixBoy@ CreateFixBoyHierarchy( GUIObject@ parent )
    {
        FixBoy obj();
        obj.Init( parent );
        return obj;
    }

    Combat@ CreateCombatHierarchy( GUIObject@ parent )
    {
        Combat obj();
        CreateEndTurnHierarchy( obj );
        CreateEndCombatHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    EndTurn@ CreateEndTurnHierarchy( GUIObject@ parent )
    {
        EndTurn obj();
        obj.Init( parent );
        return obj;
    }

    EndCombat@ CreateEndCombatHierarchy( GUIObject@ parent )
    {
        EndCombat obj();
        obj.Init( parent );
        return obj;
    }

    ActionPoints@ CreateActionPointsHierarchy( GUIObject@ parent )
    {
        ActionPoints obj();
        CreateLedHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Led@ CreateLedHierarchy( GUIObject@ parent )
    {
        Led obj();
        CreateLedGreenHierarchy( obj );
        CreateLedRedHierarchy( obj );
        CreateLedYellowHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    LedGreen@ CreateLedGreenHierarchy( GUIObject@ parent )
    {
        LedGreen obj();
        obj.Init( parent );
        return obj;
    }

    LedRed@ CreateLedRedHierarchy( GUIObject@ parent )
    {
        LedRed obj();
        obj.Init( parent );
        return obj;
    }

    LedYellow@ CreateLedYellowHierarchy( GUIObject@ parent )
    {
        LedYellow obj();
        obj.Init( parent );
        return obj;
    }

    BreakTime@ CreateBreakTimeHierarchy( GUIObject@ parent )
    {
        BreakTime obj();
        CreateBreakTimeLedHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    BreakTimeLed@ CreateBreakTimeLedHierarchy( GUIObject@ parent )
    {
        BreakTimeLed obj();
        obj.Init( parent );
        return obj;
    }

    HitPoints@ CreateHitPointsHierarchy( GUIObject@ parent )
    {
        HitPoints obj();
        obj.Init( parent );
        return obj;
    }

    ArmorClass@ CreateArmorClassHierarchy( GUIObject@ parent )
    {
        ArmorClass obj();
        obj.Init( parent );
        return obj;
    }

    MainItemPlate@ CreateMainItemPlateHierarchy( GUIObject@ parent )
    {
        MainItemPlate obj();
        CreateMainItemSlotHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MainItemSlot@ CreateMainItemSlotHierarchy( GUIObject@ parent )
    {
        MainItemSlot obj();
        CreateMainItemSlotCellHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MainItemSlotCell@ CreateMainItemSlotCellHierarchy( GUIObject@ parent )
    {
        MainItemSlotCell obj();
        CreateAmmoCountHierarchy( obj );
        CreateDeteriorationValueHierarchy( obj );
        CreateUsePicHierarchy( obj );
        CreateApCostHierarchy( obj );
        CreateAimPicHierarchy( obj );
        CreateIndicatorsHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    AmmoCount@ CreateAmmoCountHierarchy( GUIObject@ parent )
    {
        AmmoCount obj();
        obj.Init( parent );
        return obj;
    }

    DeteriorationValue@ CreateDeteriorationValueHierarchy( GUIObject@ parent )
    {
        DeteriorationValue obj();
        obj.Init( parent );
        return obj;
    }

    UsePic@ CreateUsePicHierarchy( GUIObject@ parent )
    {
        UsePic obj();
        obj.Init( parent );
        return obj;
    }

    ApCost@ CreateApCostHierarchy( GUIObject@ parent )
    {
        ApCost obj();
        CreateApCostImageHierarchy( obj );
        CreateApCostValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ApCostImage@ CreateApCostImageHierarchy( GUIObject@ parent )
    {
        ApCostImage obj();
        obj.Init( parent );
        return obj;
    }

    ApCostValue@ CreateApCostValueHierarchy( GUIObject@ parent )
    {
        ApCostValue obj();
        obj.Init( parent );
        return obj;
    }

    AimPic@ CreateAimPicHierarchy( GUIObject@ parent )
    {
        AimPic obj();
        obj.Init( parent );
        return obj;
    }

    Indicators@ CreateIndicatorsHierarchy( GUIObject@ parent )
    {
        Indicators obj();
        CreateAmmoLineHierarchy( obj );
        CreateDeteriorationLineHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    AmmoLine@ CreateAmmoLineHierarchy( GUIObject@ parent )
    {
        AmmoLine obj();
        obj.Init( parent );
        return obj;
    }

    DeteriorationLine@ CreateDeteriorationLineHierarchy( GUIObject@ parent )
    {
        DeteriorationLine obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateScreenHierarchy( null );
    }
}

namespace GlobalMap
{
        string@ FormatXX( int value )
        {
            value = CLAMP( value, 0, 99 );
            return value < 10 ? "0" + value : "" + value;
        }

    class GlobalMap : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    class HardCodeMap : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, 20 );
            SetSize( 453, 444 );
        }
    }

    class MainPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 800, 600 );
            SetBackgroundImage( "art/intrface/GlobalMap/wm_iface800x600.png" );
        }
    }

    class InventButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 47, 19 );
            SetSize( 32, 21 );
            SetPressedImage( "art/intrface/inv_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_INVENTORY );
        }
    }

    class MenuButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 47, 44 );
            SetSize( 34, 34 );
            SetPressedImage( "art/intrface/game_menu_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MENU );
        }
    }

    class CharacterButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 83, 18 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/cha_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_CHARACTER );
        }
    }

    class PipBoyButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 83, 39 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/pip_boy_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_PIP_BOY );
        }
    }

    class FixBoyButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 84, 59 );
            SetSize( 41, 19 );
            SetPressedImage( "art/intrface/iface_fix.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_FIX_BOY );
        }
    }

    class ViewCar : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 12, 455 );
            SetSize( 156, 140 );
            SetItemsCollection( ITEMS_INVENTORY );
            SetUseSorting( true );
        }

        int OnCheckItem( Item@ item ) override
        {
            return item.Type == ItemType::Car ? 0 : -1;
        }
    }

    class CarImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 156, 140 );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetBackgroundImage( item !is null ? item.PicInv : 0 );
        }
    }

    class TimePanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 640, 4 );
            SetSize( 158, 33 );
        }
    }

    class DayText : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 29, 33 );
            SetTextFont( FONT_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return  FormatXX( __Day );
        }
    }

    class MounthText : GUIText
    {
        string[] CodeMonth = { "", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k" };

        void OnConstruct() override
        {
            SetPosition( 29, 0 );
            SetSize( 37, 33 );
            SetTextFont( FONT_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return CodeMonth[ __Month ];
        }
    }

    class YearText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 66, 0 );
            SetSize( 44, 33 );
            SetTextFont( FONT_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return "" + __Year;
        }
    }

    class TimeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 110, 0 );
            SetSize( 48, 33 );
            SetTextFont( FONT_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( __Hour ) + FormatXX( __Minute );
        }
    }

    class DialPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 52, 43 );
            SetSize( 58, 29 );
            SetBackgroundImage( "art/intrface/GlobalMap/WMDIAL/WMDIAL.fofrm" );
        }

        void OnDraw() override
        {
            uint timeInMinut = __Hour * 60 + __Minute;
            uint frmCount    = BackgroundImage.FrmCount;
            uint index       = timeInMinut * frmCount / ( 24 * 60 );
            BackgroundImage.SetFrame( index );
        }
    }

    class KnownLocationsMain : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 638, 128 );
        }
    }

    class KnownProtoLocs : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 23, 4 );
            SetSize( 119, 186 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( "CityNamePanel" );
            SetColumns( 1 );
        }

        void OnDraw() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            hash[] knownLocPid = chosen.KnownLocProtoId;
            if( GridSize != knownLocPid.length() + 5 )
                ResizeGrid( knownLocPid.length() + 5 );
        }
    }

    class CityNamePanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 119, 30 );
        }
    }

    class DisableTab : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 119, 30 );
            SetBackgroundImage( "art/intrface/GlobalMap/wm_blanktab.png" );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            SetActive( cellIndex >= chosen.KnownLocProtoId.length() );
        }
    }

    class Tab : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 119, 30 );
            SetBackgroundImage( "art/intrface/GlobalMap/wm_tab.png" );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            SetActive( cellIndex < chosen.KnownLocProtoId.length() );
        }
    }

    class ImageNameTown : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 29, 5 );
            SetSize( 82, 18 );
            SetBackgroundImage( "art/intrface/GlobalMap/gm_Arroyo.png" );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            if( cellIndex >= chosen.KnownLocProtoId.length() )
                return;
            hash proto     = chosen.KnownLocProtoId[ cellIndex ];
            string picName = MSG_LOCATION(STR_LOC_LABEL_PIC( proto ) );
            SetBackgroundImage( picName );
        }
    }

    class PickCityButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 7, 7 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }
    }

    class ScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 2, 9 );
            SetSize( 11, 14 );
            SetPressedImage( "art/intrface/arrow_up_on.png" );
        }

        void OnLMousePressed() override
        {
            GUIPanel@ panel = Parent.FindPanel( "KnownProtoLocs" );
            panel.ModifyScroll( -10, 0 );
        }
    }

    class ScrollDonw : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 2, 22 );
            SetSize( 11, 14 );
            SetPressedImage( "art/intrface/arrow_down_on.png" );
        }

        void OnLMousePressed() override
        {
            GUIPanel@ panel = Parent.FindPanel( "KnownProtoLocs" );
            panel.ModifyScroll( 10, 0 );
        }
    }

    class GMTownButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 679, 438 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnLMouseClick() override
        {
            ServerRpc.Rpc_ShowGMTown( 0 );
        }
    }

    class Console : GUIConsole
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 182, 482 );
            SetSize( 590, 16 );
            SetTextFlags( FT_CENTERY );
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 183, 504 );
            SetSize( 590, 90 );
        }
    }

    class GlobalGroupGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 8, 227 );
            SetSize( 170, 220 );
            SetCellPrototype( "ProtoGroupGrid" );
            SetColumns( 1 );
        }

        void OnDraw() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
        }
    }

    class ProtoGroupGrid : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 170, 23 );
        }
    }

    class CritterName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 120, 22 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return "";
            return chosen.Name;
        }
    }

    class CritterCond : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 123, 0 );
            SetSize( 40, 15 );
            SetText( "online" );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }
    }

    GlobalMap@ CreateGlobalMapHierarchy( GUIObject@ parent )
    {
        GlobalMap obj();
        CreateHardCodeMapHierarchy( obj );
        CreateMainPanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    HardCodeMap@ CreateHardCodeMapHierarchy( GUIObject@ parent )
    {
        HardCodeMap obj();
        obj.Init( parent );
        return obj;
    }

    MainPanel@ CreateMainPanelHierarchy( GUIObject@ parent )
    {
        MainPanel obj();
        CreateInventButtonHierarchy( obj );
        CreateMenuButtonHierarchy( obj );
        CreateCharacterButtonHierarchy( obj );
        CreatePipBoyButtonHierarchy( obj );
        CreateFixBoyButtonHierarchy( obj );
        CreateViewCarHierarchy( obj );
        CreateTimePanelHierarchy( obj );
        CreateKnownLocationsMainHierarchy( obj );
        CreateGMTownButtonHierarchy( obj );
        CreateConsoleHierarchy( obj );
        CreateMessageBoxHierarchy( obj );
        CreateGlobalGroupGridHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    InventButton@ CreateInventButtonHierarchy( GUIObject@ parent )
    {
        InventButton obj();
        obj.Init( parent );
        return obj;
    }

    MenuButton@ CreateMenuButtonHierarchy( GUIObject@ parent )
    {
        MenuButton obj();
        obj.Init( parent );
        return obj;
    }

    CharacterButton@ CreateCharacterButtonHierarchy( GUIObject@ parent )
    {
        CharacterButton obj();
        obj.Init( parent );
        return obj;
    }

    PipBoyButton@ CreatePipBoyButtonHierarchy( GUIObject@ parent )
    {
        PipBoyButton obj();
        obj.Init( parent );
        return obj;
    }

    FixBoyButton@ CreateFixBoyButtonHierarchy( GUIObject@ parent )
    {
        FixBoyButton obj();
        obj.Init( parent );
        return obj;
    }

    ViewCar@ CreateViewCarHierarchy( GUIObject@ parent )
    {
        ViewCar obj();
        CreateCarImageHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CarImage@ CreateCarImageHierarchy( GUIObject@ parent )
    {
        CarImage obj();
        obj.Init( parent );
        return obj;
    }

    TimePanel@ CreateTimePanelHierarchy( GUIObject@ parent )
    {
        TimePanel obj();
        CreateDayTextHierarchy( obj );
        CreateMounthTextHierarchy( obj );
        CreateYearTextHierarchy( obj );
        CreateTimeTextHierarchy( obj );
        CreateDialPanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DayText@ CreateDayTextHierarchy( GUIObject@ parent )
    {
        DayText obj();
        obj.Init( parent );
        return obj;
    }

    MounthText@ CreateMounthTextHierarchy( GUIObject@ parent )
    {
        MounthText obj();
        obj.Init( parent );
        return obj;
    }

    YearText@ CreateYearTextHierarchy( GUIObject@ parent )
    {
        YearText obj();
        obj.Init( parent );
        return obj;
    }

    TimeText@ CreateTimeTextHierarchy( GUIObject@ parent )
    {
        TimeText obj();
        obj.Init( parent );
        return obj;
    }

    DialPanel@ CreateDialPanelHierarchy( GUIObject@ parent )
    {
        DialPanel obj();
        obj.Init( parent );
        return obj;
    }

    KnownLocationsMain@ CreateKnownLocationsMainHierarchy( GUIObject@ parent )
    {
        KnownLocationsMain obj();
        CreateKnownProtoLocsHierarchy( obj );
        CreateScrollUpHierarchy( obj );
        CreateScrollDonwHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    KnownProtoLocs@ CreateKnownProtoLocsHierarchy( GUIObject@ parent )
    {
        KnownProtoLocs obj();
        CreateCityNamePanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CityNamePanel@ CreateCityNamePanelHierarchy( GUIObject@ parent )
    {
        CityNamePanel obj();
        CreateDisableTabHierarchy( obj );
        CreateTabHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DisableTab@ CreateDisableTabHierarchy( GUIObject@ parent )
    {
        DisableTab obj();
        obj.Init( parent );
        return obj;
    }

    Tab@ CreateTabHierarchy( GUIObject@ parent )
    {
        Tab obj();
        CreateImageNameTownHierarchy( obj );
        CreatePickCityButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ImageNameTown@ CreateImageNameTownHierarchy( GUIObject@ parent )
    {
        ImageNameTown obj();
        obj.Init( parent );
        return obj;
    }

    PickCityButton@ CreatePickCityButtonHierarchy( GUIObject@ parent )
    {
        PickCityButton obj();
        obj.Init( parent );
        return obj;
    }

    ScrollUp@ CreateScrollUpHierarchy( GUIObject@ parent )
    {
        ScrollUp obj();
        obj.Init( parent );
        return obj;
    }

    ScrollDonw@ CreateScrollDonwHierarchy( GUIObject@ parent )
    {
        ScrollDonw obj();
        obj.Init( parent );
        return obj;
    }

    GMTownButton@ CreateGMTownButtonHierarchy( GUIObject@ parent )
    {
        GMTownButton obj();
        obj.Init( parent );
        return obj;
    }

    Console@ CreateConsoleHierarchy( GUIObject@ parent )
    {
        Console obj();
        obj.Init( parent );
        return obj;
    }

    MessageBox@ CreateMessageBoxHierarchy( GUIObject@ parent )
    {
        MessageBox obj();
        obj.Init( parent );
        return obj;
    }

    GlobalGroupGrid@ CreateGlobalGroupGridHierarchy( GUIObject@ parent )
    {
        GlobalGroupGrid obj();
        CreateProtoGroupGridHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ProtoGroupGrid@ CreateProtoGroupGridHierarchy( GUIObject@ parent )
    {
        ProtoGroupGrid obj();
        CreateCritterNameHierarchy( obj );
        CreateCritterCondHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CritterName@ CreateCritterNameHierarchy( GUIObject@ parent )
    {
        CritterName obj();
        obj.Init( parent );
        return obj;
    }

    CritterCond@ CreateCritterCondHierarchy( GUIObject@ parent )
    {
        CritterCond obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateGlobalMapHierarchy( null );
    }
}

namespace Wait
{
    class Wait : GUIScreen
    {
        string[] ImageName = { "art95.png", "assist.png", "bos.png", "car.png", "chosen.png", "explode.png", "heads.png",
                                "other0.png", "prisoner.png", "room.png", "temple.png", "twoheros.png", "vault.png", "vault_boy.png",
                            "vault_door.png", "wildmen.png" };

        void OnConstruct() override
        {
            SetModal( true );
            SetAvailableCursors( array< CursorType >  = {CursorType::Hand}  );
            SetCanMove( true, false );
            SetDock( DOCK_FILL );
        }

        void OnShow( dictionary@ params ) override
        {
            string imageName = "art/splash/" + ImageName[ Random( 0, ImageName.length() - 1 ) ];
            SetBackgroundImage( HASH( imageName ), IMAGE_LAYOUT_ZOOM );
            SetSize( __ScreenWidth, __ScreenHeight );
        }
    }

    Wait@ CreateWaitHierarchy( GUIObject@ parent )
    {
        Wait obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateWaitHierarchy( null );
    }
}

namespace Credits
{
    class Credits : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetAvailableCursors( array< CursorType > = {} );
            SetSize( 1, 1 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
            SetCropContent( true );
        }

        void OnShow( dictionary@ params ) override
        {
            SetSize( __ScreenWidth, __ScreenHeight );
            __HideCursor = true;
        }

        void OnHide() override
        {
            __HideCursor = false;
        }
    }

    class CreditsText : GUIText
    {
        uint Tick;
        uint DeltaTick = 20;

        void OnConstruct() override
        {
            SetText( MSG_GAME( STR_GAME_CREDITS ) );
            SetTextFont( FONT_BIG );
            SetTextFlags( FT_CENTERX );
        }

        void OnInit() override
        {
            string text = MSG_GAME( STR_GAME_CREDITS_SPEED );
            int result  = 0;
            if( StrToInt( text, result ) )
                DeltaTick = result;
            
            int tw = 0, th = 0, lines = 0;
            GetTextInfo( Text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Width, th );
        }

        void OnShow( dictionary@ params ) override
        {
            SetSize( __ScreenWidth, Height );
            SetPosition( PosX, __ScreenHeight );
        }

        void OnDraw() override
        {
            if( Tick > GetTick() )
                return;
            Tick = GetTick() + DeltaTick;
            
            SetPosition( PosX, PosY - 1 );
        }
    }

    Credits@ CreateCreditsHierarchy( GUIObject@ parent )
    {
        Credits obj();
        CreateCreditsTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CreditsText@ CreateCreditsTextHierarchy( GUIObject@ parent )
    {
        CreditsText obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateCreditsHierarchy( null );
    }
}

namespace Options
{
    void SaveOptions()
    {
        string[] savedOptions =
        {
            "Language", "" + CustomCall( "GetLanguage" ),
            "ScreenWidth", "" + __ScreenWidth,
            "ScreenHeight", "" + __ScreenHeight,
            "FullScreen", "" + __FullScr,
            "AlwaysOnTop", "" + __AlwaysOnTop,
            "MusicVolume", "" + __MusicVolume,
            "SoundVolume", "" + __SoundVolume,
            "AlwaysRun", "" + __AlwaysRun,
            //"DefaultCombatMode", "" + __DefaultCombatMode,
            "RemoteHost", "" + __Host,
            "RemotePort", "" + __Port,
            "ProxyType", "" + __ProxyType,
            "ProxyHost", "" + __ProxyHost,
            "ProxyPort", "" + __ProxyPort,
            "ProxyUser", "" + __ProxyUser,
            "ProxyPass", "" + __ProxyPass
        };
        SetUserConfig( savedOptions );
    }

    class Screen : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 80, 60 );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/main_menu_options.png" );
        }
    }

    class Options : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 640, 440 );
        }
    }

    class Game : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 20 );
        }
    }

    class Language : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 10 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE ) );
        }
    }

    class Russian : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( CustomCall( "GetLanguage" ) == "russ" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetLanguage russ" );
            GUI_Callback_OnLanguageChanged();
            SaveOptions();
        }
    }

    class Text1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE_RUSSIAN ) );
        }
    }

    class English : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( CustomCall( "GetLanguage" ) == "engl" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetLanguage engl" );
            GUI_Callback_OnLanguageChanged();
            SaveOptions();
        }
    }

    class Text2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE_ENGLISH ) );
        }
    }

    int[] ScreenWidthOpt = { 800, 1024, 1280, 1280, 1366, 1920 };
    int[] ScreenHeightOpt = { 600, 768, 800, 1024, 768, 1080 };

    class Resolution : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 40 );
            SetText( MSG_GAME( STR_OPTIONS_RESOLUTION ) );
        }
    }

    class Resolution1 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 0 ] && __ScreenHeight == ScreenHeightOpt[ 0 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 0 ] + " " + ScreenHeightOpt[ 0 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text14 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 0 ] + "x" + ScreenHeightOpt[ 0 ] );
        }
    }

    class Resolution2 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 240, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 1 ] && __ScreenHeight == ScreenHeightOpt[ 1 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 1 ] + " " + ScreenHeightOpt[ 1 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text15 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 1 ] + "x" + ScreenHeightOpt[ 1 ] );
        }
    }

    class Resolution3 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 300, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 2 ] && __ScreenHeight == ScreenHeightOpt[ 2 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 2 ] + " " + ScreenHeightOpt[ 2 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text16 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 2 ] + "x" + ScreenHeightOpt[ 2 ] );
        }
    }

    class Resolution4 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 360, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 3 ] && __ScreenHeight == ScreenHeightOpt[ 3 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 3 ] + " " + ScreenHeightOpt[ 3 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text17 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 3 ] + "x" + ScreenHeightOpt[ 3 ] );
        }
    }

    class Resolution5 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 420, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 4 ] && __ScreenHeight == ScreenHeightOpt[ 4 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 4 ] + " " + ScreenHeightOpt[ 4 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text18 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 4 ] + "x" + ScreenHeightOpt[ 4 ] );
        }
    }

    class Resolution6 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 480, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 5 ] && __ScreenHeight == ScreenHeightOpt[ 5 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 5 ] + " " + ScreenHeightOpt[ 5 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text19 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 5 ] + "x" + ScreenHeightOpt[ 5 ] );
        }
    }

    class FullScreen : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 70 );
            SetText( MSG_GAME( STR_OPTIONS_FULL_SCREEN ) );
        }
    }

    class CheckBox1 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __FullScr );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SwitchFullscreen" );
            SaveOptions();
        }
    }

    class AlwaysOnTop : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 100 );
            SetText( MSG_GAME( STR_OPTIONS_ALWAYS_ON_TOP ) );
        }
    }

    class CheckBox2 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __AlwaysOnTop );
        }

        void OnLMouseClick() override
        {
            __AlwaysOnTop = IsChecked;
            SaveOptions();
        }
    }

    class Music : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 130 );
            SetText( MSG_GAME( STR_OPTIONS_MUSIC ) );
        }
    }

    class MusicDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __MusicVolume > 0 )
            {
                __MusicVolume--;
                 SaveOptions();
            }
        }
    }

    class MusicInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __MusicVolume < 100 )
            {
                __MusicVolume++;
                SaveOptions();
            }
        }
    }

    class MusicValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 235, 0 );
        }

        string@ get_Text() override
        {
            return "" + __MusicVolume;
        }
    }

    class Sound : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 160 );
            SetText( MSG_GAME( STR_OPTIONS_SOUND ) );
        }
    }

    class SoundDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __SoundVolume > 0 )
            {
                __SoundVolume--;
                SaveOptions();
            }
        }
    }

    class SoundInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __SoundVolume < 100 )
            {
                __SoundVolume++;
                SaveOptions();
            }
        }
    }

    class SoundValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 235, 0 );
        }

        string@ get_Text() override
        {
            return "" + __SoundVolume;
        }
    }

    class AlwaysRun : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 190 );
            SetText( MSG_GAME( STR_OPTIONS_ALWAYS_RUN ) );
        }
    }

    class CheckBox3 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __AlwaysRun );
        }

        void OnLMouseClick() override
        {
            __AlwaysRun = IsChecked;
            SaveOptions();
        }
    }

    class CombatMode : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 220 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE ) );
        }
    }

    class Both : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( false/*__DefaultCombatMode == COMBAT_MODE_ANY*/ );
        }

        void OnLMouseClick() override
        {
            //__DefaultCombatMode = COMBAT_MODE_ANY;
            SaveOptions();
        }
    }

    class Text5 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_BOTH ) );
        }
    }

    class RealTime : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( false/*;//__DefaultCombatMode == COMBAT_MODE_REAL_TIME*/ );
        }

        void OnLMouseClick() override
        {
            //__DefaultCombatMode = COMBAT_MODE_REAL_TIME;
            SaveOptions();
        }
    }

    class Text6 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_RT ) );
        }
    }

    class TurnBased : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 380, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( false/*;//__DefaultCombatMode == COMBAT_MODE_TURN_BASED*/ );
        }

        void OnLMouseClick() override
        {
            //__DefaultCombatMode = COMBAT_MODE_TURN_BASED;
            SaveOptions();
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_TB ) );
        }
    }

    class CombatMessages : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 250 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES ) );
        }
    }

    class Verbose : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __CombatMessagesType == 0 );
        }

        void OnLMouseClick() override
        {
            __CombatMessagesType = 0;
            SaveOptions();
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES_FULL ) );
        }
    }

    class Brief : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __CombatMessagesType != 0 );
        }

        void OnLMouseClick() override
        {
            __CombatMessagesType = 1;
            SaveOptions();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES_SHORT ) );
        }
    }

    class GameServer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 280 );
            SetText( MSG_GAME( STR_OPTIONS_GAME_SERVER ) );
        }
    }

    class Panel1 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 250, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel2 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 450, -2 );
            SetSize( 50, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Host : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 250, 12 );
            SetText( __Host );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Host = Text;
            SaveOptions();
        }
    }

    class Port : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 450, 0 );
            SetSize( 50, 12 );
            SetText( "" + __Port );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Port = Text.toInt( __Port );
            Text = "" + __Port;
            SaveOptions();
        }
    }

    class ProxyType : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 310 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE ) );
        }
    }

    class ProxyNone : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 0 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 0;
            SaveOptions();
        }
    }

    class Text10 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_NONE ) );
        }
    }

    class ProxySocks4 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 1 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 1;
            SaveOptions();
        }
    }

    class Text11 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_SOCKS4 ) );
        }
    }

    class ProxySocks5 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 380, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 2 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 2;
            SaveOptions();
        }
    }

    class Text12 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_SOCKS5 ) );
        }
    }

    class ProxyHttp : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 480, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 3 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 3;
            SaveOptions();
        }
    }

    class Text13 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_HTTP ) );
        }
    }

    class ProxyServer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 340 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_SERVER ) );
        }
    }

    class Panel3 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 250, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel4 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 450, -2 );
            SetSize( 50, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ProxyHost : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 250, 12 );
            SetText( __ProxyHost );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Host = Text;
            SaveOptions();
        }
    }

    class ProxyPort : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 450, 0 );
            SetSize( 50, 12 );
            SetText( "" + __ProxyPort );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyPort = Text.toInt( __ProxyPort );
            Text = "" + __ProxyPort;
            SaveOptions();
        }
    }

    class ProxyAccess : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 370 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_ACCESS ) );
        }
    }

    class Panel5 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 150, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel6 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 350, -2 );
            SetSize( 150, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ProxyLogin : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 150, 12 );
            SetText( __ProxyUser );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyUser = Text;
            SaveOptions();
        }
    }

    class ProxyPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 350, 0 );
            SetSize( 150, 12 );
            SetText( __ProxyPass );
            SetTextFlags( FT_CENTERX );
            SetInputPassword( "#" );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyPass = Text;
            SaveOptions();
        }
    }

    class Back : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 460, 450 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_LOGIN );
        }
    }

    class Text3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_BACK ) );
            SetTextFont( FONT_FAT );
        }
    }

    Screen@ CreateScreenHierarchy( GUIObject@ parent )
    {
        Screen obj();
        CreateMainHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Main@ CreateMainHierarchy( GUIObject@ parent )
    {
        Main obj();
        CreateOptionsHierarchy( obj );
        CreateBackHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Options@ CreateOptionsHierarchy( GUIObject@ parent )
    {
        Options obj();
        CreateGameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Game@ CreateGameHierarchy( GUIObject@ parent )
    {
        Game obj();
        CreateLanguageHierarchy( obj );
        CreateResolutionHierarchy( obj );
        CreateFullScreenHierarchy( obj );
        CreateAlwaysOnTopHierarchy( obj );
        CreateMusicHierarchy( obj );
        CreateSoundHierarchy( obj );
        CreateAlwaysRunHierarchy( obj );
        CreateCombatModeHierarchy( obj );
        CreateCombatMessagesHierarchy( obj );
        CreateGameServerHierarchy( obj );
        CreateProxyTypeHierarchy( obj );
        CreateProxyServerHierarchy( obj );
        CreateProxyAccessHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Language@ CreateLanguageHierarchy( GUIObject@ parent )
    {
        Language obj();
        CreateRussianHierarchy( obj );
        CreateEnglishHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Russian@ CreateRussianHierarchy( GUIObject@ parent )
    {
        Russian obj();
        CreateText1Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text1@ CreateText1Hierarchy( GUIObject@ parent )
    {
        Text1 obj();
        obj.Init( parent );
        return obj;
    }

    English@ CreateEnglishHierarchy( GUIObject@ parent )
    {
        English obj();
        CreateText2Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text2@ CreateText2Hierarchy( GUIObject@ parent )
    {
        Text2 obj();
        obj.Init( parent );
        return obj;
    }

    Resolution@ CreateResolutionHierarchy( GUIObject@ parent )
    {
        Resolution obj();
        CreateResolution1Hierarchy( obj );
        CreateResolution2Hierarchy( obj );
        CreateResolution3Hierarchy( obj );
        CreateResolution4Hierarchy( obj );
        CreateResolution5Hierarchy( obj );
        CreateResolution6Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Resolution1@ CreateResolution1Hierarchy( GUIObject@ parent )
    {
        Resolution1 obj();
        CreateText14Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text14@ CreateText14Hierarchy( GUIObject@ parent )
    {
        Text14 obj();
        obj.Init( parent );
        return obj;
    }

    Resolution2@ CreateResolution2Hierarchy( GUIObject@ parent )
    {
        Resolution2 obj();
        CreateText15Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text15@ CreateText15Hierarchy( GUIObject@ parent )
    {
        Text15 obj();
        obj.Init( parent );
        return obj;
    }

    Resolution3@ CreateResolution3Hierarchy( GUIObject@ parent )
    {
        Resolution3 obj();
        CreateText16Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text16@ CreateText16Hierarchy( GUIObject@ parent )
    {
        Text16 obj();
        obj.Init( parent );
        return obj;
    }

    Resolution4@ CreateResolution4Hierarchy( GUIObject@ parent )
    {
        Resolution4 obj();
        CreateText17Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text17@ CreateText17Hierarchy( GUIObject@ parent )
    {
        Text17 obj();
        obj.Init( parent );
        return obj;
    }

    Resolution5@ CreateResolution5Hierarchy( GUIObject@ parent )
    {
        Resolution5 obj();
        CreateText18Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text18@ CreateText18Hierarchy( GUIObject@ parent )
    {
        Text18 obj();
        obj.Init( parent );
        return obj;
    }

    Resolution6@ CreateResolution6Hierarchy( GUIObject@ parent )
    {
        Resolution6 obj();
        CreateText19Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text19@ CreateText19Hierarchy( GUIObject@ parent )
    {
        Text19 obj();
        obj.Init( parent );
        return obj;
    }

    FullScreen@ CreateFullScreenHierarchy( GUIObject@ parent )
    {
        FullScreen obj();
        CreateCheckBox1Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CheckBox1@ CreateCheckBox1Hierarchy( GUIObject@ parent )
    {
        CheckBox1 obj();
        obj.Init( parent );
        return obj;
    }

    AlwaysOnTop@ CreateAlwaysOnTopHierarchy( GUIObject@ parent )
    {
        AlwaysOnTop obj();
        CreateCheckBox2Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CheckBox2@ CreateCheckBox2Hierarchy( GUIObject@ parent )
    {
        CheckBox2 obj();
        obj.Init( parent );
        return obj;
    }

    Music@ CreateMusicHierarchy( GUIObject@ parent )
    {
        Music obj();
        CreateMusicDecHierarchy( obj );
        CreateMusicIncHierarchy( obj );
        CreateMusicValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MusicDec@ CreateMusicDecHierarchy( GUIObject@ parent )
    {
        MusicDec obj();
        obj.Init( parent );
        return obj;
    }

    MusicInc@ CreateMusicIncHierarchy( GUIObject@ parent )
    {
        MusicInc obj();
        obj.Init( parent );
        return obj;
    }

    MusicValue@ CreateMusicValueHierarchy( GUIObject@ parent )
    {
        MusicValue obj();
        obj.Init( parent );
        return obj;
    }

    Sound@ CreateSoundHierarchy( GUIObject@ parent )
    {
        Sound obj();
        CreateSoundDecHierarchy( obj );
        CreateSoundIncHierarchy( obj );
        CreateSoundValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    SoundDec@ CreateSoundDecHierarchy( GUIObject@ parent )
    {
        SoundDec obj();
        obj.Init( parent );
        return obj;
    }

    SoundInc@ CreateSoundIncHierarchy( GUIObject@ parent )
    {
        SoundInc obj();
        obj.Init( parent );
        return obj;
    }

    SoundValue@ CreateSoundValueHierarchy( GUIObject@ parent )
    {
        SoundValue obj();
        obj.Init( parent );
        return obj;
    }

    AlwaysRun@ CreateAlwaysRunHierarchy( GUIObject@ parent )
    {
        AlwaysRun obj();
        CreateCheckBox3Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CheckBox3@ CreateCheckBox3Hierarchy( GUIObject@ parent )
    {
        CheckBox3 obj();
        obj.Init( parent );
        return obj;
    }

    CombatMode@ CreateCombatModeHierarchy( GUIObject@ parent )
    {
        CombatMode obj();
        CreateBothHierarchy( obj );
        CreateRealTimeHierarchy( obj );
        CreateTurnBasedHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Both@ CreateBothHierarchy( GUIObject@ parent )
    {
        Both obj();
        CreateText5Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text5@ CreateText5Hierarchy( GUIObject@ parent )
    {
        Text5 obj();
        obj.Init( parent );
        return obj;
    }

    RealTime@ CreateRealTimeHierarchy( GUIObject@ parent )
    {
        RealTime obj();
        CreateText6Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text6@ CreateText6Hierarchy( GUIObject@ parent )
    {
        Text6 obj();
        obj.Init( parent );
        return obj;
    }

    TurnBased@ CreateTurnBasedHierarchy( GUIObject@ parent )
    {
        TurnBased obj();
        CreateText7Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text7@ CreateText7Hierarchy( GUIObject@ parent )
    {
        Text7 obj();
        obj.Init( parent );
        return obj;
    }

    CombatMessages@ CreateCombatMessagesHierarchy( GUIObject@ parent )
    {
        CombatMessages obj();
        CreateVerboseHierarchy( obj );
        CreateBriefHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Verbose@ CreateVerboseHierarchy( GUIObject@ parent )
    {
        Verbose obj();
        CreateText8Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text8@ CreateText8Hierarchy( GUIObject@ parent )
    {
        Text8 obj();
        obj.Init( parent );
        return obj;
    }

    Brief@ CreateBriefHierarchy( GUIObject@ parent )
    {
        Brief obj();
        CreateText9Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text9@ CreateText9Hierarchy( GUIObject@ parent )
    {
        Text9 obj();
        obj.Init( parent );
        return obj;
    }

    GameServer@ CreateGameServerHierarchy( GUIObject@ parent )
    {
        GameServer obj();
        CreatePanel1Hierarchy( obj );
        CreatePanel2Hierarchy( obj );
        CreateHostHierarchy( obj );
        CreatePortHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Panel1@ CreatePanel1Hierarchy( GUIObject@ parent )
    {
        Panel1 obj();
        obj.Init( parent );
        return obj;
    }

    Panel2@ CreatePanel2Hierarchy( GUIObject@ parent )
    {
        Panel2 obj();
        obj.Init( parent );
        return obj;
    }

    Host@ CreateHostHierarchy( GUIObject@ parent )
    {
        Host obj();
        obj.Init( parent );
        return obj;
    }

    Port@ CreatePortHierarchy( GUIObject@ parent )
    {
        Port obj();
        obj.Init( parent );
        return obj;
    }

    ProxyType@ CreateProxyTypeHierarchy( GUIObject@ parent )
    {
        ProxyType obj();
        CreateProxyNoneHierarchy( obj );
        CreateProxySocks4Hierarchy( obj );
        CreateProxySocks5Hierarchy( obj );
        CreateProxyHttpHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ProxyNone@ CreateProxyNoneHierarchy( GUIObject@ parent )
    {
        ProxyNone obj();
        CreateText10Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text10@ CreateText10Hierarchy( GUIObject@ parent )
    {
        Text10 obj();
        obj.Init( parent );
        return obj;
    }

    ProxySocks4@ CreateProxySocks4Hierarchy( GUIObject@ parent )
    {
        ProxySocks4 obj();
        CreateText11Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text11@ CreateText11Hierarchy( GUIObject@ parent )
    {
        Text11 obj();
        obj.Init( parent );
        return obj;
    }

    ProxySocks5@ CreateProxySocks5Hierarchy( GUIObject@ parent )
    {
        ProxySocks5 obj();
        CreateText12Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text12@ CreateText12Hierarchy( GUIObject@ parent )
    {
        Text12 obj();
        obj.Init( parent );
        return obj;
    }

    ProxyHttp@ CreateProxyHttpHierarchy( GUIObject@ parent )
    {
        ProxyHttp obj();
        CreateText13Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text13@ CreateText13Hierarchy( GUIObject@ parent )
    {
        Text13 obj();
        obj.Init( parent );
        return obj;
    }

    ProxyServer@ CreateProxyServerHierarchy( GUIObject@ parent )
    {
        ProxyServer obj();
        CreatePanel3Hierarchy( obj );
        CreatePanel4Hierarchy( obj );
        CreateProxyHostHierarchy( obj );
        CreateProxyPortHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Panel3@ CreatePanel3Hierarchy( GUIObject@ parent )
    {
        Panel3 obj();
        obj.Init( parent );
        return obj;
    }

    Panel4@ CreatePanel4Hierarchy( GUIObject@ parent )
    {
        Panel4 obj();
        obj.Init( parent );
        return obj;
    }

    ProxyHost@ CreateProxyHostHierarchy( GUIObject@ parent )
    {
        ProxyHost obj();
        obj.Init( parent );
        return obj;
    }

    ProxyPort@ CreateProxyPortHierarchy( GUIObject@ parent )
    {
        ProxyPort obj();
        obj.Init( parent );
        return obj;
    }

    ProxyAccess@ CreateProxyAccessHierarchy( GUIObject@ parent )
    {
        ProxyAccess obj();
        CreatePanel5Hierarchy( obj );
        CreatePanel6Hierarchy( obj );
        CreateProxyLoginHierarchy( obj );
        CreateProxyPasswordHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Panel5@ CreatePanel5Hierarchy( GUIObject@ parent )
    {
        Panel5 obj();
        obj.Init( parent );
        return obj;
    }

    Panel6@ CreatePanel6Hierarchy( GUIObject@ parent )
    {
        Panel6 obj();
        obj.Init( parent );
        return obj;
    }

    ProxyLogin@ CreateProxyLoginHierarchy( GUIObject@ parent )
    {
        ProxyLogin obj();
        obj.Init( parent );
        return obj;
    }

    ProxyPassword@ CreateProxyPasswordHierarchy( GUIObject@ parent )
    {
        ProxyPassword obj();
        obj.Init( parent );
        return obj;
    }

    Back@ CreateBackHierarchy( GUIObject@ parent )
    {
        Back obj();
        CreateText3Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text3@ CreateText3Hierarchy( GUIObject@ parent )
    {
        Text3 obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateScreenHierarchy( null );
    }
}

namespace Inventory
{
    class Inventory : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetAvailableCursors( array< CursorType > = { CursorType::Hand, CursorType::Default } );
            SetCanMove( true, false );
            SetSize( 499, 377 );
            SetBackgroundImage( "art/intrface/inventory.png" );
        }
    }

    class InvItems : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 42, 39 );
        }

        void OnInit() override
        {
            auto@ itemsContainer = ItemsContainer::CreateHierarchy( this );
            itemsContainer.ItemsCollection = ITEMS_INVENTORY;
        }
    }

    class SlotHand1 : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 155, 287 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_HAND1 );
        }

        int OnCheckItem( Item@ item ) override
        {
            return item.CritSlot == SLOT_HAND1 ? 0 : -1;
        }
    }

    class SlotHand2 : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 246, 287 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_HAND2 );
        }

        int OnCheckItem( Item@ item ) override
        {
            return item.CritSlot == SLOT_HAND2 ? 0 : -1;
        }
    }

    class SlotArmor : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 155, 184 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_ARMOR );
        }

        int OnCheckItem( Item@ item ) override
        {
            return item.CritSlot == SLOT_ARMOR ? 0 : -1;
        }
    }

    class SlotItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 155, 287 );
            SetSize( 90, 60 );
            SetDraggable( true );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? ( item.PicInv != 0 ? item.PicInv : item.PicInv ) : 0 );
        }
    }

    class Chosen : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 176, 35 );
            SetSize( 61, 98 );
        }

        void OnInit() override
        {
            Preview::CreateHierarchy( this );
        }
    }

    import string@ generic_description( int descType, int& offsX, int& offsY ) from "ClientMain";

    class Description : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 299, 48 );
            SetSize( 145, 182 );
        }

        void OnDraw() override
        {
            string@ text = "";
            int ox = 0, oy = 0;
            
            @text = generic_description( DESC_INVENTORY_MAIN, ox, oy );
            DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
            @text = generic_description( DESC_INVENTORY_SPECIAL, ox, oy );
            DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
            @text = generic_description( DESC_INVENTORY_STATS, ox, oy );
            DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
            @text = generic_description( DESC_INVENTORY_RESIST, ox, oy );
            DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
        }
    }

    class Close : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 433, 324 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/inv_close_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    Inventory@ CreateInventoryHierarchy( GUIObject@ parent )
    {
        Inventory obj();
        CreateInvItemsHierarchy( obj );
        CreateSlotHand1Hierarchy( obj );
        CreateSlotHand2Hierarchy( obj );
        CreateSlotArmorHierarchy( obj );
        CreateSlotItemHierarchy( obj );
        CreateChosenHierarchy( obj );
        CreateDescriptionHierarchy( obj );
        CreateCloseHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    InvItems@ CreateInvItemsHierarchy( GUIObject@ parent )
    {
        InvItems obj();
        obj.Init( parent );
        return obj;
    }

    SlotHand1@ CreateSlotHand1Hierarchy( GUIObject@ parent )
    {
        SlotHand1 obj();
        obj.Init( parent );
        return obj;
    }

    SlotHand2@ CreateSlotHand2Hierarchy( GUIObject@ parent )
    {
        SlotHand2 obj();
        obj.Init( parent );
        return obj;
    }

    SlotArmor@ CreateSlotArmorHierarchy( GUIObject@ parent )
    {
        SlotArmor obj();
        obj.Init( parent );
        return obj;
    }

    SlotItem@ CreateSlotItemHierarchy( GUIObject@ parent )
    {
        SlotItem obj();
        obj.Init( parent );
        return obj;
    }

    Chosen@ CreateChosenHierarchy( GUIObject@ parent )
    {
        Chosen obj();
        obj.Init( parent );
        return obj;
    }

    Description@ CreateDescriptionHierarchy( GUIObject@ parent )
    {
        Description obj();
        obj.Init( parent );
        return obj;
    }

    Close@ CreateCloseHierarchy( GUIObject@ parent )
    {
        Close obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateInventoryHierarchy( null );
    }
}

namespace PickUp
{
    class PickUp : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetAvailableCursors( array< CursorType > = { CursorType::Hand, CursorType::Default } );
            SetCanMove( true, false );
            SetSize( 417, 376 );
            SetBackgroundImage( "art/intrface/pickup.png" );
        }
    }

    class ChosenInv : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 54, 33 );
        }

        void OnInit() override
        {
            auto@ itemsContainer = ItemsContainer::CreateHierarchy( this );
            itemsContainer.ItemsCollection = ITEMS_PICKUP;
        }
    }

    class OtherInv : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 175, 36 );
        }

        void OnInit() override
        {
            GUIObject@ cont = ItemsContainer::CreateHierarchy( this );
            cast< ItemsContainer::ItemsContainer >( cont ).ItemsCollection = ITEMS_PICKUP_FROM;
        }
    }

    class LootView : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 303, 35 );
            SetSize( 70, 100 );
        }

        void OnInit() override
        {
            Preview::CreateHierarchy( this );
        }

        void OnShow( dictionary@ params ) override
        {
            Preview::Preview@ preview = cast< Preview::Preview >( GetChild( 0 ) );
            preview.PreviewCritterId = uint( params[ "TargetCritterId" ] );
            preview.PreviewItemId    = uint( params[ "TargetItemId" ] );
        }
    }

    class TakeAllButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 313, 201 );
            SetSize( 39, 41 );
            SetPressedImage( "art/intrface/invmadn.png" );
        }

        void OnLMouseClick() override
        {
            uint[] actions;
            GetChosenActions( actions );
            uint[] useItemAction = { CHOSEN_TAKE_ALL, 0, 0, 0, 0, 0, 0 };
            for( uint i = 0; i < useItemAction.length(); i++ )
                actions.insertLast( useItemAction[ i ] );
            SetChosenActions( actions );
        }
    }

    class CloseButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 352, 325 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/inv_close_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    PickUp@ CreatePickUpHierarchy( GUIObject@ parent )
    {
        PickUp obj();
        CreateChosenInvHierarchy( obj );
        CreateOtherInvHierarchy( obj );
        CreateLootViewHierarchy( obj );
        CreateTakeAllButtonHierarchy( obj );
        CreateCloseButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChosenInv@ CreateChosenInvHierarchy( GUIObject@ parent )
    {
        ChosenInv obj();
        obj.Init( parent );
        return obj;
    }

    OtherInv@ CreateOtherInvHierarchy( GUIObject@ parent )
    {
        OtherInv obj();
        obj.Init( parent );
        return obj;
    }

    LootView@ CreateLootViewHierarchy( GUIObject@ parent )
    {
        LootView obj();
        obj.Init( parent );
        return obj;
    }

    TakeAllButton@ CreateTakeAllButtonHierarchy( GUIObject@ parent )
    {
        TakeAllButton obj();
        obj.Init( parent );
        return obj;
    }

    CloseButton@ CreateCloseButtonHierarchy( GUIObject@ parent )
    {
        CloseButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreatePickUpHierarchy( null );
    }
}

namespace Character
{
    CritterProperty[] ShowBaseStats = { CritterProperty::Strength, CritterProperty::Perception, CritterProperty::Endurance, CritterProperty::Charisma, CritterProperty::Intellect, CritterProperty::Agility, CritterProperty::Luck };
    CritterProperty[] ShowHealthStats = { CritterProperty::MaxLife, CritterProperty::IsPoisoned, CritterProperty::IsRadiated, CritterProperty::IsDamagedEye, CritterProperty::IsDamagedRightArm, CritterProperty::IsDamagedLeftArm, CritterProperty::IsDamagedRightLeg, CritterProperty::IsDamagedLeftLeg };
    CritterProperty[] ShowExtendedStats = { CritterProperty::ArmorClass, CritterProperty::ActionPoints, CritterProperty::CarryWeight, CritterProperty::MeleeDamage, CritterProperty::NormalResistance, CritterProperty::PoisonResistance, CritterProperty::RadiationResistance, CritterProperty::Sequence, CritterProperty::HealingRate, CritterProperty::CriticalChance };
    CritterProperty[] ShowSkills = { CritterProperty::SkillSmallGuns, CritterProperty::SkillBigGuns, CritterProperty::SkillEnergyWeapons, CritterProperty::SkillUnarmed, CritterProperty::SkillMeleeWeapons, CritterProperty::SkillThrowing, CritterProperty::SkillFirstAid, CritterProperty::SkillDoctor, CritterProperty::SkillSneak, CritterProperty::SkillLockpick,
        CritterProperty::SkillSteal, CritterProperty::SkillTraps, CritterProperty::SkillScience, CritterProperty::SkillRepair, CritterProperty::SkillSpeech, CritterProperty::SkillBarter, CritterProperty::SkillGambling, CritterProperty::SkillOutdoorsman };
    
    CritterProperty              CurTip = CritterProperty::Invalid;
    int                          UnspentSP = 0;
    dict< CritterProperty, int > SkillUp;
    
    int GetPropValue( CritterProperty prop )
    {
        Critter@ chosen = GetChosen();
        return chosen !is null ? chosen.GetAsInt( prop ) : 0;
    }
    
    bool IsTagSkill( CritterProperty prop )
    {
        return CritterProperty( GetPropValue( CritterProperty::TagSkill1 ) ) == prop ||
            CritterProperty( GetPropValue( CritterProperty::TagSkill2 ) ) == prop ||
            CritterProperty( GetPropValue( CritterProperty::TagSkill3 ) ) == prop;
    }
    
    string@ FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Character : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/character.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            UnspentSP = GetPropValue( CritterProperty::UnspentSkillPoints );
            SkillUp.clear();
            if( GetPropValue( CritterProperty::UnspentPerks ) > 0 )
                ShowScreen( CLIENT_SCREEN_PERK );
        }
    }

    class BaseStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 15, 35 );
            SetCellPrototype( "BaseStat" );
            SetGridSize( ShowBaseStats.length() );
        }
    }

    class BaseStat : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 155, 33 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowBaseStats[ cellIndex ];
        }
    }

    class StatName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 4, 4 );
            SetSize( 40, 20 );
            SetText( "TXT" );
            SetTextFont( FONT_BIG );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Prop ) );
        }
    }

    class StatValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 44, 2 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetPropValue( cast< BaseStat >( Parent ).Prop ) );
        }
    }

    class StatValueDesc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 87, 4 );
            SetSize( 55, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL( GetPropValue( cast< BaseStat >( Parent ).Prop ) ) );
        }
    }

    class HealthStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 42 );
            SetCellPrototype( "HealthStat" );
            SetGridSize( ShowHealthStats.length() );
        }
    }

    class HealthStat : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 122, 14 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowHealthStats[ cellIndex ];
        }
    }

    class StatDesc : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 122, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            CritterProperty prop = cast< HealthStat >( Parent ).Prop;
            uint color;
            if( prop == CritterProperty::IsRadiated )
                color = ( GetPropValue( CritterProperty::RadiationLevel ) != 0 ? 0 : COLOR_DARK );
            else if( prop == CritterProperty::IsPoisoned )
                color = ( GetPropValue( CritterProperty::PoisoningLevel ) != 0 ? 0 : COLOR_DARK );
            else
                color = ( GetPropValue( prop ) != 0 ? 0: COLOR_DARK );
            SetTextColor( color );
        }

        string@ get_Text() override
        {
            CritterProperty prop = cast< HealthStat >( Parent ).Prop;
            if( prop == CritterProperty::MaxLife )
                return MSG_GAME( STR_INV_HP ) + "  " + GetPropValue( CritterProperty::CurrentHp ) + " / " + GetPropValue( CritterProperty::MaxLife );
            return MSG_GAME( STR_PARAM_NAME( prop ) );
        }
    }

    class ExtendedStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 179 );
            SetCellPrototype( "ExtendedStat" );
            SetGridSize( ShowExtendedStats.length() );
        }
    }

    class ExtendedStat : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 122, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowExtendedStats[ cellIndex ];
        }
    }

    class StatName2 : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 100, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            CritterProperty prop = cast< ExtendedStat >( Parent ).Prop;
            Text                 = MSG_GAME( STR_PARAM_NAME_SHORT( prop ) );
        }
    }

    class StatValue2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 98, 0 );
            SetSize( 25, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            CritterProperty prop = cast< ExtendedStat >( Parent ).Prop;
            string text;
            if( prop == CritterProperty::CarryWeight )
                text = "" + ( GetPropValue( prop ) / 1000 );
            else if( prop == CritterProperty::NormalResistance || prop == CritterProperty::PoisonResistance || prop == CritterProperty::RadiationResistance )
                text = "" + GetPropValue( prop ) + "%";
            else
                text = "" + GetPropValue( prop );
            return text;
        }
    }

    class Skills : GUIGrid
    {
        CritterProperty CurSkill = ShowSkills[ 0 ];

        void OnConstruct() override
        {
            SetPosition( 348, 26 );
            SetCellPrototype( "Skill" );
            SetGridSize( ShowSkills.length() );
        }
    }

    class Skill : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 280, 11 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = ShowSkills[ cellIndex ];
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, -1 );
            SetSize( 200, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Prop ) );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Prop ) ? 0xFFAAAAAA : COLOR_TEXT );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT )
                cast< Skills >( Parent.Parent ).CurSkill = cast< Skill >( Parent ).Prop;
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 225, -1 );
            SetSize( 40, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Prop ) ? 0xFFAAAAAA : COLOR_TEXT );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT )
                cast< Skills >( Parent.Parent ).CurSkill = cast< Skill >( Parent ).Prop;
        }

        string@ get_Text() override
        {
            CritterProperty prop = cast< Skill >( Parent ).Prop;
            return ( GetPropValue( prop ) + SkillUp.get( prop, 0 ) ) + "%";
        }
    }

    class Title3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 19, -25 );
            SetSize( 150, 24 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Slider : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 245, -10 );
            SetSize( 43, 29 );
            SetBackgroundImage( "art/intrface/slider.png" );
        }

        void OnDraw() override
        {
            SetPosition( 245, -10 + ShowSkills.find( cast< Skills >( Parent ).CurSkill ) * 11 );
        }
    }

    class IncPoint : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 22, 3 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/slider_inc.png" );
        }

        void OnLMousePressed() override
        {
            if( UnspentSP <= 0 )
                return;
            
            CritterProperty curSkill = cast< Skills >( Parent.Parent ).CurSkill;
            SkillUp.setIfNotExist( curSkill, 0 );
            int skillVal = GetPropValue( curSkill ) + SkillUp[ curSkill ];
            if( skillVal >= MAX_SKILL_VAL )
                return;
            
            int needSP = 1;
            if( skillVal > __SkillModAdd6 )
                needSP = 6;
            else if( skillVal > __SkillModAdd5 )
                needSP = 5;
            else if( skillVal > __SkillModAdd4 )
                needSP = 4;
            else if( skillVal > __SkillModAdd3 )
                needSP = 3;
            else if( skillVal > __SkillModAdd2 )
                needSP = 2;
            
            if( UnspentSP < needSP )
                return;
            
            UnspentSP -= needSP;
            SkillUp[ curSkill ] = SkillUp[ curSkill ] + 1;
            if( IsTagSkill( curSkill ) )
                SkillUp[ curSkill ] = SkillUp[ curSkill ] + 1;
        }
    }

    class DecPoint : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 22, 16 );
            SetSize( 17, 12 );
            SetPressedImage( "art/intrface/slider_dec.png" );
        }

        void OnLMousePressed() override
        {
            CritterProperty curSkill = cast< Skills >( Parent.Parent ).CurSkill;
            SkillUp.setIfNotExist( curSkill, 0 );
            if( SkillUp[ curSkill ] <= 0 )
                return;
            
            SkillUp[ curSkill ] = SkillUp[ curSkill ] - 1;
            if( IsTagSkill( curSkill ) )
                SkillUp[ curSkill ] = SkillUp[ curSkill ] - 1;
            
            int skillVal = GetPropValue( curSkill ) + SkillUp[ curSkill ];
            if( skillVal > __SkillModAdd6 )
                UnspentSP += 6;
            else if( skillVal > __SkillModAdd5 )
                UnspentSP += 5;
            else if( skillVal > __SkillModAdd4 )
                UnspentSP += 4;
            else if( skillVal > __SkillModAdd3 )
                UnspentSP += 3;
            else if( skillVal > __SkillModAdd2 )
                UnspentSP += 2;
            else
                UnspentSP += 1;
        }
    }

    class SkillPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 352, 227 );
        }
    }

    class Title2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 1, 1 );
            SetSize( 150, 26 );
            SetText( MSG_GAME( STR_CHA_UNSPENT_SP ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 171, 1 );
            SetSize( 30, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( UnspentSP );
        }
    }

    class Tip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 342, 264 );
        }

        void OnDraw() override
        {
            GUIObject@ obj = GUI_GetFocusedObject();
            if( obj is null )
                return;
            
            CritterProperty prop = CritterProperty::Invalid;
            
            #define CHECK_PARAM_PARENT #( className ) if( prop == CritterProperty::Invalid && cast< className >( obj.Parent ) !is null ) prop = cast< className >( obj.Parent ).Prop
            CHECK_PARAM_PARENT( BaseStat );
            CHECK_PARAM_PARENT( HealthStat );
            CHECK_PARAM_PARENT( ExtendedStat );
            CHECK_PARAM_PARENT( Skill );
            
            if( cast< TextLevel >( obj ) !is null )
                prop = CritterProperty::Level;
            if( cast< TextExp >( obj ) !is null )
                prop = CritterProperty::Experience;
            
            if( prop != CritterProperty::Invalid && CurTip != prop )
            {
                CurTip = prop;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( prop ) );
                FindText( "Desc" ).Text = MSG_GAME( STR_PARAM_DESC( prop ) );
                FindPanel( "Image" ).SetBackgroundImage( STR_PARAM_PIC( prop ) );
            }
        }
    }

    class Image : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 44 );
        }
    }

    class Name : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 7 );
            SetSize( 270, 31 );
            SetTextFont( FONT_THIN );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Desc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 44 );
            SetSize( 150, 124 );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Buttons : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 334, 448 );
        }
    }

    class Print : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 31, 0 );
        }
    }

    class Button1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -21, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_PRINT ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Done : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 0 );
        }
    }

    class Button2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -19, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            if( UnspentSP < GetPropValue( CritterProperty::UnspentSkillPoints ) )
            {
                string skills;
                for( uint i = 0; i < SkillUp.length(); i++ )
                    if( SkillUp.getValue( i ) != 0 )
                    skills += " " + SkillUp.getKey( i ) + " " + SkillUp.getValue( i );
                if( skills != "" )
                    CustomCall( "AssignSkillPoints" + skills );
            }
            HideScreen();
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_OK ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Back : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 237, 0 );
        }
    }

    class Button3 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -18, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -1, 5 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class CharacterName : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 21, 1 );
        }
    }

    class CharacterText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 67, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return __Name;
        }
    }

    class CharacterAge : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 160, 1 );
        }
    }

    class AgeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 39, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return "" + GetPropValue( CritterProperty::Age );
        }
    }

    class CharacterGender : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 240, 1 );
        }
    }

    class GenderText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 32, 13 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return GetPropValue( CritterProperty::Gender ) == GENDER_MALE ? MSG_GAME( STR_MALE_NAME ) : MSG_GAME( STR_FEMALE_NAME );
        }
    }

    class LevelStats : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class TextLevel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 30, 282 );
        }

        string@ get_Text() override
        {
            return ReplaceText( MSG_GAME( STR_CHA_LEVEL ), "%d", GetPropValue( CritterProperty::Level ) );
        }
    }

    class TextExp : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 30, 293 );
        }

        string@ get_Text() override
        {
            return ReplaceText( MSG_GAME( STR_CHA_EXPERIENCE ), "%d", GetPropValue( CritterProperty::Experience ) );
        }
    }

    class TextNextLevel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 30, 304 );
        }

        string@ get_Text() override
        {
            return ReplaceText( MSG_GAME( STR_CHA_NEXT_LEVEL ), "%d", NUMERICAL_NUMBER( GetPropValue( CritterProperty::Level ) * 1000 ) );
        }
    }

    class Switcher : GUIPanel
    {
        int CurSwitch = 0; // 0 - perks, 1 - karma, 2 - kills
        int[] SwitchScroll = { 0, 0, 0 };

        void OnConstruct() override
        {
            SetPosition( 12, 328 );
        }

        void OnShow( dictionary@ params ) override
        {
            SwitchScroll[ 0 ] = SwitchScroll[ 1 ] = SwitchScroll[ 2 ] = 0;
        }

        void OnDraw() override
        {
            FindPanel( reflection::typeof< PerksTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 0 );
            FindPanel( reflection::typeof< KarmaTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 1 );
            FindPanel( reflection::typeof< KillsTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 2 );
        }
    }

    class PerksTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_perks.png" );
        }
    }

    class KarmaTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_karma.png" );
        }
    }

    class KillsTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_kills.png" );
        }
    }

    class PerksTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 55, 15 );
            SetText( MSG_GAME( STR_SWITCH_PERKS_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class KarmaTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 158, 15 );
            SetText( MSG_GAME( STR_SWITCH_KARMA_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class KillsTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 256, 15 );
            SetText( MSG_GAME( STR_SWITCH_KILLS_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class PerksRegion : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 111, 33 );
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 0;
        }
    }

    class KarmaRegion : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 111, 0 );
            SetSize( 98, 33 );
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 1;
        }
    }

    class KillsRegion : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 209, 0 );
            SetSize( 109, 33 );
        }

        void OnLMouseClick() override
        {
            cast< Switcher >( Parent ).CurSwitch = 2;
        }
    }

    class ScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 304, 42 );
            SetSize( 11, 14 );
            SetBackgroundImage( "art/intrface/arrow_up_off.png" );
            SetPressedImage( "art/intrface/arrow_up_on.png" );
        }

        void OnLMousePressed() override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            if( cast< Switcher >( Parent ).SwitchScroll[ curSwitch ] > 0 )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]--;
        }
    }

    class ScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 304, 56 );
            SetSize( 11, 14 );
            SetBackgroundImage( "art/intrface/arrow_down_off.png" );
            SetPressedImage( "art/intrface/arrow_down_on.png" );
        }

        void OnLMousePressed() override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]++;
        }
    }

    class CurText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 17, 38 );
            SetSize( 282, 100 );
        }

        void OnDraw() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            
            string text;
            int    curSwitch = cast< Switcher >( Parent ).CurSwitch;
            int    scroll    = cast< Switcher >( Parent ).SwitchScroll[ curSwitch ];
            if( curSwitch == 0 )
            {
                // Traits
                bool traitsTitleAdded = false;
                for( uint i = 0; i < CritterPropertyTraits.length(); i++ )
                {
                    if( GetPropValue( CritterPropertyTraits[ i ] ) != 0 )
                    {
                        if( !traitsTitleAdded )
                        {
                            traitsTitleAdded = true;
                            text += "    " + MSG_GAME( STR_TRAITS_NAME ) + "\n";
                        }
                        text += MSG_GAME( STR_PARAM_NAME( CritterPropertyTraits[ i ] ) ) + "\n";
                    }
                }
                
                // Perks
                bool perksTitleAdded = false;
                for( uint i = 0; i < CritterPropertyPerks.length(); i++ )
                {
                    int value = GetPropValue( CritterPropertyPerks[ i ] );
                    if( value != 0 )
                    {
                        if( !perksTitleAdded )
                        {
                            perksTitleAdded = true;
                            text += "    " + MSG_GAME( STR_PERKS_NAME ) + "\n";
                        }
                        text += MSG_GAME( STR_PARAM_NAME( CritterPropertyPerks[ i ] ) );
                        if( value > 1 )
                            text += " (" + value + ")";
                        text += "\n";
                    }
                }
            }
            else if( curSwitch == 1 )
            {
                // General karma
                text += MSG_GAME( STR_KARMA_GEN_GEN_NAME ) + "\n";
                
                // Karma perks
                for( uint i = 0; i < CritterPropertyKarmaPerks.length(); i++ )
                {
                    if( GetPropValue( CritterPropertyKarmaPerks[ i ] ) != 0 )
                        text += MSG_GAME( STR_PARAM_NAME( CritterPropertyKarmaPerks[ i ] ) ) + "\n";
                }
                
                // Town reputation
                bool townReputationTitleAdded = false;
                for( uint i = 0; i < CritterPropertyReputations.length(); i++ )
                {
                    if( !townReputationTitleAdded )
                    {
                        townReputationTitleAdded = true;
                        text += "    " + MSG_GAME( STR_TOWNREP_TITLE_NAME ) + "\n";
                    }
            
                    int value = GetPropValue( CritterPropertyReputations[ i ] );
                    text += MSG_GAME( STR_REPUTATION_NAME( i ) ) + ": " + MSG_GAME( STR_TOWNREP_RATIO_NAME( value ) ) + " " + value + "\n";
                }
                
                // Addiction
                bool addictionTitleAdded = false;
                bool[] addictions = chosen.Addictions;
                for( uint i = 0; i < addictions.length(); i++ )
                {
                    if( addictions[ i ] )
                    {
                        if( !addictionTitleAdded )
                        {
                            addictionTitleAdded = true;
                            text += "    " + MSG_GAME( STR_ADDICT_TITLE_NAME ) + "\n";
                        }
            
                        text += MSG_GAME( STR_ADDICTION_NAME( i ) ) + "\n";
                    }
                }
            }
            else if( curSwitch == 2 )
            {
                uint[] kills = chosen.Kills;
                for( uint i = 0; i < kills.length(); i++ )
                {
                    if( kills[ i ] != 0 )
                    {
                        text += MSG_GAME( STR_KILL_NAME( i ) );
                        if( kills[ i ] > 1 )
                            text += " (" + kills[ i ] + ")";
                        text += "\n";
                    }
                }
            }
            SetTextFlags( FT_SKIPLINES( scroll ) );
            SetText( text );
        }

        void OnMousePressed( int button ) override
        {
            int curSwitch = cast< Switcher >( Parent ).CurSwitch;
            if( button == MOUSE_BUTTON_WHEEL_UP && cast< Switcher >( Parent ).SwitchScroll[ curSwitch ] > 0 )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]--;
            else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                cast< Switcher >( Parent ).SwitchScroll[ curSwitch ]++;
        }
    }

    Character@ CreateCharacterHierarchy( GUIObject@ parent )
    {
        Character obj();
        CreateBaseStatsHierarchy( obj );
        CreateHealthStatsHierarchy( obj );
        CreateExtendedStatsHierarchy( obj );
        CreateSkillsHierarchy( obj );
        CreateSkillPointsHierarchy( obj );
        CreateTipHierarchy( obj );
        CreateButtonsHierarchy( obj );
        CreateCharacterNameHierarchy( obj );
        CreateCharacterAgeHierarchy( obj );
        CreateCharacterGenderHierarchy( obj );
        CreateLevelStatsHierarchy( obj );
        CreateSwitcherHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    BaseStats@ CreateBaseStatsHierarchy( GUIObject@ parent )
    {
        BaseStats obj();
        CreateBaseStatHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    BaseStat@ CreateBaseStatHierarchy( GUIObject@ parent )
    {
        BaseStat obj();
        CreateStatNameHierarchy( obj );
        CreateStatValueHierarchy( obj );
        CreateStatValueDescHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    StatName@ CreateStatNameHierarchy( GUIObject@ parent )
    {
        StatName obj();
        obj.Init( parent );
        return obj;
    }

    StatValue@ CreateStatValueHierarchy( GUIObject@ parent )
    {
        StatValue obj();
        obj.Init( parent );
        return obj;
    }

    StatValueDesc@ CreateStatValueDescHierarchy( GUIObject@ parent )
    {
        StatValueDesc obj();
        obj.Init( parent );
        return obj;
    }

    HealthStats@ CreateHealthStatsHierarchy( GUIObject@ parent )
    {
        HealthStats obj();
        CreateHealthStatHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    HealthStat@ CreateHealthStatHierarchy( GUIObject@ parent )
    {
        HealthStat obj();
        CreateStatDescHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    StatDesc@ CreateStatDescHierarchy( GUIObject@ parent )
    {
        StatDesc obj();
        obj.Init( parent );
        return obj;
    }

    ExtendedStats@ CreateExtendedStatsHierarchy( GUIObject@ parent )
    {
        ExtendedStats obj();
        CreateExtendedStatHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ExtendedStat@ CreateExtendedStatHierarchy( GUIObject@ parent )
    {
        ExtendedStat obj();
        CreateStatName2Hierarchy( obj );
        CreateStatValue2Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    StatName2@ CreateStatName2Hierarchy( GUIObject@ parent )
    {
        StatName2 obj();
        obj.Init( parent );
        return obj;
    }

    StatValue2@ CreateStatValue2Hierarchy( GUIObject@ parent )
    {
        StatValue2 obj();
        obj.Init( parent );
        return obj;
    }

    Skills@ CreateSkillsHierarchy( GUIObject@ parent )
    {
        Skills obj();
        CreateSkillHierarchy( obj );
        CreateTitle3Hierarchy( obj );
        CreateSliderHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Skill@ CreateSkillHierarchy( GUIObject@ parent )
    {
        Skill obj();
        CreateSkillNameHierarchy( obj );
        CreateSkillValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    SkillName@ CreateSkillNameHierarchy( GUIObject@ parent )
    {
        SkillName obj();
        obj.Init( parent );
        return obj;
    }

    SkillValue@ CreateSkillValueHierarchy( GUIObject@ parent )
    {
        SkillValue obj();
        obj.Init( parent );
        return obj;
    }

    Title3@ CreateTitle3Hierarchy( GUIObject@ parent )
    {
        Title3 obj();
        obj.Init( parent );
        return obj;
    }

    Slider@ CreateSliderHierarchy( GUIObject@ parent )
    {
        Slider obj();
        CreateIncPointHierarchy( obj );
        CreateDecPointHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    IncPoint@ CreateIncPointHierarchy( GUIObject@ parent )
    {
        IncPoint obj();
        obj.Init( parent );
        return obj;
    }

    DecPoint@ CreateDecPointHierarchy( GUIObject@ parent )
    {
        DecPoint obj();
        obj.Init( parent );
        return obj;
    }

    SkillPoints@ CreateSkillPointsHierarchy( GUIObject@ parent )
    {
        SkillPoints obj();
        CreateTitle2Hierarchy( obj );
        CreateUnspentValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Title2@ CreateTitle2Hierarchy( GUIObject@ parent )
    {
        Title2 obj();
        obj.Init( parent );
        return obj;
    }

    UnspentValue@ CreateUnspentValueHierarchy( GUIObject@ parent )
    {
        UnspentValue obj();
        obj.Init( parent );
        return obj;
    }

    Tip@ CreateTipHierarchy( GUIObject@ parent )
    {
        Tip obj();
        CreateImageHierarchy( obj );
        CreateNameHierarchy( obj );
        CreateDescHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Image@ CreateImageHierarchy( GUIObject@ parent )
    {
        Image obj();
        obj.Init( parent );
        return obj;
    }

    Name@ CreateNameHierarchy( GUIObject@ parent )
    {
        Name obj();
        obj.Init( parent );
        return obj;
    }

    Desc@ CreateDescHierarchy( GUIObject@ parent )
    {
        Desc obj();
        obj.Init( parent );
        return obj;
    }

    Buttons@ CreateButtonsHierarchy( GUIObject@ parent )
    {
        Buttons obj();
        CreatePrintHierarchy( obj );
        CreateDoneHierarchy( obj );
        CreateBackHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Print@ CreatePrintHierarchy( GUIObject@ parent )
    {
        Print obj();
        CreateButton1Hierarchy( obj );
        CreateText7Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button1@ CreateButton1Hierarchy( GUIObject@ parent )
    {
        Button1 obj();
        obj.Init( parent );
        return obj;
    }

    Text7@ CreateText7Hierarchy( GUIObject@ parent )
    {
        Text7 obj();
        obj.Init( parent );
        return obj;
    }

    Done@ CreateDoneHierarchy( GUIObject@ parent )
    {
        Done obj();
        CreateButton2Hierarchy( obj );
        CreateText8Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button2@ CreateButton2Hierarchy( GUIObject@ parent )
    {
        Button2 obj();
        obj.Init( parent );
        return obj;
    }

    Text8@ CreateText8Hierarchy( GUIObject@ parent )
    {
        Text8 obj();
        obj.Init( parent );
        return obj;
    }

    Back@ CreateBackHierarchy( GUIObject@ parent )
    {
        Back obj();
        CreateButton3Hierarchy( obj );
        CreateText9Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Button3@ CreateButton3Hierarchy( GUIObject@ parent )
    {
        Button3 obj();
        obj.Init( parent );
        return obj;
    }

    Text9@ CreateText9Hierarchy( GUIObject@ parent )
    {
        Text9 obj();
        obj.Init( parent );
        return obj;
    }

    CharacterName@ CreateCharacterNameHierarchy( GUIObject@ parent )
    {
        CharacterName obj();
        CreateCharacterTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CharacterText@ CreateCharacterTextHierarchy( GUIObject@ parent )
    {
        CharacterText obj();
        obj.Init( parent );
        return obj;
    }

    CharacterAge@ CreateCharacterAgeHierarchy( GUIObject@ parent )
    {
        CharacterAge obj();
        CreateAgeTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    AgeText@ CreateAgeTextHierarchy( GUIObject@ parent )
    {
        AgeText obj();
        obj.Init( parent );
        return obj;
    }

    CharacterGender@ CreateCharacterGenderHierarchy( GUIObject@ parent )
    {
        CharacterGender obj();
        CreateGenderTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    GenderText@ CreateGenderTextHierarchy( GUIObject@ parent )
    {
        GenderText obj();
        obj.Init( parent );
        return obj;
    }

    LevelStats@ CreateLevelStatsHierarchy( GUIObject@ parent )
    {
        LevelStats obj();
        CreateTextLevelHierarchy( obj );
        CreateTextExpHierarchy( obj );
        CreateTextNextLevelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TextLevel@ CreateTextLevelHierarchy( GUIObject@ parent )
    {
        TextLevel obj();
        obj.Init( parent );
        return obj;
    }

    TextExp@ CreateTextExpHierarchy( GUIObject@ parent )
    {
        TextExp obj();
        obj.Init( parent );
        return obj;
    }

    TextNextLevel@ CreateTextNextLevelHierarchy( GUIObject@ parent )
    {
        TextNextLevel obj();
        obj.Init( parent );
        return obj;
    }

    Switcher@ CreateSwitcherHierarchy( GUIObject@ parent )
    {
        Switcher obj();
        CreatePerksTitleHierarchy( obj );
        CreateKarmaTitleHierarchy( obj );
        CreateKillsTitleHierarchy( obj );
        CreatePerksTitleTextHierarchy( obj );
        CreateKarmaTitleTextHierarchy( obj );
        CreateKillsTitleTextHierarchy( obj );
        CreatePerksRegionHierarchy( obj );
        CreateKarmaRegionHierarchy( obj );
        CreateKillsRegionHierarchy( obj );
        CreateScrollUpHierarchy( obj );
        CreateScrollDownHierarchy( obj );
        CreateCurTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    PerksTitle@ CreatePerksTitleHierarchy( GUIObject@ parent )
    {
        PerksTitle obj();
        obj.Init( parent );
        return obj;
    }

    KarmaTitle@ CreateKarmaTitleHierarchy( GUIObject@ parent )
    {
        KarmaTitle obj();
        obj.Init( parent );
        return obj;
    }

    KillsTitle@ CreateKillsTitleHierarchy( GUIObject@ parent )
    {
        KillsTitle obj();
        obj.Init( parent );
        return obj;
    }

    PerksTitleText@ CreatePerksTitleTextHierarchy( GUIObject@ parent )
    {
        PerksTitleText obj();
        obj.Init( parent );
        return obj;
    }

    KarmaTitleText@ CreateKarmaTitleTextHierarchy( GUIObject@ parent )
    {
        KarmaTitleText obj();
        obj.Init( parent );
        return obj;
    }

    KillsTitleText@ CreateKillsTitleTextHierarchy( GUIObject@ parent )
    {
        KillsTitleText obj();
        obj.Init( parent );
        return obj;
    }

    PerksRegion@ CreatePerksRegionHierarchy( GUIObject@ parent )
    {
        PerksRegion obj();
        obj.Init( parent );
        return obj;
    }

    KarmaRegion@ CreateKarmaRegionHierarchy( GUIObject@ parent )
    {
        KarmaRegion obj();
        obj.Init( parent );
        return obj;
    }

    KillsRegion@ CreateKillsRegionHierarchy( GUIObject@ parent )
    {
        KillsRegion obj();
        obj.Init( parent );
        return obj;
    }

    ScrollUp@ CreateScrollUpHierarchy( GUIObject@ parent )
    {
        ScrollUp obj();
        obj.Init( parent );
        return obj;
    }

    ScrollDown@ CreateScrollDownHierarchy( GUIObject@ parent )
    {
        ScrollDown obj();
        obj.Init( parent );
        return obj;
    }

    CurText@ CreateCurTextHierarchy( GUIObject@ parent )
    {
        CurText obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateCharacterHierarchy( null );
    }
}

namespace Dialog
{
    class Dialog : GUIScreen
    {
        bool TalkerIsNpc;
        uint TalkerId;
        string Text;
        string@[] Answers;
        uint TalkTime;
        uint TalkStartTick;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 640, 311 );
            SetBackgroundImage( "art/intrface/talk.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            TalkerIsNpc   = bool( params[ "TalkerIsNpc" ] );
            TalkerId      = uint( params[ "TalkerId" ] );
            Text          = cast< string@ >( params[ "Text" ] );
            Answers       = cast< string@[]@ >( params[ "Answers" ] );
            TalkTime      = uint( params[ "TalkTime" ] );
            TalkStartTick = GetTick();
        }
    }

    class DailogPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 121 );
            SetSize( 640, 190 );
            SetBackgroundImage( "art/intrface/talk_answ.png" );
        }
    }

    class EndDialogTime : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 492, 59 );
            SetSize( 30, 10 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        void OnDraw() override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            string text;
            if( dialog.TalkTime > 0 )
            {
                uint curTick = GetTick();
                uint endTick = dialog.TalkStartTick + dialog.TalkTime;
                text += curTick < endTick ? ( endTick - curTick ) / 1000 : 0;
            }
            
            SetText( text );
        }
    }

    class SpeechPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 142, 15 );
            SetSize( 350, 97 );
            SetCropContent( true );
            SetAutoScroll( true, false );
        }
    }

    class SpeechText : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 350, 97 );
        }

        void OnShow( dictionary@ params ) override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            Text = dialog.Text;
            
        }
    }

    class AnswersGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 127, 163 );
            SetSize( 390, 120 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( "AnswerText" );
            SetPadding( 0, 3 );
        }

        void OnShow( dictionary@ params ) override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            ResizeGrid( dialog.Answers.length() );
        }
    }

    class AnswerText : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 390, 10 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            SetTextColor( IsHovered ? COLOR_WHITE : COLOR_GREEN );
        }

        void OnLMouseClick() override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            CustomCall( "DialogAnswer " + dialog.TalkerIsNpc + " " + dialog.TalkerId + " " + CellIndex );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            string@ text = EncodeUTF8( TEXT_SYMBOL_DOT ) + dialog.Answers[ CellIndex ];
            int tw = 0, th = 0, lines = 0;
            GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Width, th );
            SetText( text );
        }
    }

    class BarterButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 587, 157 );
            SetSize( 22, 21 );
            SetPressedImage( "art/intrface/big_red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Dialog@ dialog = cast< Dialog >( Screen );
            if( dialog.TalkerIsNpc && GetCritter( dialog.TalkerId ) !is null && !GetCritter( dialog.TalkerId ).IsNoBarter )
                CustomCall( "DialogAnswer " + dialog.TalkerIsNpc + " " + dialog.TalkerId + " " + 0xF2 );
            else
                Screen.FindText( "SpeechText" ).SetText( MSG_GAME( STR_BARTER_NO_BARTER_MODE ) );
        }
    }

    class BarterButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -26, -21 );
            SetSize( 78, 20 );
            SetText( MSG_GAME( STR_DIALOG_BARTER ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class SayButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 589, 211 );
            SetSize( 22, 21 );
            SetPressedImage( "art/intrface/big_red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_SAY );
        }
    }

    class SayButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -27, -22 );
            SetSize( 78, 20 );
            SetText( MSG_GAME( STR_DIALOG_SAY ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class HistoryButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 12, 272 );
            SetSize( 51, 29 );
            SetPressedImage( "art/intrface/DI_REST2.png" );
        }
    }

    class MoneyCountText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 139 );
            SetSize( 60, 45 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return "$" + GetChosen().CountItem( Content::Item::bottle_caps );
        }
    }

    Dialog@ CreateDialogHierarchy( GUIObject@ parent )
    {
        Dialog obj();
        CreateDailogPanelHierarchy( obj );
        CreateEndDialogTimeHierarchy( obj );
        CreateSpeechPanelHierarchy( obj );
        CreateAnswersGridHierarchy( obj );
        CreateBarterButtonHierarchy( obj );
        CreateSayButtonHierarchy( obj );
        CreateHistoryButtonHierarchy( obj );
        CreateMoneyCountTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DailogPanel@ CreateDailogPanelHierarchy( GUIObject@ parent )
    {
        DailogPanel obj();
        obj.Init( parent );
        return obj;
    }

    EndDialogTime@ CreateEndDialogTimeHierarchy( GUIObject@ parent )
    {
        EndDialogTime obj();
        obj.Init( parent );
        return obj;
    }

    SpeechPanel@ CreateSpeechPanelHierarchy( GUIObject@ parent )
    {
        SpeechPanel obj();
        CreateSpeechTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    SpeechText@ CreateSpeechTextHierarchy( GUIObject@ parent )
    {
        SpeechText obj();
        obj.Init( parent );
        return obj;
    }

    AnswersGrid@ CreateAnswersGridHierarchy( GUIObject@ parent )
    {
        AnswersGrid obj();
        CreateAnswerTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    AnswerText@ CreateAnswerTextHierarchy( GUIObject@ parent )
    {
        AnswerText obj();
        obj.Init( parent );
        return obj;
    }

    BarterButton@ CreateBarterButtonHierarchy( GUIObject@ parent )
    {
        BarterButton obj();
        CreateBarterButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    BarterButtonName@ CreateBarterButtonNameHierarchy( GUIObject@ parent )
    {
        BarterButtonName obj();
        obj.Init( parent );
        return obj;
    }

    SayButton@ CreateSayButtonHierarchy( GUIObject@ parent )
    {
        SayButton obj();
        CreateSayButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    SayButtonName@ CreateSayButtonNameHierarchy( GUIObject@ parent )
    {
        SayButtonName obj();
        obj.Init( parent );
        return obj;
    }

    HistoryButton@ CreateHistoryButtonHierarchy( GUIObject@ parent )
    {
        HistoryButton obj();
        obj.Init( parent );
        return obj;
    }

    MoneyCountText@ CreateMoneyCountTextHierarchy( GUIObject@ parent )
    {
        MoneyCountText obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateDialogHierarchy( null );
    }
}

namespace Barter
{
    class Barter : GUIScreen
    {
        uint CritterId;
        
        string@ GetItemsInfoStr( int collection )
        {
            uint weight = 0;
            uint volume = 0;
            uint cost   = 0;
            
            Item@[] @ items = RefreshItemsCollection( collection );
            for( uint i = 0; i < items.length(); i++ )
                cost += items[ i ].Cost * items[ i ].Count;
            
            return "$" + cost;
        }

        void OnConstruct() override
        {
            SetModal( true );
            SetAvailableCursors( array< CursorType >  = {CursorType::Hand} );
            SetCanMove( true, false );
            SetSize( 640, 311 );
            SetBackgroundImage( "art/intrface/talk.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            CritterId = uint( params[ "CritterId" ] );
        }
    }

    class DiscPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 142, 15 );
            SetSize( 365, 95 );
            SetCropContent( true );
            SetAutoScroll( true, false );
        }
    }

    import string@ item_description( Item& item, int lookType ) from "ClientMain";

    class DescText : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 365, 95 );
        }

        void OnDraw() override
        {
            //GUIObject@ GUI_GetHoveredObject()
            GUIObject@ obj = GUI_GetHoveredObject();
            if( obj is null || obj.Grid is null )
                return;
            
            GUIItemView@ itemView = cast< GUIItemView >( obj.Grid );
            if( itemView is null )
                return;
            
            Item@ item = itemView.GetItem( obj.CellIndex );
            if( item is null )
                return;
            
            string@ text = item_description( item, ITEM_LOOK_BARTER );
            int tw = 0, th = 0, lines = 0;
            GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Width, th );
            SetText( text );
        }
    }

    class MainBarter : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 120 );
            SetSize( 640, 191 );
            SetBackgroundImage( "art/intrface/barter.png" );
        }
    }

    class ChosenPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 320, 191 );
        }
    }

    class ChosenPreview : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 23, 35 );
            SetSize( 50, 90 );
        }

        void OnInit() override
        {
            Preview::CreateHierarchy( this );
        }
    }

    class ChosenInv : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 105, 31 );
            SetSize( 70, 145 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( ".ImageChosen" );
            SetGridSize( 3 );
            SetColumns( 1 );
            SetItemsCollection( ITEMS_BARTER );
            SetUseSorting( true );
        }

        int OnCheckItem( Item@ item ) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    }

    class ChosenInvScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 192, 55 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/inv_scr_up_pressed.png" );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ itemView = cast< GUIItemView >( Parent.Find( "ChosenInv" ) );
            itemView.ModifyScroll( -10, 0 );
        }
    }

    class ChosenInvScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 193, 81 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/inv_scr_dn_pressed.png" );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ itemView = cast< GUIItemView >( Parent.Find( "ChosenInv" ) );
            itemView.ModifyScroll( 10, 0 );
        }
    }

    class ChosenOffer : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 241, 10 );
            SetSize( 70, 160 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( ".ImageChosen" );
            SetGridSize( 4 );
            SetColumns( 1 );
            SetItemsCollection( ITEMS_BARTER_OFFER );
            SetUseSorting( true );
        }

        int OnCheckItem( Item@ item ) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    }

    class ChosenOfferScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 208, 111 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/inv_scr_up_pressed.png" );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ itemView = cast< GUIItemView >( Parent.Find( "ChosenOffer" ) );
            itemView.ModifyScroll( -10, 0 );
        }
    }

    class ChosenOfferScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 208, 135 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/inv_scr_dn_pressed.png" );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ itemView = cast< GUIItemView >( Parent.Find( "ChosenOffer" ) );
            itemView.ModifyScroll( 10, 0 );
        }
    }

    class ImageChosen : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 105, 31 );
            SetSize( 70, 40 );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            uint picInv = 0;
            if( item !is null )
                picInv = ( item.PicInv != 0 ? item.PicInv : item.PicInv );
            BackgroundImage.Load( picInv );
        }
    }

    class CountChosenOffer : GUIText
    {
        void OnConstruct() override
        {
            SetTextColor( COLOR_WHITE );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint count = 0;
            if( item !is null && item.Stackable )
                count = item.Count;
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    }

    class CostChosenOffer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 241, 170 );
            SetSize( 70, 10 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_WHITE );
        }

        void OnDraw() override
        {
            SetText( cast< Barter >( Screen ).GetItemsInfoStr( ITEMS_BARTER_OFFER ) );
        }
    }

    class OtherPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 320, 0 );
            SetSize( 320, 191 );
        }
    }

    class OtherPreview : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 247, 35 );
            SetSize( 50, 90 );
        }

        void OnInit() override
        {
            Preview::CreateHierarchy( this );
        }

        void OnShow( dictionary@ params ) override
        {
            auto@ preview = cast< Preview::Preview >( GetChild( 0 ) );
            preview.PreviewCritterId = cast< Barter >( Screen ).CritterId;
        }
    }

    class OtherInv : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 144, 31 );
            SetSize( 70, 145 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( ".ImageOther" );
            SetGridSize( 3 );
            SetColumns( 1 );
            SetItemsCollection( ITEMS_BARTER_OPPONENT );
            SetUseSorting( true );
        }

        int OnCheckItem( Item@ item ) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    }

    class OtherInvScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 104, 54 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/inv_scr_up_pressed.png" );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ itemView = cast< GUIItemView >( Parent.Find( "OtherInv" ) );
            itemView.ModifyScroll( -10, 0 );
        }
    }

    class OtherInvScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 104, 81 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/inv_scr_dn_pressed.png" );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ itemView = cast< GUIItemView >( Parent.Find( "OtherInv" ) );
            itemView.ModifyScroll( 10, 0 );
        }
    }

    class OtherOffer : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 9, 10 );
            SetSize( 70, 160 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( ".ImageOther" );
            SetGridSize( 4 );
            SetColumns( 1 );
            SetItemsCollection( ITEMS_BARTER_OPPONENT_OFFER );
            SetUseSorting( true );
        }

        int OnCheckItem( Item@ item ) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    }

    class OtherOfferScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 97, 111 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/inv_scr_up_pressed.png" );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ itemView = cast< GUIItemView >( Parent.Find( "OtherOffer" ) );
            itemView.ModifyScroll( -10, 0 );
        }
    }

    class OtherOfferScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 98, 135 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/inv_scr_dn_pressed.png" );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ itemView = cast< GUIItemView >( Parent.Find( "OtherOffer" ) );
            itemView.ModifyScroll( 10, 0 );
        }
    }

    class ImageOther : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 144, 31 );
            SetSize( 70, 40 );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            uint picInv = 0;
            if( item !is null )
                picInv = ( item.PicInv != 0 ? item.PicInv : item.PicInv );
            BackgroundImage.Load( picInv );
        }
    }

    class CountOtherInv : GUIText
    {
        void OnConstruct() override
        {
            SetTextColor( COLOR_WHITE );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint count = 0;
            if( item !is null && item.Stackable )
                count = item.Count;
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    }

    class CostOtherOffer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 9, 170 );
            SetSize( 70, 10 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_WHITE );
        }

        void OnDraw() override
        {
            SetText( cast< Barter >( Screen ).GetItemsInfoStr( ITEMS_BARTER_OPPONENT_OFFER ) );
        }
    }

    class OfferButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 40, 163 );
            SetSize( 14, 14 );
            SetPressedImage( "art/intrface/BarterButton.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "BarterOffer" );
        }
    }

    class OfferButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 5, -21 );
            SetText( MSG_GAME( STR_BARTER_OFFER ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class CloseButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 585, 162 );
            SetSize( 14, 14 );
            SetPressedImage( "art/intrface/BarterButton.png" );
        }

        void OnLMouseClick() override
        {
            Barter@ barter = cast< Barter >( Screen );
            CustomCall( "DialogAnswer true " + barter.CritterId + " " + 0xF1 );
            HideScreen();
        }
    }

    class CloseButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 5, -19 );
            SetText( MSG_GAME( STR_BARTER_TALK ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    Barter@ CreateBarterHierarchy( GUIObject@ parent )
    {
        Barter obj();
        CreateDiscPanelHierarchy( obj );
        CreateMainBarterHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DiscPanel@ CreateDiscPanelHierarchy( GUIObject@ parent )
    {
        DiscPanel obj();
        CreateDescTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DescText@ CreateDescTextHierarchy( GUIObject@ parent )
    {
        DescText obj();
        obj.Init( parent );
        return obj;
    }

    MainBarter@ CreateMainBarterHierarchy( GUIObject@ parent )
    {
        MainBarter obj();
        CreateChosenPanelHierarchy( obj );
        CreateOtherPanelHierarchy( obj );
        CreateOfferButtonHierarchy( obj );
        CreateCloseButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChosenPanel@ CreateChosenPanelHierarchy( GUIObject@ parent )
    {
        ChosenPanel obj();
        CreateChosenPreviewHierarchy( obj );
        CreateChosenInvHierarchy( obj );
        CreateChosenInvScrollUpHierarchy( obj );
        CreateChosenInvScrollDownHierarchy( obj );
        CreateChosenOfferHierarchy( obj );
        CreateChosenOfferScrollUpHierarchy( obj );
        CreateChosenOfferScrollDownHierarchy( obj );
        CreateImageChosenHierarchy( obj );
        CreateCostChosenOfferHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChosenPreview@ CreateChosenPreviewHierarchy( GUIObject@ parent )
    {
        ChosenPreview obj();
        obj.Init( parent );
        return obj;
    }

    ChosenInv@ CreateChosenInvHierarchy( GUIObject@ parent )
    {
        ChosenInv obj();
        obj.Init( parent );
        return obj;
    }

    ChosenInvScrollUp@ CreateChosenInvScrollUpHierarchy( GUIObject@ parent )
    {
        ChosenInvScrollUp obj();
        obj.Init( parent );
        return obj;
    }

    ChosenInvScrollDown@ CreateChosenInvScrollDownHierarchy( GUIObject@ parent )
    {
        ChosenInvScrollDown obj();
        obj.Init( parent );
        return obj;
    }

    ChosenOffer@ CreateChosenOfferHierarchy( GUIObject@ parent )
    {
        ChosenOffer obj();
        obj.Init( parent );
        return obj;
    }

    ChosenOfferScrollUp@ CreateChosenOfferScrollUpHierarchy( GUIObject@ parent )
    {
        ChosenOfferScrollUp obj();
        obj.Init( parent );
        return obj;
    }

    ChosenOfferScrollDown@ CreateChosenOfferScrollDownHierarchy( GUIObject@ parent )
    {
        ChosenOfferScrollDown obj();
        obj.Init( parent );
        return obj;
    }

    ImageChosen@ CreateImageChosenHierarchy( GUIObject@ parent )
    {
        ImageChosen obj();
        CreateCountChosenOfferHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CountChosenOffer@ CreateCountChosenOfferHierarchy( GUIObject@ parent )
    {
        CountChosenOffer obj();
        obj.Init( parent );
        return obj;
    }

    CostChosenOffer@ CreateCostChosenOfferHierarchy( GUIObject@ parent )
    {
        CostChosenOffer obj();
        obj.Init( parent );
        return obj;
    }

    OtherPanel@ CreateOtherPanelHierarchy( GUIObject@ parent )
    {
        OtherPanel obj();
        CreateOtherPreviewHierarchy( obj );
        CreateOtherInvHierarchy( obj );
        CreateOtherInvScrollUpHierarchy( obj );
        CreateOtherInvScrollDownHierarchy( obj );
        CreateOtherOfferHierarchy( obj );
        CreateOtherOfferScrollUpHierarchy( obj );
        CreateOtherOfferScrollDownHierarchy( obj );
        CreateImageOtherHierarchy( obj );
        CreateCostOtherOfferHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    OtherPreview@ CreateOtherPreviewHierarchy( GUIObject@ parent )
    {
        OtherPreview obj();
        obj.Init( parent );
        return obj;
    }

    OtherInv@ CreateOtherInvHierarchy( GUIObject@ parent )
    {
        OtherInv obj();
        obj.Init( parent );
        return obj;
    }

    OtherInvScrollUp@ CreateOtherInvScrollUpHierarchy( GUIObject@ parent )
    {
        OtherInvScrollUp obj();
        obj.Init( parent );
        return obj;
    }

    OtherInvScrollDown@ CreateOtherInvScrollDownHierarchy( GUIObject@ parent )
    {
        OtherInvScrollDown obj();
        obj.Init( parent );
        return obj;
    }

    OtherOffer@ CreateOtherOfferHierarchy( GUIObject@ parent )
    {
        OtherOffer obj();
        obj.Init( parent );
        return obj;
    }

    OtherOfferScrollUp@ CreateOtherOfferScrollUpHierarchy( GUIObject@ parent )
    {
        OtherOfferScrollUp obj();
        obj.Init( parent );
        return obj;
    }

    OtherOfferScrollDown@ CreateOtherOfferScrollDownHierarchy( GUIObject@ parent )
    {
        OtherOfferScrollDown obj();
        obj.Init( parent );
        return obj;
    }

    ImageOther@ CreateImageOtherHierarchy( GUIObject@ parent )
    {
        ImageOther obj();
        CreateCountOtherInvHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CountOtherInv@ CreateCountOtherInvHierarchy( GUIObject@ parent )
    {
        CountOtherInv obj();
        obj.Init( parent );
        return obj;
    }

    CostOtherOffer@ CreateCostOtherOfferHierarchy( GUIObject@ parent )
    {
        CostOtherOffer obj();
        obj.Init( parent );
        return obj;
    }

    OfferButton@ CreateOfferButtonHierarchy( GUIObject@ parent )
    {
        OfferButton obj();
        CreateOfferButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    OfferButtonName@ CreateOfferButtonNameHierarchy( GUIObject@ parent )
    {
        OfferButtonName obj();
        obj.Init( parent );
        return obj;
    }

    CloseButton@ CreateCloseButtonHierarchy( GUIObject@ parent )
    {
        CloseButton obj();
        CreateCloseButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CloseButtonName@ CreateCloseButtonNameHierarchy( GUIObject@ parent )
    {
        CloseButtonName obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateBarterHierarchy( null );
    }
}

namespace PipBoy
{
    enum MenuMode
    {
        None,
        Status,
        Automaps,
        Archives,
        Text,
        MapPanel,
    }
    
    MenuMode CurMenu;
    DescText@ CurText;
    
    string FormatXX( int val )
    {
        return val < 10 ? "0" + val : "" + val;
    }

    class PipBoy : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/PipBoy.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            CurMenu = PipBoy::MenuMode::None;
        }
    }

    class ShowPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 250, 36 );
            SetSize( 360, 420 );
        }

        void OnDraw() override
        {
            Find( "NonePanel" ).SetActive( CurMenu == PipBoy::MenuMode::None );
            Find( "StatusPanel" ).SetActive( CurMenu == PipBoy::MenuMode::Status );
            Find( "AutoMapsGrid" ).SetActive( CurMenu == PipBoy::MenuMode::Automaps );
            Find( "ArchivesPanel" ).SetActive( CurMenu == PipBoy::MenuMode::Archives );
            Find( "DescText" ).SetActive( CurMenu == PipBoy::MenuMode::Text );
            Find( "DrawMapPanel" ).SetActive( CurMenu == PipBoy::MenuMode::MapPanel );
        }
    }

    class NonePanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 75, 134 );
            SetSize( 204, 141 );
            SetBackgroundImage( "art/intrface/PipX.png" );
        }
    }

    class StatusPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetSize( 360, 420 );
            SetCropContent( true );
            SetAutoScroll( true, false );
        }
    }

    class ReplicationStatus : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 360, 40 );
        }
    }

    class ReplTitle : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 360, 10 );
            SetText( MSG_GAME( STR_PIP_STATUS ) );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }
    }

    class ReplMoneyName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 0, 10 );
            SetSize( 250, 10 );
            SetText( MSG_GAME( STR_PIP_REPLICATION_MONEY ) );
            SetTextFlags( FT_CENTERY );
        }
    }

    class ReplMoneyValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 250, 10 );
            SetSize( 110, 10 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return "";
            string text = MSG_GAME( STR_PIP_REPLICATION_MONEY_VAL );
            text        = ReplaceText( text, "%d", chosen.ReplicationMoney );
            return text;
        }
    }

    class ReplCostName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 0, 20 );
            SetSize( 250, 10 );
            SetText( MSG_GAME( STR_PIP_REPLICATION_COST ) );
            SetTextFlags( FT_CENTERY );
        }
    }

    class ReplCostcValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 250, 20 );
            SetSize( 110, 10 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return "";
            string text = MSG_GAME( STR_PIP_REPLICATION_COST_VAL );
            text        = ReplaceText( text, "%d", chosen.ReplicationCost );
            return text;
        }
    }

    class ReplCountName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 0, 30 );
            SetSize( 250, 10 );
            SetText( MSG_GAME( STR_PIP_REPLICATION_COUNT ) );
        }
    }

    class ReplCountValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 250, 30 );
            SetSize( 110, 10 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return "";
            string text = MSG_GAME( STR_PIP_REPLICATION_COUNT_VAL );
            text        = ReplaceText( text, "%d", chosen.ReplicationCount );
            return text;
        }
    }

    class TimepoutStatus : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 40 );
            SetSize( 360, 110 );
        }
    }

    class TimeoutTitle : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 360, 10 );
            SetText( MSG_GAME( STR_PIP_TIMEOUTS ) );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }
    }

    class TimeoutsGrid : GUIGrid
    {
        CritterProperty[] Timeouts = {  CritterProperty::TimeoutSneak, CritterProperty::TimeoutKarmaVoting, CritterProperty::TimeoutRemoveFromGame,
                                        CritterProperty::TimeoutBattle, CritterProperty::TimeoutSkSteal, CritterProperty::TimeoutSkLockpick,          
                                        CritterProperty::TimeoutSkScience, CritterProperty::TimeoutSkRepair, CritterProperty::TimeoutSkDoctor, CritterProperty::TimeoutSkFirstAid };

        void OnConstruct() override
        {
            SetPosition( 0, 10 );
            SetSize( 360, 100 );
            SetCellPrototype( "TimeoutsGridProto" );
            SetGridSize( Timeouts.length() );
            SetColumns( 1 );
        }
    }

    class TimeoutsGridProto : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 360, 10 );
        }
    }

    class TimeoutName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 250, 10 );
            SetTextFlags( FT_CENTERY );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            CritterProperty prop = cast< TimeoutsGrid >( Grid ).Timeouts[ cellIndex ];
            SetText( MSG_GAME( STR_PARAM_NAME( prop ) ) );
        }
    }

    class TimeoutValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 250, 0 );
            SetSize( 110, 10 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return "";
            string text          = MSG_GAME( STR_TIMEOUT_SECONDS );
            CritterProperty prop = cast< TimeoutsGrid >( Grid ).Timeouts[ CellIndex ];
            int timeout          = chosen.GetAsInt( prop ) - __FullSecond;
            timeout              = timeout > 0 ? timeout : 0;
            text                 = ReplaceText( text, "%d", timeout );
            return text;
            
        }
    }

    class QuestStatus : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 150 );
            SetSize( 360, 20 );
        }
    }

    class QuestTitle : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 360, 10 );
            SetText( MSG_GAME( STR_PIP_QUESTS ) );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }
    }

    class QuestGrid : GUIGrid
    {
        string[] CityQuest;
        
        void FindCityQuest()
        {
            CityQuest.clear();
            
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
        
            for( uint i = 0; i < CritterPropertyQuests.length(); i++ )
            {
                CritterProperty quest = CritterPropertyQuests[ i ];
                if( chosen.GetAsInt( quest ) == 0 )
                    continue;
                string questName = MSG_QUEST( STR_QUEST_NAME( quest ) );
                if( !CityQuest.exists( questName ) )
                    CityQuest.insertLast( questName );
            }
        }

        void OnConstruct() override
        {
            SetPosition( 0, 10 );
            SetSize( 360, 10 );
            SetCellPrototype( "QuestCityName" );
            SetColumns( 1 );
        }

        void OnActiveChanged() override
        {
            if( Active )
            {
                FindCityQuest();
                ResizeGrid( CityQuest.length() );
            }
        }
    }

    class QuestCityName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 360, 10 );
            SetTextFlags( FT_CENTERY );
        }

        void OnLMouseClick() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            
            string result; 
            uint   count = 1;
            string@ cityQuest = cast< QuestGrid >( Grid ).CityQuest[ CellIndex ];
            for( uint i = 0; i < CritterPropertyQuests.length(); i++ )
            {
                CritterProperty quest = CritterPropertyQuests[ i ];
                if( chosen.GetAsInt( quest ) == 0 )
                    continue;
                string questName = MSG_QUEST( STR_QUEST_NAME( quest ) );
                if( questName != cityQuest )
                    continue;
              
                result += ReplaceText( MSG_QUEST( STR_QUEST_NUMBER ), "%d", "" + count );
                result += MSG_QUEST( STR_QUEST_DESC( quest ) ) +"\n";
                result += MSG_QUEST( STR_QUEST_PROCESS );
                result += MSG_QUEST( STR_QUEST_STATUS( quest, chosen.GetAsInt( quest ) ) ) + "\n\n";
                count++;
            }
            CurMenu      = PipBoy::MenuMode::Text;
            CurText.SetTextFlags( 0 );
            CurText.Text = result;
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            SetText( cast< QuestGrid >( Grid ).CityQuest[ cellIndex ] );
        }
    }

    class ScoresTitle : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 0, 170 );
            SetSize( 360, 10 );
            SetText( MSG_GAME( STR_PIP_SCORES ) );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        void OnLMouseClick() override
        {
            string result;
            
            auto score = Globals.BestScores;
            for( uint i = 0; i < score.length(); i++ )
            {
                if( score[ i ] == "" )
                    continue;
                if( IS_MSG_GAME( STR_SCORES_TITLE( i ) ) )
                    result += MSG_GAME( STR_SCORES_TITLE( i ) ) + "\n\n";
                    
                if( IS_MSG_GAME( STR_SCORES_NAME( i ) ) )
                {
                    result += MSG_GAME( STR_SCORES_NAME( i ) ) + "\n";
                    result += score[ i ] + "\n\n";
                }
            }
            CurText.SetTextFlags( FT_CENTERX );
            CurMenu      = PipBoy::MenuMode::Text;
            CurText.Text = result;
        }

        void OnActiveChanged() override
        {
            if( Active )
            {
                GUIObject@ obj = Parent.Find( "QuestStatus" );
                int centerX = 0, centerY = 0, wholeWidth = 0, wholeHeight = 0;
                obj.GetWholeSize( centerX, centerY, wholeWidth, wholeHeight, true );
                SetPosition( PosX, obj.PosY + wholeHeight );
            }
        }
    }

    class ShowMaps
    {
        hash  ProtoId;
        int8 MapIndex;
        
        ShowMaps( hash protoId, int8 mapIndex )
        {
            ProtoId  = protoId;
            MapIndex = mapIndex;
        } 
        
    }

    class AutoMapsGrid : GUIGrid
    {
        ShowMaps[] CurShowMaps;
        
        void InitAutoMaps()
        {   
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            
            hash[] pids = chosen.KnownLocProtoId;
            CurShowMaps.clear();
            for( uint i = 0; i < pids.length(); i++ )
            {
                hash locPid = pids[ i ];
                CurShowMaps.insertLast( ShowMaps( locPid, -1 ) );
                uint j = 0;
                while( IS_MSG_LOCATION( STR_LOC_MAP_NAME( locPid, j ) ) )
                {
                    CurShowMaps.insertLast( ShowMaps( locPid, j ) );
                    j++;
                }
            }
        }

        void OnConstruct() override
        {
            SetActive( false );
            SetSize( 360, 420 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( "AutoMapsText" );
            SetColumns( 1 );
        }

        void OnActiveChanged() override
        {
            if( Active )
            {
                InitAutoMaps();
                ResizeGrid( CurShowMaps.length() );
            }
        }
    }

    class AutoMapsText : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 360, 10 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        void OnLMouseClick() override
        {
            ShowMaps@ showMaps = cast< AutoMapsGrid >( Grid ).CurShowMaps[ CellIndex ];
            if( showMaps.MapIndex != -1 )
            {
                CurMenu        = PipBoy::MenuMode::MapPanel;
                auto map       = cast< DrawMapPanel >( Screen.Find( "DrawMapPanel" ) );
                map.LocProtoId = showMaps.ProtoId;
                map.MapIndex   = showMaps.MapIndex;
            }
            else
            {
                CurText.SetTextFlags( 0 );
                CurText.Text = MSG_LOCATION( STR_LOC_INFO( showMaps.ProtoId ) );
                CurMenu      = PipBoy::MenuMode::Text;
            }
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            ShowMaps@ showMaps = cast< AutoMapsGrid >( Grid ).CurShowMaps[ cellIndex ];
            string result;
            if( showMaps.MapIndex == -1 )
                result = MSG_LOCATION( STR_LOC_NAME( showMaps.ProtoId ) );
            else
                result = MSG_LOCATION( STR_LOC_MAP_NAME( showMaps.ProtoId, showMaps.MapIndex ) );
            SetText( result );
        }
    }

    class ArchivesPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 360, 420 );
            SetCropContent( true );
            SetAutoScroll( true, false );
        }
    }

    class ArchivesTitle : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 360, 10 );
            SetText( MSG_GAME( STR_PIP_INFO ) );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }
    }

    class ArchivesGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 0, 10 );
            SetSize( 360, 10 );
            SetCellPrototype( "ArchivesText" );
            SetGridSize( 0 );
            SetColumns( 1 );
        }

        void OnActiveChanged() override
        {
            if( Active )
            {
                Critter@ chosen = GetChosen();
                if( chosen !is null )
                    ResizeGrid( chosen.HoloInfo.length() );
            }
        }
    }

    class ArchivesText : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 360, 10 );
            SetTextFlags( FT_CENTERY );
        }

        void OnLMouseClick() override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            CurText.SetTextFlags( 0 );
            CurText.Text = MSG_HOLO( STR_HOLO_INFO_DESC( chosen.HoloInfo[ CellIndex ] ) );
            CurMenu      = PipBoy::MenuMode::Text;
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            string text = MSG_HOLO( STR_HOLO_INFO_NAME( chosen.HoloInfo[ cellIndex ] ) );
            SetText( text );
        }
    }

    class DescText : GUIText
    {
        int Scroll;
        uint CurFontFlags;

        void OnConstruct() override
        {
            SetActive( false );
            SetSize( 360, 420 );
        }

        void OnInit() override
        {
            @CurText = this;
        }

        void OnMouseClick( int button ) override
        {
            if( button == MOUSE_BUTTON_WHEEL_UP && Scroll > 0 )
                Scroll--;
            else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                Scroll++;
            SetTextFlags( FT_SKIPLINES( Scroll ) | CurFontFlags );
        }

        void OnActiveChanged() override
        {
            CurFontFlags = TextFlags;
            Scroll       = 0;
        }
    }

    class DrawMapPanel : GUIPanel
    {
        hash LocProtoId;
        uint8 MapIndex;

        void OnConstruct() override
        {
            SetActive( false );
            SetSize( 360, 420 );
        }

        void OnDraw() override
        {
            //CustumCall( "DrawMap_" + PosX + "_" + PosY + "_" + Width + "_" + Height + "_" + LocProtoId + "_" + MapIndex );
        }
    }

    class TimePanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 20, 12 );
            SetSize( 185, 23 );
        }
    }

    class DayText : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 23, 23 );
            SetTextFont( FONT_NUM );
            SetTextFlags( FT_CENTERX | FT_BOTTOM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( __Day );
        }
    }

    class MonthText : GUIText
    {
        string[] CodeMonth = { "", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k" };

        void OnConstruct() override
        {
            SetPosition( 23, 0 );
            SetSize( 33, 23 );
            SetTextFont( FONT_NUM );
            SetTextFlags( FT_CENTERX | FT_BOTTOM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return CodeMonth[ __Month ];
        }
    }

    class YearText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 63, 0 );
            SetSize( 40, 23 );
            SetTextFont( FONT_NUM );
            SetTextFlags( FT_CENTERX | FT_BOTTOM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return "" + __Year;
        }
    }

    class TimeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 136, 0 );
            SetSize( 48, 23 );
            SetTextFont( FONT_NUM );
            SetTextFlags( FT_CENTERX | FT_BOTTOM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( __Hour ) + FormatXX( __Minute );
        }
    }

    class ButtonsPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 53, 338 );
        }
    }

    class StatusButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 0, 1 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CurMenu = PipBoy::MenuMode::Status;
        }
    }

    class AutomapsButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 1, 55 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CurMenu = PipBoy::MenuMode::Automaps;
        }
    }

    class ArchivesButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 0, 84 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CurMenu = PipBoy::MenuMode::Archives;
        }
    }

    class ClosButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 1, 110 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    PipBoy@ CreatePipBoyHierarchy( GUIObject@ parent )
    {
        PipBoy obj();
        CreateShowPanelHierarchy( obj );
        CreateTimePanelHierarchy( obj );
        CreateButtonsPanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ShowPanel@ CreateShowPanelHierarchy( GUIObject@ parent )
    {
        ShowPanel obj();
        CreateNonePanelHierarchy( obj );
        CreateStatusPanelHierarchy( obj );
        CreateAutoMapsGridHierarchy( obj );
        CreateArchivesPanelHierarchy( obj );
        CreateDescTextHierarchy( obj );
        CreateDrawMapPanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    NonePanel@ CreateNonePanelHierarchy( GUIObject@ parent )
    {
        NonePanel obj();
        obj.Init( parent );
        return obj;
    }

    StatusPanel@ CreateStatusPanelHierarchy( GUIObject@ parent )
    {
        StatusPanel obj();
        CreateReplicationStatusHierarchy( obj );
        CreateTimepoutStatusHierarchy( obj );
        CreateQuestStatusHierarchy( obj );
        CreateScoresTitleHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ReplicationStatus@ CreateReplicationStatusHierarchy( GUIObject@ parent )
    {
        ReplicationStatus obj();
        CreateReplTitleHierarchy( obj );
        CreateReplMoneyNameHierarchy( obj );
        CreateReplMoneyValueHierarchy( obj );
        CreateReplCostNameHierarchy( obj );
        CreateReplCostcValueHierarchy( obj );
        CreateReplCountNameHierarchy( obj );
        CreateReplCountValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ReplTitle@ CreateReplTitleHierarchy( GUIObject@ parent )
    {
        ReplTitle obj();
        obj.Init( parent );
        return obj;
    }

    ReplMoneyName@ CreateReplMoneyNameHierarchy( GUIObject@ parent )
    {
        ReplMoneyName obj();
        obj.Init( parent );
        return obj;
    }

    ReplMoneyValue@ CreateReplMoneyValueHierarchy( GUIObject@ parent )
    {
        ReplMoneyValue obj();
        obj.Init( parent );
        return obj;
    }

    ReplCostName@ CreateReplCostNameHierarchy( GUIObject@ parent )
    {
        ReplCostName obj();
        obj.Init( parent );
        return obj;
    }

    ReplCostcValue@ CreateReplCostcValueHierarchy( GUIObject@ parent )
    {
        ReplCostcValue obj();
        obj.Init( parent );
        return obj;
    }

    ReplCountName@ CreateReplCountNameHierarchy( GUIObject@ parent )
    {
        ReplCountName obj();
        obj.Init( parent );
        return obj;
    }

    ReplCountValue@ CreateReplCountValueHierarchy( GUIObject@ parent )
    {
        ReplCountValue obj();
        obj.Init( parent );
        return obj;
    }

    TimepoutStatus@ CreateTimepoutStatusHierarchy( GUIObject@ parent )
    {
        TimepoutStatus obj();
        CreateTimeoutTitleHierarchy( obj );
        CreateTimeoutsGridHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TimeoutTitle@ CreateTimeoutTitleHierarchy( GUIObject@ parent )
    {
        TimeoutTitle obj();
        obj.Init( parent );
        return obj;
    }

    TimeoutsGrid@ CreateTimeoutsGridHierarchy( GUIObject@ parent )
    {
        TimeoutsGrid obj();
        CreateTimeoutsGridProtoHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TimeoutsGridProto@ CreateTimeoutsGridProtoHierarchy( GUIObject@ parent )
    {
        TimeoutsGridProto obj();
        CreateTimeoutNameHierarchy( obj );
        CreateTimeoutValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TimeoutName@ CreateTimeoutNameHierarchy( GUIObject@ parent )
    {
        TimeoutName obj();
        obj.Init( parent );
        return obj;
    }

    TimeoutValue@ CreateTimeoutValueHierarchy( GUIObject@ parent )
    {
        TimeoutValue obj();
        obj.Init( parent );
        return obj;
    }

    QuestStatus@ CreateQuestStatusHierarchy( GUIObject@ parent )
    {
        QuestStatus obj();
        CreateQuestTitleHierarchy( obj );
        CreateQuestGridHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    QuestTitle@ CreateQuestTitleHierarchy( GUIObject@ parent )
    {
        QuestTitle obj();
        obj.Init( parent );
        return obj;
    }

    QuestGrid@ CreateQuestGridHierarchy( GUIObject@ parent )
    {
        QuestGrid obj();
        CreateQuestCityNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    QuestCityName@ CreateQuestCityNameHierarchy( GUIObject@ parent )
    {
        QuestCityName obj();
        obj.Init( parent );
        return obj;
    }

    ScoresTitle@ CreateScoresTitleHierarchy( GUIObject@ parent )
    {
        ScoresTitle obj();
        obj.Init( parent );
        return obj;
    }

    AutoMapsGrid@ CreateAutoMapsGridHierarchy( GUIObject@ parent )
    {
        AutoMapsGrid obj();
        CreateAutoMapsTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    AutoMapsText@ CreateAutoMapsTextHierarchy( GUIObject@ parent )
    {
        AutoMapsText obj();
        obj.Init( parent );
        return obj;
    }

    ArchivesPanel@ CreateArchivesPanelHierarchy( GUIObject@ parent )
    {
        ArchivesPanel obj();
        CreateArchivesTitleHierarchy( obj );
        CreateArchivesGridHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ArchivesTitle@ CreateArchivesTitleHierarchy( GUIObject@ parent )
    {
        ArchivesTitle obj();
        obj.Init( parent );
        return obj;
    }

    ArchivesGrid@ CreateArchivesGridHierarchy( GUIObject@ parent )
    {
        ArchivesGrid obj();
        CreateArchivesTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ArchivesText@ CreateArchivesTextHierarchy( GUIObject@ parent )
    {
        ArchivesText obj();
        obj.Init( parent );
        return obj;
    }

    DescText@ CreateDescTextHierarchy( GUIObject@ parent )
    {
        DescText obj();
        obj.Init( parent );
        return obj;
    }

    DrawMapPanel@ CreateDrawMapPanelHierarchy( GUIObject@ parent )
    {
        DrawMapPanel obj();
        obj.Init( parent );
        return obj;
    }

    TimePanel@ CreateTimePanelHierarchy( GUIObject@ parent )
    {
        TimePanel obj();
        CreateDayTextHierarchy( obj );
        CreateMonthTextHierarchy( obj );
        CreateYearTextHierarchy( obj );
        CreateTimeTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DayText@ CreateDayTextHierarchy( GUIObject@ parent )
    {
        DayText obj();
        obj.Init( parent );
        return obj;
    }

    MonthText@ CreateMonthTextHierarchy( GUIObject@ parent )
    {
        MonthText obj();
        obj.Init( parent );
        return obj;
    }

    YearText@ CreateYearTextHierarchy( GUIObject@ parent )
    {
        YearText obj();
        obj.Init( parent );
        return obj;
    }

    TimeText@ CreateTimeTextHierarchy( GUIObject@ parent )
    {
        TimeText obj();
        obj.Init( parent );
        return obj;
    }

    ButtonsPanel@ CreateButtonsPanelHierarchy( GUIObject@ parent )
    {
        ButtonsPanel obj();
        CreateStatusButtonHierarchy( obj );
        CreateAutomapsButtonHierarchy( obj );
        CreateArchivesButtonHierarchy( obj );
        CreateClosButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    StatusButton@ CreateStatusButtonHierarchy( GUIObject@ parent )
    {
        StatusButton obj();
        obj.Init( parent );
        return obj;
    }

    AutomapsButton@ CreateAutomapsButtonHierarchy( GUIObject@ parent )
    {
        AutomapsButton obj();
        obj.Init( parent );
        return obj;
    }

    ArchivesButton@ CreateArchivesButtonHierarchy( GUIObject@ parent )
    {
        ArchivesButton obj();
        obj.Init( parent );
        return obj;
    }

    ClosButton@ CreateClosButtonHierarchy( GUIObject@ parent )
    {
        ClosButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreatePipBoyHierarchy( null );
    }
}

namespace FixBoy
{
    enum NumMenu
    {
        MenuList,
        MenuCraft,
        MenuDesc,
    }
    
    class CCraft
    {
        uint Id;
        int[] OutItems;
        bool IsCanCraft;
        
        CCraft( uint id, int[] items, bool isCanCraft )
        {
            Id         = id;
            OutItems   = items;
            IsCanCraft = isCanCraft;
        }
    }
    
    void SetPositionOnWhoileSize( GUIObject@ parent )
    {
        uint x = 0, y = 0;
        for( uint i = 0; i < parent.ChildCount; i++ )
        {
            GUIObject@ curObj = parent.GetChild( i );
            if( cast< GUIGrid >( curObj ) is null )
                SetPositionOnWhoileSize( curObj );
            if( i == 0 )
            {
                x = curObj.PosX;
                y = curObj.PosY;
                continue;
            }
            GUIObject@ preObj = parent.GetChild( i - 1 );
            int centerX = 0, centerY = 0, wholeWidth = 0, wholeHeight = 0;
            preObj.GetWholeSize( centerX, centerY, wholeWidth, wholeHeight, false );
            y += wholeHeight;
            curObj.SetPosition( curObj.PosX, y );
        }
    }
    
    void ChangeChildActive( GUIObject@ obj, string@ name )
    {
        for( uint i = 0; i < obj.ChildCount; i++ )
            obj.GetChild( i ).SetActive( false );
        if( name !is null )
            obj.Find( name ).SetActive( true );
    }

    class FixBoy : GUIScreen
    {
        NumMenu Menu;
        
        CCraft[] CraftList;
        CCraft@ CraftItem;
        int StrNum;
        
        int[] OutItems;
        int[] NeedResources;
        int[] NeedTools;
        int[] NeedParams;
        
        void SetMenu( NumMenu menu )
        {
            if( menu == Menu )
                return;
            Menu = menu;
            
            switch( Menu )
            {
                case FixBoy::NumMenu::MenuDesc:
                ChangeChildActive( Find( "Panel1" ), "MessageText" );
                break;
                
                case FixBoy::NumMenu::MenuList:
                ChangeChildActive( Find( "Panel1" ), "ShowCraftItemGrid" );
                break;
                
                case FixBoy::NumMenu::MenuCraft:
                ChangeChildActive( Find( "Panel1" ), "ShowCraftParamPanel" );
                SetPositionOnWhoileSize( Find( "ShowCraftParamPanel" ) );
                break;
                
                default:
                break;
            }
            
                    
        }

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/fixboy.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( params is null )
            {
                ServerRpc.Rpc_CraftItem( FIXBOY_LIST, 0, 0 );
                SetMenu( FixBoy::NumMenu::MenuDesc );
            }
            else
            {
                StrNum       = int( params[ "StrNum" ] );
                if( StrNum != 0 )
                {
                    SetMenu( FixBoy::NumMenu::MenuDesc );
                    return;
                }
                
                uint craftId = int( params[ "CraftId" ] );
                if( craftId == 0 )
                {
                    int[] data = array< int >( params[ "Data" ] );
                    CraftList.clear();
                    uint index = 0;
                    while( index + 5 < data.length() )
                    {
                        uint id         = data[ index++ ];
                        bool isCanCraft = data[ index++ ] == 1;
                        uint len        = data[ index++];
                        int[] outItems( len );
                        for( uint i = 0; i < len; i++ )
                            outItems[ i ] = data[ index++ ];
                        CraftList.insertLast( CCraft( id, outItems, isCanCraft ) );
                       
                    }
                    SetMenu( FixBoy::NumMenu::MenuList );
                }
                else
                {
                    uint index = 0;
                    int[] data = array< int >( params[ "Data" ] );
                    if( data.length() == 0 )
                        return;
                    
                    uint length = index + data[ index++ ];
                    NeedResources.clear();
                    while( index < length )
                        NeedResources.insertLast( data[ index++ ] );
                    
                    length = index + data[ index++ ];
                    NeedTools.clear();
                    while( index < length )
                        NeedTools.insertLast( data[ index++ ] );
                    
                    length = index + data[ index++ ];
                    NeedParams.clear();
                    while( index < length )
                        NeedParams.insertLast( data[ index++ ] );
                    
                    SetMenu( FixBoy::NumMenu::MenuCraft );
                }
            }
        }
    }

    class Panel1 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 85, 70 );
            SetSize( 340, 350 );
        }
    }

    class MessageText : GUIText
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetSize( 340, 350 );
            SetTextFlags( FT_CENTERX );
        }

        void OnActiveChanged() override
        {
            if( !Active )
            {
                SetText( "" );
                return;
            }
            auto fix = cast< FixBoy >( Screen );
            if( fix.StrNum == 0 )
                SetText( "" );
            else
                SetText( MSG_GAME( fix.StrNum ) );
        }
    }

    class ShowCraftItemGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetSize( 340, 350 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( "CraftItemName" );
            SetGridSize( 0 );
            SetColumns( 1 );
        }

        void OnShow( dictionary@ params ) override
        {
            CCraft[] @craft = cast< FixBoy >( Screen ).CraftList;
            ResizeGrid( craft.length() );
        }
    }

    class CraftItemName : GUIText
    {
        CCraft@ ItemCraft;

        void OnConstruct() override
        {
            SetSize( 340, 10 );
            SetTextFlags( FT_CENTERY );
        }

        void OnLMouseClick() override
        {
            @cast< FixBoy >( Screen ).CraftItem  = ItemCraft;
            ServerRpc.Rpc_CraftItem( FIXBOY_LIST, 0, 0 );
        }

        void OnHoverChanged() override
        {
            SetTextColor( IsHovered ? COLOR_GREEN : ItemCraft.IsCanCraft ? COLOR_TEXT : COLOR_RED );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            
            @ItemCraft = @cast< FixBoy >( Screen ).CraftList[ cellIndex ];
            int[] @outItems = ItemCraft.OutItems;
            
            uint i = 0;
            string result;
            while( i < outItems.length() )
            {
                if( i != 0 )
                    result += MSG_GAME( STR_AND );
                
                string text = MSG_GAME( STR_FIX_PIECES );
                string name = MSG_ITEM( ITEMSTR( outItems[ i++ ], 1 ) );
                text        = ReplaceText( text, "%NAME", name );
                text        = ReplaceText( text, "%COUNT", outItems[ i++ ] );
                result += text;
            }
            
            SetText( result );
            SetTextColor( ItemCraft.IsCanCraft ? COLOR_TEXT : COLOR_RED );
        }
    }

    class ShowCraftParamPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetSize( 340, 350 );
            SetCropContent( true );
            SetAutoScroll( true, false );
        }
    }

    class MainCraftItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 340, 110 );
        }
    }

    class TitleCraftItem : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 340, 10 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            int[] @outItems = cast< FixBoy >( Screen ).CraftItem.OutItems;
            uint i = 0;
            string result;
            
            while( i < outItems.length() )
            {
                if( i != 0 )
                    result += MSG_GAME( STR_AND );
                    
                string text = MSG_GAME( STR_FIX_PIECES );
                string name = MSG_ITEM( ITEMSTR( outItems[ i++ ], 1 ) );
                text        = ReplaceText( text, "%NAME", name );
                text        = ReplaceText( text, "%COUNT", outItems[ i++ ] );
                result += text;
            }
            SetText( result );
        }
    }

    class ImageCraftItemGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetCellPrototype( "ImageCraftItem" );
            SetGridSize( 0 );
            SetColumns( 8 );
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            int[] @outItems = cast< FixBoy >( Screen ).CraftItem.OutItems;
            ResizeGrid( outItems.length() / 2 );
        }
    }

    class ImageCraftItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 145, 10 );
            SetSize( 50, 50 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            int[] @outItems = cast< FixBoy >( Screen ).CraftItem.OutItems;
            const Item@ item = GetProtoItem( outItems[ 2 * cellIndex ] );
            if( item !is null )
                SetBackgroundImage( item.PicInv, IMAGE_LAYOUT_ZOOM );
        }
    }

    class DescCraftItem : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 0, 60 );
            SetSize( 340, 50 );
            SetTextFlags( FT_CENTERX );
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            auto fixBoy = cast< FixBoy >( Screen );
            string text = MSG_GAME( HASH( "CraftItem" ) + fixBoy.CraftItem.Id );
            int tw      = 0, th = 0, lines = 0;
            GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetSize( Width, th );
            SetText( text );
        }
    }

    class NeedParamsMain : GUIText
    {
        void ChangedTargetItem()
        {
            Critter@ chosen = GetChosen();
            if( chosen is null )
                return;
            auto fixBoy   = cast< FixBoy >( Screen );
            
            string result = MSG_GAME( STR_FIX_PARAMS ) + "\n";
            int[]@ needParams = cast< FixBoy >( Screen ).NeedParams;
            uint index = 0;
            while( index < needParams.length() )
            {
                CritterProperty prop = CritterProperty( needParams[ index++ ] );
                string text          = MSG_GAME( STR_FIX_YOUHAVE );
                text                 = ReplaceText( text, "%NAME", MSG_GAME( STR_PARAM_NAME( prop ) ) );
                text                 = ReplaceText( text, "%VALUE1", needParams[ index++ ] );
                text                 = ReplaceText( text, "%VALUE2", chosen.GetAsInt( prop ) );
                result += text + "\n";
            }
            int tw = 0, th = 0, lines = 0;
            GetTextInfo( result, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetText( result );
            SetSize( Width, th );
        }

        void OnConstruct() override
        {
            SetPosition( 0, 110 );
            SetSize( 340, 15 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }
    }

    class NeedToolsMain : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 125 );
            SetSize( 340, 65 );
        }
    }

    class NeedToolsName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 340, 15 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            int[]@ needTools = cast< FixBoy >( Screen ).NeedTools;
            string text = MSG_GAME( STR_FIX_TOOLS ) +"\n";
            uint index  = 0;
            while( index < needTools.length() )
            {
                if( index != 0 )
                    text += needTools[ index + 2 ] == 1 ? "или " : "и ";
                text += MSG_ITEM( ITEMSTR( needTools[ index ], 1 ) );
                text += ", " + needTools[ index + 1 ] + "\n";
                index += 3;
            }
            int tw = 0, th = 0, lines = 0;
            GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetText( text );
            SetSize( Width, th );
        }
    }

    class NeedToolsImage : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 0, 15 );
            SetSize( 340, 50 );
            SetCellPrototype( "ToolImage" );
            SetColumns( 8 );
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            ResizeGrid( cast< FixBoy >( Screen ).NeedTools.length() / 3 );
                
            int centerX = 0, centerY = 0, wholeWidth = 0, wholeHeight = 0;
            GetWholeSize( centerX, centerY, wholeWidth, wholeHeight, true );
            uint scroll = ( Parent.Width - wholeWidth ) / 2;
            SetPosition( scroll, PosY );
        }
    }

    class ToolImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 50, 50 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            hash pid = cast< FixBoy >( Screen ).NeedTools[ 3 * cellIndex ];
            const Item@ item = GetProtoItem( pid ); 
            if( item !is null )
                SetBackgroundImage( item.PicInv, IMAGE_LAYOUT_ZOOM );
        }
    }

    class NeedItemsMain : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 190 );
            SetSize( 340, 65 );
        }
    }

    class NeedItemsName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 340, 15 );
            SetText( MSG_GAME( STR_FIX_ITEMS ) );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            string text = MSG_GAME( STR_FIX_TOOLS ) +"\n";
            int[]@ needTools = @cast< FixBoy >( Screen ).NeedResources;
            uint index = 0;
            while( index < needTools.length() )
            {
                if( index != 0 )
                    text += needTools[ index + 2 ] == 1 ? "или " : "и ";
                text += MSG_ITEM( ITEMSTR( needTools[ index ], 1 ) );
                text += ", " + needTools[ index + 1 ] + "\n";
                index += 3;
            }
            int tw = 0, th = 0, lines = 0;
            GetTextInfo( text, Width, 1000, TextFont, TextFlags, tw, th, lines );
            SetText( text );
            SetSize( Width, th + 5 );
        }
    }

    class NeedItemsImage : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 0, 15 );
            SetSize( 340, 50 );
            SetCellPrototype( "NeedItemImage" );
            SetColumns( 8 );
        }

        void OnActiveChanged() override
        {
            if( !Active )
                return;
            
            ResizeGrid( cast< FixBoy >( Screen ).NeedResources.length() / 3 );
            int centerX = 0, centerY = 0, wholeWidth = 0, wholeHeight = 0;   
            GetWholeSize( centerX, centerY, wholeWidth, wholeHeight, true );
            uint scroll = ( Parent.Width - wholeWidth ) / 2;
            SetPosition( scroll, PosY );
        }
    }

    class NeedItemImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 50, 50 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            hash pid = cast< FixBoy >( Screen ).NeedResources[ 3 * cellIndex ];
            const Item@ item = GetProtoItem( pid ); 
            if( item !is null )
                SetBackgroundImage( item.PicInv, IMAGE_LAYOUT_ZOOM );
        }
    }

    class ListDecButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 477, 154 );
            SetSize( 35, 35 );
            SetPressedImage( "art/intrface/fixboy_scrup.png" );
        }

        void OnLMouseClick() override
        {
            GUIPanel@ panel;
            auto fix = cast< FixBoy >( Screen );
            if( fix.Menu == FixBoy::NumMenu::MenuList )
                @panel = Screen.FindPanel( "ShowCraftItemGrid" );
            else if( fix.Menu == FixBoy::NumMenu::MenuCraft )
                @panel = Screen.FindPanel( "ShowCraftParamPanel" );
            else
                return;
            
            panel.ModifyScroll( -10, 0 );
        }
    }

    class LictIncButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 477, 192 );
            SetSize( 35, 37 );
            SetPressedImage( "art/intrface/fixboy_scrdn.png" );
        }

        void OnLMouseClick() override
        {
            GUIPanel@ panel;
            auto fix = cast< FixBoy >( Screen );
            if( fix.Menu == FixBoy::NumMenu::MenuList )
                @panel = Screen.FindPanel( "ShowCraftItemGrid" );
            else if( fix.Menu == FixBoy::NumMenu::MenuCraft )
                @panel = Screen.FindPanel( "ShowCraftParamPanel" );
            else 
                return;
            
            panel.ModifyScroll( 10, 0 );
        }
    }

    class FixButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 546, 169 );
            SetSize( 62, 47 );
            SetPressedImage( "art/intrface/fixboy_fix.png" );
            SetDisabledImage( "art/intrface/fixboy_fix.png" );
        }

        void OnDraw() override
        {
            auto fix = cast< FixBoy >( Screen );
            SetCondition( fix.Menu == FixBoy::NumMenu::MenuCraft );
        }

        void OnLMouseClick() override
        {
            auto fix = cast< FixBoy >( Screen );
            ServerRpc.Rpc_CraftItem( FIXBOY_LIST, 0, 0 );
        }
    }

    class DoneButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 501, 398 );
            SetSize( 82, 46 );
            SetPressedImage( "art/intrface/fixboy_done.png" );
        }

        void OnLMouseClick() override
        {
            auto fixBoy = cast< FixBoy >( Screen );
            if( fixBoy.Menu == FixBoy::NumMenu::MenuList )
                HideScreen();
            else
                fixBoy.SetMenu( FixBoy::NumMenu::MenuList );
        }
    }

    FixBoy@ CreateFixBoyHierarchy( GUIObject@ parent )
    {
        FixBoy obj();
        CreatePanel1Hierarchy( obj );
        CreateListDecButtonHierarchy( obj );
        CreateLictIncButtonHierarchy( obj );
        CreateFixButtonHierarchy( obj );
        CreateDoneButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Panel1@ CreatePanel1Hierarchy( GUIObject@ parent )
    {
        Panel1 obj();
        CreateMessageTextHierarchy( obj );
        CreateShowCraftItemGridHierarchy( obj );
        CreateShowCraftParamPanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MessageText@ CreateMessageTextHierarchy( GUIObject@ parent )
    {
        MessageText obj();
        obj.Init( parent );
        return obj;
    }

    ShowCraftItemGrid@ CreateShowCraftItemGridHierarchy( GUIObject@ parent )
    {
        ShowCraftItemGrid obj();
        CreateCraftItemNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CraftItemName@ CreateCraftItemNameHierarchy( GUIObject@ parent )
    {
        CraftItemName obj();
        obj.Init( parent );
        return obj;
    }

    ShowCraftParamPanel@ CreateShowCraftParamPanelHierarchy( GUIObject@ parent )
    {
        ShowCraftParamPanel obj();
        CreateMainCraftItemHierarchy( obj );
        CreateNeedParamsMainHierarchy( obj );
        CreateNeedToolsMainHierarchy( obj );
        CreateNeedItemsMainHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MainCraftItem@ CreateMainCraftItemHierarchy( GUIObject@ parent )
    {
        MainCraftItem obj();
        CreateTitleCraftItemHierarchy( obj );
        CreateImageCraftItemGridHierarchy( obj );
        CreateDescCraftItemHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TitleCraftItem@ CreateTitleCraftItemHierarchy( GUIObject@ parent )
    {
        TitleCraftItem obj();
        obj.Init( parent );
        return obj;
    }

    ImageCraftItemGrid@ CreateImageCraftItemGridHierarchy( GUIObject@ parent )
    {
        ImageCraftItemGrid obj();
        CreateImageCraftItemHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ImageCraftItem@ CreateImageCraftItemHierarchy( GUIObject@ parent )
    {
        ImageCraftItem obj();
        obj.Init( parent );
        return obj;
    }

    DescCraftItem@ CreateDescCraftItemHierarchy( GUIObject@ parent )
    {
        DescCraftItem obj();
        obj.Init( parent );
        return obj;
    }

    NeedParamsMain@ CreateNeedParamsMainHierarchy( GUIObject@ parent )
    {
        NeedParamsMain obj();
        obj.Init( parent );
        return obj;
    }

    NeedToolsMain@ CreateNeedToolsMainHierarchy( GUIObject@ parent )
    {
        NeedToolsMain obj();
        CreateNeedToolsNameHierarchy( obj );
        CreateNeedToolsImageHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    NeedToolsName@ CreateNeedToolsNameHierarchy( GUIObject@ parent )
    {
        NeedToolsName obj();
        obj.Init( parent );
        return obj;
    }

    NeedToolsImage@ CreateNeedToolsImageHierarchy( GUIObject@ parent )
    {
        NeedToolsImage obj();
        CreateToolImageHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ToolImage@ CreateToolImageHierarchy( GUIObject@ parent )
    {
        ToolImage obj();
        obj.Init( parent );
        return obj;
    }

    NeedItemsMain@ CreateNeedItemsMainHierarchy( GUIObject@ parent )
    {
        NeedItemsMain obj();
        CreateNeedItemsNameHierarchy( obj );
        CreateNeedItemsImageHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    NeedItemsName@ CreateNeedItemsNameHierarchy( GUIObject@ parent )
    {
        NeedItemsName obj();
        obj.Init( parent );
        return obj;
    }

    NeedItemsImage@ CreateNeedItemsImageHierarchy( GUIObject@ parent )
    {
        NeedItemsImage obj();
        CreateNeedItemImageHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    NeedItemImage@ CreateNeedItemImageHierarchy( GUIObject@ parent )
    {
        NeedItemImage obj();
        obj.Init( parent );
        return obj;
    }

    ListDecButton@ CreateListDecButtonHierarchy( GUIObject@ parent )
    {
        ListDecButton obj();
        obj.Init( parent );
        return obj;
    }

    LictIncButton@ CreateLictIncButtonHierarchy( GUIObject@ parent )
    {
        LictIncButton obj();
        obj.Init( parent );
        return obj;
    }

    FixButton@ CreateFixButtonHierarchy( GUIObject@ parent )
    {
        FixButton obj();
        obj.Init( parent );
        return obj;
    }

    DoneButton@ CreateDoneButtonHierarchy( GUIObject@ parent )
    {
        DoneButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateFixBoyHierarchy( null );
    }
}

namespace Menu
{
    class Screen : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 164, 144 );
        }
    }

    class Multiplayer : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 164, 144 );
            SetBackgroundImage( "art/intrface/options_multiplayer.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetActive( !__Singleplayer );
        }
    }

    class Options : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 18 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_OPTIONS );
        }
    }

    class Text6 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 16 );
            SetText( MSG_GAME( STR_MENUOPT_OPTIONS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Exit : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 54 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "NetDisconnect" );
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 16 );
            SetText( MSG_GAME( STR_MENUOPT_EXIT ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Resume : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 90 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 16 );
            SetText( MSG_GAME( STR_MENUOPT_RESUME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Singleplayer : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetSize( 164, 217 );
            SetBackgroundImage( "art/intrface/options_singleplayer.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetActive( __Singleplayer );
        }
    }

    class SaveGame : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 18 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SaveGame" );
        }
    }

    class Text1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 16 );
            SetText( MSG_GAME( STR_MENUOPT_SAVEGAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class LoadGame : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 54 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "LoadGame" );
        }
    }

    class Text2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 16 );
            SetText( MSG_GAME( STR_MENUOPT_LOADGAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Options2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 90 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            Message( MSG_GAME( STR_OPTIONS_NOT_AVIABLE ) );
        }
    }

    class Text3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 16 );
            SetText( MSG_GAME( STR_MENUOPT_OPTIONS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Exit2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 126 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "NetDisconnect" );
        }
    }

    class Text4 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 16 );
            SetText( MSG_GAME( STR_MENUOPT_EXIT ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Resume2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 162 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class Text5 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 16 );
            SetText( MSG_GAME( STR_MENUOPT_RESUME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    Screen@ CreateScreenHierarchy( GUIObject@ parent )
    {
        Screen obj();
        CreateMultiplayerHierarchy( obj );
        CreateSingleplayerHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Multiplayer@ CreateMultiplayerHierarchy( GUIObject@ parent )
    {
        Multiplayer obj();
        CreateOptionsHierarchy( obj );
        CreateExitHierarchy( obj );
        CreateResumeHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Options@ CreateOptionsHierarchy( GUIObject@ parent )
    {
        Options obj();
        CreateText6Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text6@ CreateText6Hierarchy( GUIObject@ parent )
    {
        Text6 obj();
        obj.Init( parent );
        return obj;
    }

    Exit@ CreateExitHierarchy( GUIObject@ parent )
    {
        Exit obj();
        CreateText7Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text7@ CreateText7Hierarchy( GUIObject@ parent )
    {
        Text7 obj();
        obj.Init( parent );
        return obj;
    }

    Resume@ CreateResumeHierarchy( GUIObject@ parent )
    {
        Resume obj();
        CreateText8Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text8@ CreateText8Hierarchy( GUIObject@ parent )
    {
        Text8 obj();
        obj.Init( parent );
        return obj;
    }

    Singleplayer@ CreateSingleplayerHierarchy( GUIObject@ parent )
    {
        Singleplayer obj();
        CreateSaveGameHierarchy( obj );
        CreateLoadGameHierarchy( obj );
        CreateOptions2Hierarchy( obj );
        CreateExit2Hierarchy( obj );
        CreateResume2Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    SaveGame@ CreateSaveGameHierarchy( GUIObject@ parent )
    {
        SaveGame obj();
        CreateText1Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text1@ CreateText1Hierarchy( GUIObject@ parent )
    {
        Text1 obj();
        obj.Init( parent );
        return obj;
    }

    LoadGame@ CreateLoadGameHierarchy( GUIObject@ parent )
    {
        LoadGame obj();
        CreateText2Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text2@ CreateText2Hierarchy( GUIObject@ parent )
    {
        Text2 obj();
        obj.Init( parent );
        return obj;
    }

    Options2@ CreateOptions2Hierarchy( GUIObject@ parent )
    {
        Options2 obj();
        CreateText3Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text3@ CreateText3Hierarchy( GUIObject@ parent )
    {
        Text3 obj();
        obj.Init( parent );
        return obj;
    }

    Exit2@ CreateExit2Hierarchy( GUIObject@ parent )
    {
        Exit2 obj();
        CreateText4Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text4@ CreateText4Hierarchy( GUIObject@ parent )
    {
        Text4 obj();
        obj.Init( parent );
        return obj;
    }

    Resume2@ CreateResume2Hierarchy( GUIObject@ parent )
    {
        Resume2 obj();
        CreateText5Hierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Text5@ CreateText5Hierarchy( GUIObject@ parent )
    {
        Text5 obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateScreenHierarchy( null );
    }
}

namespace Aim
{
    import int to_hit( const Critter& chosen, const Critter& target, const Item& weapon, uint8 weaponMode ) from "ClientMain";

    class Aim : GUIScreen
    {
        int TargetCritterId;
        
        string GetChance( int loc )
        {
            Critter@ chosen = GetChosen();
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr is null )
                return "";
            const Item@ item = chosen.GetSlotItem( SLOT_HAND1 );
            uint8 mode = item.Mode;
            uint8 use  = _WeaponModeUse( mode );
            uint8 aim  = _WeaponModeAim( mode );
            mode       = _WeaponModeMake( use, loc );
            int hit    = to_hit( chosen, cr, item, mode );
            return hit = = 0 ? "-" : "" + hit;
        }
        
        void OnHitLocationSelect( uint loc )
        {
            HideScreen();
            Critter@ chosen = GetChosen();
            uint targetCritterId = cast< Aim >( Screen ).TargetCritterId;
            const Item@ item = chosen.GetSlotItem( SLOT_HAND1 );
            uint8 use  = item.Mode & 0xF;
            uint8 mode = use | ( loc << 4 );
            SetChosenActions( array< uint > = { CHOSEN_USE_ITEM, item.Id, item.ProtoId, TARGET_CRITTER, targetCritterId, mode, 0 } );
        }  

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 504, 309 );
            SetBackgroundImage( "art/intrface/Aim.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( params !is null )
                TargetCritterId = uint( params[ "TargetCritterId" ] );
        }
    }

    class ViewTargetPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 170, 31 );
            SetSize( 170, 225 );
            SetBackgroundImage( "art/intrface/AimMan.png" );
        }

        void OnDraw() override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr is null )
                HideScreen();
            string name = GetHashStr( cr.ModelName ) + "na.frm";
            SetBackgroundImage( name );
        }
    }

    class ChanceHead : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 31, 34 );
            SetSize( 20, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HIT_LOCATION_HEAD );
        }
    }

    class ChanceHeadName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 40, -3 );
            SetSize( 80, 15 );
            SetTextFlags( FT_CENTERY );
        }

        void OnShow( dictionary@ params ) override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = GetMsgStr( TEXTMSG_COMBAT, 1000 + cr.CrTypeAlias * 10 + HIT_LOCATION_HEAD - 1 );
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HIT_LOCATION_HEAD );
        }
    }

    class ChanceEyes : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 31, 101 );
            SetSize( 20, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HIT_LOCATION_EYES );
        }
    }

    class ChanceEyesName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 40, -4 );
            SetSize( 80, 15 );
            SetTextFlags( FT_CENTERY );
        }

        void OnShow( dictionary@ params ) override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = GetMsgStr( TEXTMSG_COMBAT, 1000 + cr.CrTypeAlias * 10 + HIT_LOCATION_EYES - 1 );
            
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HIT_LOCATION_EYES );
        }
    }

    class ChanceRightArm : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 31, 164 );
            SetSize( 20, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HIT_LOCATION_RIGHT_ARM );
        }
    }

    class ChanceRightArmName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 40, -4 );
            SetSize( 80, 15 );
            SetTextFlags( FT_CENTERY );
        }

        void OnShow( dictionary@ params ) override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = GetMsgStr( TEXTMSG_COMBAT, 1000 + cr.CrTypeAlias * 10 + HIT_LOCATION_RIGHT_ARM - 1 );
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HIT_LOCATION_RIGHT_ARM );
        }
    }

    class ChanceRigthLeg : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 31, 230 );
            SetSize( 20, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HIT_LOCATION_RIGHT_LEG );
        }
    }

    class ChanceRigihthLegName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 40, -5 );
            SetSize( 80, 15 );
            SetTextFlags( FT_CENTERY );
        }

        void OnShow( dictionary@ params ) override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = GetMsgStr( TEXTMSG_COMBAT, 1000 + cr.CrTypeAlias * 10 + HIT_LOCATION_RIGHT_LEG - 1 );
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HIT_LOCATION_RIGHT_LEG );
        }
    }

    class ChanceTorse : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 453, 34 );
            SetSize( 20, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HIT_LOCATION_TORSO );
        }
    }

    class ChanceTorsoName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -100, -3 );
            SetSize( 80, 15 );
            SetTextFlags( FT_CENTERY | FT_CENTERR );
        }

        void OnShow( dictionary@ params ) override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = GetMsgStr( TEXTMSG_COMBAT, 1000 + cr.CrTypeAlias * 10 + HIT_LOCATION_TORSO - 1 );
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HIT_LOCATION_TORSO );
        }
    }

    class ChanceGroin : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 453, 101 );
            SetSize( 20, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HIT_LOCATION_GROIN );
        }
    }

    class ChanceGroinName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -100, -4 );
            SetSize( 80, 15 );
            SetTextFlags( FT_CENTERY | FT_CENTERR );
        }

        void OnShow( dictionary@ params ) override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = GetMsgStr( TEXTMSG_COMBAT, 1000 + cr.CrTypeAlias * 10 + HIT_LOCATION_GROIN - 1 );
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HIT_LOCATION_GROIN );
        }
    }

    class ChanceLeftArm : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 453, 165 );
            SetSize( 20, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HIT_LOCATION_LEFT_ARM );
        }
    }

    class ChanceLeftArmName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -100, -5 );
            SetSize( 80, 15 );
            SetTextFlags( FT_CENTERY | FT_CENTERR );
        }

        void OnShow( dictionary@ params ) override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = GetMsgStr( TEXTMSG_COMBAT, 1000 + cr.CrTypeAlias * 10 + HIT_LOCATION_LEFT_ARM - 1 );
            
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HIT_LOCATION_LEFT_ARM );
        }
    }

    class ChnaceLeftLeg : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 453, 230 );
            SetSize( 20, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return cast< Aim >( Screen ).GetChance( HIT_LOCATION_LEFT_LEG );
        }
    }

    class ChanceLeftLegName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -100, -5 );
            SetSize( 80, 15 );
            SetTextFlags( FT_CENTERR | FT_BOTTOM );
        }

        void OnShow( dictionary@ params ) override
        {
            Critter@ cr = GetCritter( cast< Aim >( Screen ).TargetCritterId );
            if( cr !is null )
                Text = GetMsgStr( TEXTMSG_COMBAT, 1000 + cr.CrTypeAlias * 10 + HIT_LOCATION_LEFT_LEG - 1 );
        }

        void OnDraw() override
        {
            SetTextColor( IsPressed ? COLOR_RED : COLOR_TEXT ); 
        }

        void OnLMouseClick() override
        {
            cast< Aim >( Screen ).OnHitLocationSelect( HIT_LOCATION_LEFT_LEG );
        }
    }

    class CloseButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 209, 268 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    Aim@ CreateAimHierarchy( GUIObject@ parent )
    {
        Aim obj();
        CreateViewTargetPanelHierarchy( obj );
        CreateChanceHeadHierarchy( obj );
        CreateChanceEyesHierarchy( obj );
        CreateChanceRightArmHierarchy( obj );
        CreateChanceRigthLegHierarchy( obj );
        CreateChanceTorseHierarchy( obj );
        CreateChanceGroinHierarchy( obj );
        CreateChanceLeftArmHierarchy( obj );
        CreateChnaceLeftLegHierarchy( obj );
        CreateCloseButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ViewTargetPanel@ CreateViewTargetPanelHierarchy( GUIObject@ parent )
    {
        ViewTargetPanel obj();
        obj.Init( parent );
        return obj;
    }

    ChanceHead@ CreateChanceHeadHierarchy( GUIObject@ parent )
    {
        ChanceHead obj();
        CreateChanceHeadNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChanceHeadName@ CreateChanceHeadNameHierarchy( GUIObject@ parent )
    {
        ChanceHeadName obj();
        obj.Init( parent );
        return obj;
    }

    ChanceEyes@ CreateChanceEyesHierarchy( GUIObject@ parent )
    {
        ChanceEyes obj();
        CreateChanceEyesNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChanceEyesName@ CreateChanceEyesNameHierarchy( GUIObject@ parent )
    {
        ChanceEyesName obj();
        obj.Init( parent );
        return obj;
    }

    ChanceRightArm@ CreateChanceRightArmHierarchy( GUIObject@ parent )
    {
        ChanceRightArm obj();
        CreateChanceRightArmNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChanceRightArmName@ CreateChanceRightArmNameHierarchy( GUIObject@ parent )
    {
        ChanceRightArmName obj();
        obj.Init( parent );
        return obj;
    }

    ChanceRigthLeg@ CreateChanceRigthLegHierarchy( GUIObject@ parent )
    {
        ChanceRigthLeg obj();
        CreateChanceRigihthLegNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChanceRigihthLegName@ CreateChanceRigihthLegNameHierarchy( GUIObject@ parent )
    {
        ChanceRigihthLegName obj();
        obj.Init( parent );
        return obj;
    }

    ChanceTorse@ CreateChanceTorseHierarchy( GUIObject@ parent )
    {
        ChanceTorse obj();
        CreateChanceTorsoNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChanceTorsoName@ CreateChanceTorsoNameHierarchy( GUIObject@ parent )
    {
        ChanceTorsoName obj();
        obj.Init( parent );
        return obj;
    }

    ChanceGroin@ CreateChanceGroinHierarchy( GUIObject@ parent )
    {
        ChanceGroin obj();
        CreateChanceGroinNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChanceGroinName@ CreateChanceGroinNameHierarchy( GUIObject@ parent )
    {
        ChanceGroinName obj();
        obj.Init( parent );
        return obj;
    }

    ChanceLeftArm@ CreateChanceLeftArmHierarchy( GUIObject@ parent )
    {
        ChanceLeftArm obj();
        CreateChanceLeftArmNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChanceLeftArmName@ CreateChanceLeftArmNameHierarchy( GUIObject@ parent )
    {
        ChanceLeftArmName obj();
        obj.Init( parent );
        return obj;
    }

    ChnaceLeftLeg@ CreateChnaceLeftLegHierarchy( GUIObject@ parent )
    {
        ChnaceLeftLeg obj();
        CreateChanceLeftLegNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ChanceLeftLegName@ CreateChanceLeftLegNameHierarchy( GUIObject@ parent )
    {
        ChanceLeftLegName obj();
        obj.Init( parent );
        return obj;
    }

    CloseButton@ CreateCloseButtonHierarchy( GUIObject@ parent )
    {
        CloseButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateAimHierarchy( null );
    }
}

namespace Split
{
    class Split : GUIScreen
    {
        uint TargetItemId;
        uint SplitCount;
        int ItemsCollection;
        
        Item@ GetTargetItem()
        {
            Item@[]@ items = RefreshItemsCollection( ItemsCollection );
            for( uint i = 0; i < items.length(); i++ )
                if( items[ i ].Id == TargetItemId )
                    return items[ i ];
            return null;
        }

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 259, 162 );
            SetBackgroundImage( "art/intrface/MOVEMULT.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SplitCount      = 1;
            TargetItemId    = uint( params[ "TargetItemId" ] );
            ItemsCollection = int( params[ "ItemsCollection" ] );
        }

        void OnGlobalInput( uint8 key, string@ text ) override
        {
            int result = 0;
            uint count = 0;
            if( StrToInt( text, result ) )
            {
                count = SplitCount * 10;
                count += result;
                if( count > 99999 )
                    count = count % 100000;
                SplitCount = count;
            }
        }
    }

    class MainName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 259, 35 );
            SetText( MSG_GAME( STR_SPLIT_TITLE ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class ViewItemPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 17, 46 );
            SetSize( 90, 65 );
        }

        void OnInit() override
        {
            Preview::CreateHierarchy( this );
        }

        void OnShow( dictionary@ params ) override
        {
            Split@ split = cast< Split >( Screen );
            auto@ preview = cast< Preview::Preview >( GetChild( 0 ) );
            preview.PreviewItemId = split.TargetItemId;
            preview.ItemInInv     = true;
        }
    }

    class CountText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 123, 44 );
            SetSize( 80, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            Split@ split = cast< Split >( Screen );
            int count = split.SplitCount;
            string result;
            if( count >= 10000 )
                return "" + count;
            else if( count >= 1000 )
                return "0" + count;
            else if( count >= 100 )
                return "00" + count;
            else if( count >= 10 )
                return "000" + count;
            else
                return "0000" + count;
        }
    }

    class IncCountButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 201, 45 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/slider_inc.png" );
        }

        void OnLMousePressed() override
        {
            Split@ split = cast< Split >( Screen );
            if( split.SplitCount < 999999 )
                split.SplitCount++;
        }
    }

    class DecCountButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 201, 56 );
            SetSize( 17, 12 );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            Split@ split = cast< Split >( Screen );
            if( split.SplitCount > 1 )
                split.SplitCount--;
        }
    }

    class MaxCountButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 128, 79 );
            SetSize( 86, 33 );
            SetPressedImage( "art/intrface/SKLDXON.png" );
        }

        void OnLMouseClick() override
        {
            Split@ split = cast< Split >( Screen );
            Item@ item = split.GetTargetItem();
            if( item !is null )
                split.SplitCount = item.Count;
        }
    }

    class MaxCountName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 86, 33 );
            SetNotHittable( true );
            SetText( MSG_GAME( STR_SPLIT_ALL ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class DoneButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 129 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Split@ split = cast< Split >( Screen );
            Item@ item = split.GetTargetItem();
            if( item !is null )
            {
                if( split.SplitCount > item.Count )
                {
                    split.SplitCount = item.Count;
                    return;
                }
                
                if( split.ItemsCollection == ITEMS_CHOSEN_ALL )
                {
                    SetChosenActions( array< uint > = { CHOSEN_MOVE_ITEM, item.Id, split.SplitCount, SLOT_GROUND, 0, 0, 0 } );
                }
                else if( split.ItemsCollection == ITEMS_PICKUP || split.ItemsCollection == ITEMS_PICKUP_FROM )
                {
                    SetChosenActions( array< uint > = { CHOSEN_MOVE_ITEM_CONT, item.Id, split.ItemsCollection, split.SplitCount, 0, 0, 0 } );
                }
                else if( split.ItemsCollection == ITEMS_BARTER || split.ItemsCollection == ITEMS_BARTER_OFFER ||
                    split.ItemsCollection == ITEMS_BARTER_OPPONENT || split.ItemsCollection == ITEMS_BARTER_OPPONENT_OFFER )
                {
                    CustomCall( "BarterMoveItem " + split.TargetItemId + " " + split.ItemsCollection + " " + split.SplitCount );
                }
            }
            HideScreen();
        }
    }

    class CancelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 149, 127 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    Split@ CreateSplitHierarchy( GUIObject@ parent )
    {
        Split obj();
        CreateMainNameHierarchy( obj );
        CreateViewItemPanelHierarchy( obj );
        CreateCountTextHierarchy( obj );
        CreateIncCountButtonHierarchy( obj );
        CreateDecCountButtonHierarchy( obj );
        CreateMaxCountButtonHierarchy( obj );
        CreateDoneButtonHierarchy( obj );
        CreateCancelButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MainName@ CreateMainNameHierarchy( GUIObject@ parent )
    {
        MainName obj();
        obj.Init( parent );
        return obj;
    }

    ViewItemPanel@ CreateViewItemPanelHierarchy( GUIObject@ parent )
    {
        ViewItemPanel obj();
        obj.Init( parent );
        return obj;
    }

    CountText@ CreateCountTextHierarchy( GUIObject@ parent )
    {
        CountText obj();
        obj.Init( parent );
        return obj;
    }

    IncCountButton@ CreateIncCountButtonHierarchy( GUIObject@ parent )
    {
        IncCountButton obj();
        obj.Init( parent );
        return obj;
    }

    DecCountButton@ CreateDecCountButtonHierarchy( GUIObject@ parent )
    {
        DecCountButton obj();
        obj.Init( parent );
        return obj;
    }

    MaxCountButton@ CreateMaxCountButtonHierarchy( GUIObject@ parent )
    {
        MaxCountButton obj();
        CreateMaxCountNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MaxCountName@ CreateMaxCountNameHierarchy( GUIObject@ parent )
    {
        MaxCountName obj();
        obj.Init( parent );
        return obj;
    }

    DoneButton@ CreateDoneButtonHierarchy( GUIObject@ parent )
    {
        DoneButton obj();
        obj.Init( parent );
        return obj;
    }

    CancelButton@ CreateCancelButtonHierarchy( GUIObject@ parent )
    {
        CancelButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateSplitHierarchy( null );
    }
}

namespace Timer
{
    class Timer : GUIScreen
    {
        uint Time;
        uint TargetItemId;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 259, 162 );
            SetBackgroundImage( "art/intrface/MOVEMULT.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            Time         = 1;
            TargetItemId = 0;
            TargetItemId = uint( params[ "TargetItemId" ] );
        }
    }

    class ViewItemPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 16, 43 );
            SetSize( 90, 65 );
        }

        void OnInit() override
        {
            Preview::CreateHierarchy( this );
        }

        void OnShow( dictionary@ params ) override
        {
            Timer@ timer = cast< Timer >( Screen );
            auto@ preview = cast< Preview::Preview >( GetChild( 0 ) );
            preview.PreviewItemId = timer.TargetItemId;
            preview.ItemInInv     = true;
        }
    }

    class TimerPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 116, 36 );
            SetSize( 105, 81 );
            SetBackgroundImage( "art/intrface/timer.png" );
        }
    }

    class MinuteText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 20, 30 );
            SetSize( 16, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            Timer@ timer = cast< Timer >( Screen );
            return "" + ( timer.Time / 60 );
        }
    }

    class SecondText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 49, 30 );
            SetSize( 32, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            Timer@ timer = cast< Timer >( Screen );
            int val = timer.Time % 60;
            return val < 10 ? "0" + val : "" + val;
        }
    }

    class IncButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 82, 29 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/plus_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            Timer@ timer = cast< Timer >( Screen );
            if( timer.Time < 599 )
                timer.Time++;
        }
    }

    class DecButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 81, 41 );
            SetSize( 17, 12 );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            Timer@ timer = cast< Timer >( Screen );
            if( timer.Time > 1 )
                timer.Time--;
        }
    }

    class DoneButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 99, 129 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            Timer@ timer = cast< Timer >( Screen );
            Item@ item = GetItem( timer.TargetItemId );
            if( item !is null )
                SetChosenActions( array< uint > = { CHOSEN_USE_ITEM, item.Id, 0, TARGET_SELF, 0, ITEM_MODE_USE, timer.Time } );
            
            HideScreen();
        }
    }

    class CancelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 149, 128 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    Timer@ CreateTimerHierarchy( GUIObject@ parent )
    {
        Timer obj();
        CreateViewItemPanelHierarchy( obj );
        CreateTimerPanelHierarchy( obj );
        CreateDoneButtonHierarchy( obj );
        CreateCancelButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ViewItemPanel@ CreateViewItemPanelHierarchy( GUIObject@ parent )
    {
        ViewItemPanel obj();
        obj.Init( parent );
        return obj;
    }

    TimerPanel@ CreateTimerPanelHierarchy( GUIObject@ parent )
    {
        TimerPanel obj();
        CreateMinuteTextHierarchy( obj );
        CreateSecondTextHierarchy( obj );
        CreateIncButtonHierarchy( obj );
        CreateDecButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MinuteText@ CreateMinuteTextHierarchy( GUIObject@ parent )
    {
        MinuteText obj();
        obj.Init( parent );
        return obj;
    }

    SecondText@ CreateSecondTextHierarchy( GUIObject@ parent )
    {
        SecondText obj();
        obj.Init( parent );
        return obj;
    }

    IncButton@ CreateIncButtonHierarchy( GUIObject@ parent )
    {
        IncButton obj();
        obj.Init( parent );
        return obj;
    }

    DecButton@ CreateDecButtonHierarchy( GUIObject@ parent )
    {
        DecButton obj();
        obj.Init( parent );
        return obj;
    }

    DoneButton@ CreateDoneButtonHierarchy( GUIObject@ parent )
    {
        DoneButton obj();
        obj.Init( parent );
        return obj;
    }

    CancelButton@ CreateCancelButtonHierarchy( GUIObject@ parent )
    {
        CancelButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateTimerHierarchy( null );
    }
}

namespace DialogBox
{
    #define DIALOGBOX_NONE             ( 0 )
    #define DIALOGBOX_FOLLOW           ( 1 )
    #define DIALOGBOX_BARTER           ( 2 )
    #define DIALOGBOX_ENCOUNTER_ANY    ( 3 )
    #define DIALOGBOX_ENCOUNTER_RT     ( 4 )
    #define DIALOGBOX_ENCOUNTER_TB     ( 5 )
    #define DIALOGBOX_MANUAL           ( 6 )

    class DialogBox : GUIScreen
    {
        uint BaseHeight;
        uint DialogID;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 302, 99 );
            SetBackgroundImage( "art/intrface/dialogbox_top.png" );
        }

        void OnInit() override
        {
            BaseHeight = Height;
        }

        void OnShow( dictionary@ params ) override
        {
            uint height        = BaseHeight;
            uint heightButtons = Find( "ButtonSlot" ).Height;
            DialogID           = uint(params[ "DialogID" ]);
            height += ( cast< string@[]@ >( params[ "ButtonTexts" ] ).length() ) * heightButtons;
            SetSize( Width, height );
        }
    }

    class BoxText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 26, 23 );
            SetSize( 257, 64 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( cast< string@ >( params[ "Text" ] ) );
        }
    }

    class Buttons : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 0, 99 );
            SetCellPrototype( "ButtonSlot" );
            SetColumns( 1 );
        }

        void OnShow( dictionary@ params ) override
        {
            ResizeGrid( cast< string@[]@ >( params[ "ButtonTexts" ] ).length() );
        }
    }

    class ButtonSlot : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 302, 28 );
        }
    }

    class Bottom : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 24 );
            SetSize( 302, 4 );
            SetBackgroundImage( "art/intrface/dialogbox_bottom.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetActive( CellIndex == cast< string@[]@ >( params[ "ButtonTexts" ] ).length() - 1 );
        }
    }

    class Middle : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 302, 24 );
            SetBackgroundImage( "art/intrface/dialogbox_middle.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetActive( CellIndex <= cast< string@[]@ >( params[ "ButtonTexts" ] ).length() - 1 );
        }
    }

    class Button : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 54, 4 );
            SetSize( 15, 17 );
            SetPressedImage( "art/intrface/DialogBox_Button.png" );
        }

        void OnLMouseClick() override
        {
            ServerRpc.Rpc_AnswerDialogBox( cast< DialogBox >( Parent ).DialogID, CellIndex, 0 );
            HideScreen();
        }
    }

    class Title : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 74, 11 );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( cast< string@[]@ >( params[ "ButtonTexts" ] )[ CellIndex ] );
        }
    }

    DialogBox@ CreateDialogBoxHierarchy( GUIObject@ parent )
    {
        DialogBox obj();
        CreateBoxTextHierarchy( obj );
        CreateButtonsHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    BoxText@ CreateBoxTextHierarchy( GUIObject@ parent )
    {
        BoxText obj();
        obj.Init( parent );
        return obj;
    }

    Buttons@ CreateButtonsHierarchy( GUIObject@ parent )
    {
        Buttons obj();
        CreateButtonSlotHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ButtonSlot@ CreateButtonSlotHierarchy( GUIObject@ parent )
    {
        ButtonSlot obj();
        CreateBottomHierarchy( obj );
        CreateMiddleHierarchy( obj );
        CreateButtonHierarchy( obj );
        CreateTitleHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Bottom@ CreateBottomHierarchy( GUIObject@ parent )
    {
        Bottom obj();
        obj.Init( parent );
        return obj;
    }

    Middle@ CreateMiddleHierarchy( GUIObject@ parent )
    {
        Middle obj();
        obj.Init( parent );
        return obj;
    }

    Button@ CreateButtonHierarchy( GUIObject@ parent )
    {
        Button obj();
        obj.Init( parent );
        return obj;
    }

    Title@ CreateTitleHierarchy( GUIObject@ parent )
    {
        Title obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateDialogBoxHierarchy( null );
    }
}

namespace Elevator
{
    import bool get_elevator( uint type, uint[]& data ) from "Elevator";

    class Elevator : GUIScreen
    {
        uint Type;
        uint[] Data;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
        }

        void OnShow( dictionary@ params ) override
        {
            // Data[ 3 ]  -  main pic
            if( params is null )
                return;
            Type = uint( params[ "ElevatorType" ] );
            if( !get_elevator( Type, Data ) )
                return;
            
            SetBackgroundImage( Data[ 3 ] );
        }
    }

    class AdditionalPanel : GUIPanel
    {
        void OnConstruct() override
        {
        }

        void OnShow( dictionary@ params ) override
        {
            // Data[ 6 ]  -  additional pic offset
            // Data[ 7 - 8 ]  -  additional pic point
            Elevator@ elevator = cast< Elevator >( Screen );
            SetBackgroundImage( elevator.Data[ 6 ] );
            SetPosition( elevator.Data[ 7 ], elevator.Data[ 8 ] );
        }
    }

    class ButtonsPanel : GUIPanel
    {
        void OnConstruct() override
        {
        }

        void OnShow( dictionary@ params ) override
        {
            // Data[ 13 ]  -  buttons count  ( 1 )
            // Data[ 12 ]  -  button down pic offset ( 1 )
            // 14+ -  rect for every button  ( 4 )
            Elevator@ elevator = cast< Elevator >( Screen );
            uint count = elevator.Data[ 13 ];
            _Children.clear();
            for( uint i = 0; i < count; i++ )
            {    
                ElevatorButton@ button = CreateElevatorButtonHierarchy( this );
                button.Index = i;
                button.SetPressedImage( elevator.Data[ 12 ] );
                int index = 14 + i * 4;
                int posX  = elevator.Data[ index ];
                int posY  = elevator.Data[ index + 1 ];
                button.SetPosition( posX, posY );
                button.SetActive( true );
            }
        }
    }

    class ElevatorButton : GUIButton
    {
        int Index;

        void OnConstruct() override
        {
            SetActive( false );
        }

        void OnLMouseClick() override
        {
            // Data[ 1 ]  -  start level
            Elevator@ elevator = cast< Elevator >( Screen );
            ServerRpc.Rpc_SelectLevel( elevator.Data[ 1 ] + Index, 0, 0 );
            HideScreen();
        }
    }

    Elevator@ CreateElevatorHierarchy( GUIObject@ parent )
    {
        Elevator obj();
        CreateAdditionalPanelHierarchy( obj );
        CreateButtonsPanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    AdditionalPanel@ CreateAdditionalPanelHierarchy( GUIObject@ parent )
    {
        AdditionalPanel obj();
        obj.Init( parent );
        return obj;
    }

    ButtonsPanel@ CreateButtonsPanelHierarchy( GUIObject@ parent )
    {
        ButtonsPanel obj();
        CreateElevatorButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ElevatorButton@ CreateElevatorButtonHierarchy( GUIObject@ parent )
    {
        ElevatorButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateElevatorHierarchy( null );
    }
}

namespace Say
{
    class Say : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 290, 85 );
            SetBackgroundImage( "art/intrface/say.png" );
        }
    }

    class TitleSay : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 140, 14 );
            SetText( MSG_GAME( STR_SAY_TITLE ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class MainSayText : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 23, 32 );
            SetSize( 245, 15 );
            SetTextFlags( FT_CENTERY );
            SetInputLength( 40 );
        }

        void OnInit() override
        {
            SetCarriage( true );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( "" );
        }
    }

    class DoneButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 38, 58 );
            SetSize( 14, 14 );
            SetPressedImage( "art/intrface/DI_RDBT1.png" );
        }

        void OnLMouseClick() override
        {
            string inputText = Screen.FindText( "MainSayText" ).Text;
            Message( inputText );
            //CustomCall( "ScreenSay_" + inputText );
            HideScreen();
        }
    }

    class DoneButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 20, -1 );
            SetText( MSG_GAME( STR_SAY_OK ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class CancelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 164, 57 );
            SetSize( 14, 14 );
            SetPressedImage( "art/intrface/DI_RDBT1.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class CancelButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 19, -1 );
            SetText( MSG_GAME( STR_SAY_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    Say@ CreateSayHierarchy( GUIObject@ parent )
    {
        Say obj();
        CreateTitleSayHierarchy( obj );
        CreateMainSayTextHierarchy( obj );
        CreateDoneButtonHierarchy( obj );
        CreateCancelButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TitleSay@ CreateTitleSayHierarchy( GUIObject@ parent )
    {
        TitleSay obj();
        obj.Init( parent );
        return obj;
    }

    MainSayText@ CreateMainSayTextHierarchy( GUIObject@ parent )
    {
        MainSayText obj();
        obj.Init( parent );
        return obj;
    }

    DoneButton@ CreateDoneButtonHierarchy( GUIObject@ parent )
    {
        DoneButton obj();
        CreateDoneButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DoneButtonName@ CreateDoneButtonNameHierarchy( GUIObject@ parent )
    {
        DoneButtonName obj();
        obj.Init( parent );
        return obj;
    }

    CancelButton@ CreateCancelButtonHierarchy( GUIObject@ parent )
    {
        CancelButton obj();
        CreateCancelButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CancelButtonName@ CreateCancelButtonNameHierarchy( GUIObject@ parent )
    {
        CancelButtonName obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateSayHierarchy( null );
    }
}

namespace GMTown
{
    class GMTown : GUIScreen
    {
        uint LocId;
        hash LocPid;
        int[] IndexMaps;

        void OnConstruct() override
        {
            SetModal( true );
        }

        void OnShow( dictionary@ params ) override
        {
            if( params !is null )
            {
                LocId          = uint( params[ "LocationId" ] );
                LocPid         = hash( params[ "LocationPid" ] );
                IndexMaps      = cast< array< int > >( params[ "IndexMaps" ] );
                string picName = MSG_LOCATION( STR_LOC_PIC( LocPid ) );
                SetBackgroundImage( picName );
            }
        }
    }

    class MapEntraceaGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetCellPrototype( "ProtoGrid" );
            SetColumns( 1 );
        }

        void OnShow( dictionary@ params ) override
        {
            GMTown@ gmTown = cast< GMTown >( Screen );
            hash proto = gmTown.LocPid;
            int[]@ indexMaps = gmTown.IndexMaps;
            ResizeGrid( indexMaps.length() );
            
            for( uint i = 0; i < Cells.length(); i++ )
            {
                GUIObject@ cell = Cells[ i ];
                uint mapIndex = indexMaps[ i ];
                string name = MSG_LOCATION( STR_LOC_ENTRANCE_NAME( proto, mapIndex ) );
                string strX = MSG_LOCATION( STR_LOC_ENTRANCE_PICX( proto, mapIndex ) );
                string strY = MSG_LOCATION( STR_LOC_ENTRANCE_PICY( proto, mapIndex ) );
            
                cell.FindText( "NameMap" ).SetText( name );
                int x = 0, y = 0;
                if( StrToInt( strX, x ) && StrToInt( strY, y ) )
                    cell.SetPosition( x, y );
            }
        }
    }

    class ProtoGrid : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class NameMap : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 12, 7 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }
    }

    class ShowMapButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 0, 15 );
            SetSize( 25, 13 );
            SetBackgroundImage( "art/intrface/GM_Town/town_view_gm.png" );
            SetPressedImage( "art/intrface/GM_Town/town_view_gm_dn.png" );
        }

        void OnLMouseClick() override
        {
            GMTown@ gmTown = cast< GMTown >( Screen );
            uint locId    = gmTown.LocId;
            uint indexMap = gmTown.IndexMaps[ CellIndex ];
            ServerRpc.Rpc_ShowTownView( locId, indexMap, 0 );
        }
    }

    class EnterMapButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 0, 30 );
            SetSize( 25, 13 );
            SetBackgroundImage( "art/intrface/GM_Town/town_view_sh.png" );
            SetPressedImage( "art/intrface/GM_Town/town_view_sh_dn.png" );
        }

        void OnLMouseClick() override
        {
            GMTown@ gmTown = cast< GMTown >( Screen );
            uint locId    = gmTown.LocId;
            uint indexMap = gmTown.IndexMaps[ CellIndex ];
            ServerRpc.Rpc_TransitToMap( locId, indexMap, 0 );
        }
    }

    GMTown@ CreateGMTownHierarchy( GUIObject@ parent )
    {
        GMTown obj();
        CreateMapEntraceaGridHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MapEntraceaGrid@ CreateMapEntraceaGridHierarchy( GUIObject@ parent )
    {
        MapEntraceaGrid obj();
        CreateProtoGridHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ProtoGrid@ CreateProtoGridHierarchy( GUIObject@ parent )
    {
        ProtoGrid obj();
        CreateNameMapHierarchy( obj );
        CreateShowMapButtonHierarchy( obj );
        CreateEnterMapButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    NameMap@ CreateNameMapHierarchy( GUIObject@ parent )
    {
        NameMap obj();
        obj.Init( parent );
        return obj;
    }

    ShowMapButton@ CreateShowMapButtonHierarchy( GUIObject@ parent )
    {
        ShowMapButton obj();
        obj.Init( parent );
        return obj;
    }

    EnterMapButton@ CreateEnterMapButtonHierarchy( GUIObject@ parent )
    {
        EnterMapButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateGMTownHierarchy( null );
    }
}

namespace InputBox
{
    class InputBox : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 288, 257 );
            SetBackgroundImage( "art/intrface/InputBox/input_box.png" );
        }
    }

    class IboxText : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 53, 38 );
            SetSize( 195, 137 );
        }

        void OnInit() override
        {
            SetCarriage( true );
        }

        void OnShow( dictionary@ params ) override
        {
            uint holoNum = 99999;
            if( params !is null )
                holoNum = GetItem( uint( params[ "ItemId" ] ) ).HolodiskNum;
            
            SetText( MSG_HOLO( STR_HOLO_INFO_DESC( holoNum ) ) );
        }
    }

    class IboxTitle : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 53, 187 );
            SetSize( 193, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            SetCarriage( true );
        }

        void OnShow( dictionary@ params ) override
        {
            uint holoNum = 99999;
            if( params !is null )
                holoNum = GetItem( uint( params[ "ItemId" ] ) ).HolodiskNum;
            
            SetText( MSG_HOLO( STR_HOLO_INFO_NAME( holoNum ) ) );
        }
    }

    class IboxDone : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 62, 214 );
            SetSize( 14, 14 );
            SetPressedImage( "art/intrface/InputBox/DI_RDBT1.png" );
        }

        void OnGlobalMouseClick( int button ) override
        {
            string text  = Screen.FindText( "IboxText" ).Text;
            string title = Screen.FindText( "IboxTitle" ).Text;
            //SetChosenAction( array< int > = { Id, 0, 0, 0, 0, 0, 0 } );
        }
    }

    class IboxDoneName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 45, 7 );
            SetText( MSG_GAME( STR_INPUT_BOX_WRITE ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class IboxCancel : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 167, 214 );
            SetSize( 14, 14 );
            SetPressedImage( "art/intrface/InputBox/DI_RDBT1.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class IboxCancelName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 45, 7 );
            SetText( MSG_GAME( STR_INPUT_BOX_BACK ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    InputBox@ CreateInputBoxHierarchy( GUIObject@ parent )
    {
        InputBox obj();
        CreateIboxTextHierarchy( obj );
        CreateIboxTitleHierarchy( obj );
        CreateIboxDoneHierarchy( obj );
        CreateIboxCancelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    IboxText@ CreateIboxTextHierarchy( GUIObject@ parent )
    {
        IboxText obj();
        obj.Init( parent );
        return obj;
    }

    IboxTitle@ CreateIboxTitleHierarchy( GUIObject@ parent )
    {
        IboxTitle obj();
        obj.Init( parent );
        return obj;
    }

    IboxDone@ CreateIboxDoneHierarchy( GUIObject@ parent )
    {
        IboxDone obj();
        CreateIboxDoneNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    IboxDoneName@ CreateIboxDoneNameHierarchy( GUIObject@ parent )
    {
        IboxDoneName obj();
        obj.Init( parent );
        return obj;
    }

    IboxCancel@ CreateIboxCancelHierarchy( GUIObject@ parent )
    {
        IboxCancel obj();
        CreateIboxCancelNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    IboxCancelName@ CreateIboxCancelNameHierarchy( GUIObject@ parent )
    {
        IboxCancelName obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateInputBoxHierarchy( null );
    }
}

namespace SkillBox
{
    CritterProperty[] UsedSkills = { CritterProperty::SkillSneak, CritterProperty::SkillLockpick, CritterProperty::SkillSteal, CritterProperty::SkillTraps, CritterProperty::SkillFirstAid, CritterProperty::SkillDoctor, CritterProperty::SkillScience, CritterProperty::SkillRepair };
    
    uint TargetCritterId;
    uint TargetItemId;
    bool IsInventory;
    
    string@ FormatXXX( int value )
    {
        value       = CLAMP( value, 0, 999 );
        string text = "";
        if( value < 100 )
            text += "0";
        if( value < 10 )
            text += "0";
        return text + value;
    }

    class SkillBox : GUIScreen
    {
        void OnConstruct() override
        {
            SetCanMove( true, false );
            SetSize( 185, 368 );
            SetAnchor( ANCHOR_RIGHT );
            SetBackgroundImage( "art/intrface/SKLDXBOX.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            TargetCritterId = 0;
            TargetItemId    = 0;
            IsInventory     = false;
            if( params !is null )
            {
                TargetCritterId = uint( params[ "TargetCritterId" ] );
                TargetItemId    = uint( params[ "TargetItemId" ] );
                IsInventory     = bool( params[ "IsInventory" ] );
            }
        }
    }

    class MainName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 47, 8 );
            SetSize( 92, 30 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class SkillsGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 15, 46 );
            SetCellPrototype( "SkillsPanel" );
            SetGridSize( UsedSkills.length() );
            SetPadding( 0, 10 );
        }
    }

    class SkillsPanel : GUIPanel
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 150, 26 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Prop = UsedSkills[ cellIndex ];
        }
    }

    class SkillButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPressedImage( "art/intrface/SKLDXON.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
            
            CritterProperty Prop = cast< SkillsPanel >( Parent ).Prop;
            if( TargetCritterId == 0 && TargetItemId == 0 )
            {    
                if( Prop == CritterProperty::SkillSneak )
                    SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_CRITTER, uint( CritterProperty::SkillSneak ), 0, 0, 0, 0, 0 } );
                else
                {
                    __Cursor     = CursorType::UseSkill;
                    __CursorData = uint( Prop );
                }
            }
            else
            {
                if( TargetCritterId != 0 )
                {
                    Critter@ cr = GetCritter( TargetCritterId );
                    if( cr !is null )
                        SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_CRITTER, uint( Prop ), TargetCritterId, 0, 0, 0, 0 } );
                }
                else
                {
                    Item@ item = GetItem( TargetItemId );
                    if( item !is null )
                    {
                        if( item.Type != ItemType::Generic && item.Type != ItemType::Grid )
                            SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_ITEM, IsInventory ? 1 : 0, uint( Prop ), TargetItemId, 0, 0, 0 } );
                        else
                            SetChosenActions( array< uint > = { CHOSEN_USE_SKL_ON_SCEN, uint( Prop ), item.ProtoId, item.HexX, item.HexY, 0, 0 } );
                    }
                }
            }
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 85, 26 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< SkillsPanel >( Parent ).Prop ) );
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 93, 0 );
            SetSize( 50, 26 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            Critter@ chosen = GetChosen();
            if( chosen !is null )
                return FormatXXX( chosen.GetAsInt( cast< SkillsPanel >( Parent ).Prop ) );
            return "";
        }
    }

    class ExitButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 48, 338 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class ExitText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 16, -5 );
            SetSize( 75, 25 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    SkillBox@ CreateSkillBoxHierarchy( GUIObject@ parent )
    {
        SkillBox obj();
        CreateMainNameHierarchy( obj );
        CreateSkillsGridHierarchy( obj );
        CreateExitButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MainName@ CreateMainNameHierarchy( GUIObject@ parent )
    {
        MainName obj();
        obj.Init( parent );
        return obj;
    }

    SkillsGrid@ CreateSkillsGridHierarchy( GUIObject@ parent )
    {
        SkillsGrid obj();
        CreateSkillsPanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    SkillsPanel@ CreateSkillsPanelHierarchy( GUIObject@ parent )
    {
        SkillsPanel obj();
        CreateSkillButtonHierarchy( obj );
        CreateSkillNameHierarchy( obj );
        CreateSkillValueHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    SkillButton@ CreateSkillButtonHierarchy( GUIObject@ parent )
    {
        SkillButton obj();
        obj.Init( parent );
        return obj;
    }

    SkillName@ CreateSkillNameHierarchy( GUIObject@ parent )
    {
        SkillName obj();
        obj.Init( parent );
        return obj;
    }

    SkillValue@ CreateSkillValueHierarchy( GUIObject@ parent )
    {
        SkillValue obj();
        obj.Init( parent );
        return obj;
    }

    ExitButton@ CreateExitButtonHierarchy( GUIObject@ parent )
    {
        ExitButton obj();
        CreateExitTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ExitText@ CreateExitTextHierarchy( GUIObject@ parent )
    {
        ExitText obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateSkillBoxHierarchy( null );
    }
}

namespace Use
{
    class UseItem : GUIScreen
    {
        uint TargetCritterId;
        uint TargetItemId;
        
        void OnItemSelect( Item& item )
        {
            HideScreen();
            
            if( TargetCritterId != 0 )
            {   
                Critter@ targetCr = GetCritter( TargetCritterId );
                if( targetCr !is null )
                    SetChosenActions( array< uint > = { CHOSEN_USE_ITEM, item.Id, item.ProtoId, TARGET_CRITTER, TargetCritterId, ITEM_MODE_USE, 0 } );
            }
            else if( TargetItemId != 0 )
            {
                Item@ targetItem = GetItem( TargetItemId );
                if( targetItem !is null )
                    SetChosenActions( array< uint > = { CHOSEN_USE_ITEM, item.Id, item.ProtoId, TARGET_ITEM, TargetItemId, ITEM_MODE_USE, 0 } );
            }
        }

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 292, 376 );
            SetBackgroundImage( "art/intrface/USE.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            TargetCritterId = uint( params[ "TargetCritterId" ] );
            TargetItemId    = uint( params[ "TargetItemId" ] );
        }
    }

    class MainItemView : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 39, 34 );
        }

        void OnInit() override
        {
            auto@ itemsContainer = ItemsContainer::CreateHierarchy( this );
            itemsContainer.ItemsCollection = ITEMS_USE;
            itemsContainer.SetSelectCallback( ItemsContainer::SelectCallbackFunc( cast< UseItem >( Parent ).OnItemSelect ) );
        }
    }

    class Chosen : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 174, 35 );
            SetSize( 61, 98 );
        }

        void OnInit() override
        {
            Preview::CreateHierarchy( this );
        }

        void OnShow( dictionary@ params ) override
        {
            Preview::Preview@ preview = cast< Preview::Preview >( GetChild( 0 ) );
            preview.PreviewCritterId = uint( params[ "TargetCritterId" ] );
            preview.PreviewItemId    = uint( params[ "TargetItemId" ] );
        }
    }

    class CancelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 231, 324 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/inv_close_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    UseItem@ CreateUseItemHierarchy( GUIObject@ parent )
    {
        UseItem obj();
        CreateMainItemViewHierarchy( obj );
        CreateChosenHierarchy( obj );
        CreateCancelButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MainItemView@ CreateMainItemViewHierarchy( GUIObject@ parent )
    {
        MainItemView obj();
        obj.Init( parent );
        return obj;
    }

    Chosen@ CreateChosenHierarchy( GUIObject@ parent )
    {
        Chosen obj();
        obj.Init( parent );
        return obj;
    }

    CancelButton@ CreateCancelButtonHierarchy( GUIObject@ parent )
    {
        CancelButton obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateUseItemHierarchy( null );
    }
}

namespace Perk
{
    import bool PerkCheck( Critter& cr, CritterProperty perk ) from "Perks";
    
    CritterProperty[] AccessPerks;
    CritterProperty TargetPerk;
    int Scroll;
    int MaxScroll;
    
    void GetAccessPerks()
    {
        Critter@ chosen = GetChosen();
        if( not valid( chosen ) )
            return;
        AccessPerks.clear();
        
        for( uint i  = 0, j = CritterPropertyPerks.length(); i < j; i++ )
            if( PerkCheck( chosen, CritterPropertyPerks[ i ] ) )
                AccessPerks.insertLast( CritterPropertyPerks[ i ] );
    }

    class Perk : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 573, 230 );
            SetBackgroundImage( "art/intrface/perk.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            GetAccessPerks();
        }
    }

    class PerkGrid : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 43, 39 );
            SetCellPrototype( "PerkName" );
            SetGridSize( 10 );
        }

        void OnShow( dictionary@ params ) override
        {
            MaxScroll = int(AccessPerks.length())- int(GridSize);
            if( MaxScroll < 0 )
                MaxScroll = 0;
        }
    }

    class PerkName : GUIText
    {
        CritterProperty Prop;

        void OnConstruct() override
        {
            SetSize( 200, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
            SetTextFocusedColor( COLOR_WHITE );
        }

        void OnMouseClick( int button ) override
        {
            if( button == MOUSE_BUTTON_WHEEL_UP || button == MOUSE_BUTTON_WHEEL_DOWN )
            {   
                Scroll += ( button == MOUSE_BUTTON_WHEEL_UP ? -1 : 1 );
                if( Scroll < 0 )
                    Scroll = 0;
                else if( Scroll > MaxScroll )
                    Scroll = MaxScroll;
            }
        }

        void OnLMouseClick() override
        {
            TargetPerk = Prop;
        }

        string@ get_Text() override
        {
            Prop = uint( CellIndex + Scroll ) < AccessPerks.length() ? AccessPerks[ CellIndex + Scroll ] : CritterProperty::Invalid;
            return Prop != CritterProperty::Invalid ? MSG_GAME( STR_PARAM_NAME( Prop ) ) : "";
        }
    }

    class Tip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 272, 17 );
        }
    }

    class NameTip : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 18, 6 );
            SetTextFont( FONT_THIN );
            SetTextColor( COLOR_BLACK );
        }

        string@ get_Text() override
        {
            return TargetPerk != CritterProperty::Invalid ? MSG_GAME( STR_PARAM_NAME( TargetPerk ) ) : "";
        }
    }

    class DescTip : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 4, 45 );
            SetSize( 145, 130 );
            SetTextColor( COLOR_BLACK );
        }

        string@ get_Text() override
        {
            return TargetPerk != CritterProperty::Invalid ? MSG_GAME( STR_PARAM_DESC( TargetPerk ) ) : "";
        }
    }

    class ImageTip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 148, 50 );
        }

        void OnDraw() override
        {
            SetBackgroundImage( TargetPerk != CritterProperty::Invalid ? MSG_GAME( STR_PARAM_PIC( TargetPerk ) ) : "" );
        }
    }

    class DoneButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 49, 186 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            if( TargetPerk != CritterProperty::Invalid )
            {
                CustomCall( "AssignPerk " + TargetPerk );
                HideScreen();
            }
        }
    }

    class DoneText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 15, -3 );
            SetSize( 65, 23 );
            SetText( MSG_GAME( STR_PERK_TAKE ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class CancelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 154, 184 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/red_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class CancelText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 15, -3 );
            SetSize( 65, 23 );
            SetText( MSG_GAME( STR_PERK_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class ScrollUpButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 27, 42 );
            SetSize( 11, 14 );
            SetPressedImage( "art/intrface/arrow_up_on.png" );
        }

        void OnLMouseClick() override
        {
            Scroll -= 1;
            if( Scroll < 0 )
                Scroll = 0;
        }
    }

    class ScrollDownButtom : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 27, 55 );
            SetSize( 11, 14 );
            SetPressedImage( "art/intrface/arrow_down_on.png" );
        }

        void OnLMouseClick() override
        {
            Scroll += 1;
            if( Scroll > MaxScroll )
                Scroll = MaxScroll;
        }
    }

    Perk@ CreatePerkHierarchy( GUIObject@ parent )
    {
        Perk obj();
        CreatePerkGridHierarchy( obj );
        CreateTipHierarchy( obj );
        CreateDoneButtonHierarchy( obj );
        CreateCancelButtonHierarchy( obj );
        CreateScrollUpButtonHierarchy( obj );
        CreateScrollDownButtomHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    PerkGrid@ CreatePerkGridHierarchy( GUIObject@ parent )
    {
        PerkGrid obj();
        CreatePerkNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    PerkName@ CreatePerkNameHierarchy( GUIObject@ parent )
    {
        PerkName obj();
        obj.Init( parent );
        return obj;
    }

    Tip@ CreateTipHierarchy( GUIObject@ parent )
    {
        Tip obj();
        CreateNameTipHierarchy( obj );
        CreateDescTipHierarchy( obj );
        CreateImageTipHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    NameTip@ CreateNameTipHierarchy( GUIObject@ parent )
    {
        NameTip obj();
        obj.Init( parent );
        return obj;
    }

    DescTip@ CreateDescTipHierarchy( GUIObject@ parent )
    {
        DescTip obj();
        obj.Init( parent );
        return obj;
    }

    ImageTip@ CreateImageTipHierarchy( GUIObject@ parent )
    {
        ImageTip obj();
        obj.Init( parent );
        return obj;
    }

    DoneButton@ CreateDoneButtonHierarchy( GUIObject@ parent )
    {
        DoneButton obj();
        CreateDoneTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DoneText@ CreateDoneTextHierarchy( GUIObject@ parent )
    {
        DoneText obj();
        obj.Init( parent );
        return obj;
    }

    CancelButton@ CreateCancelButtonHierarchy( GUIObject@ parent )
    {
        CancelButton obj();
        CreateCancelTextHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CancelText@ CreateCancelTextHierarchy( GUIObject@ parent )
    {
        CancelText obj();
        obj.Init( parent );
        return obj;
    }

    ScrollUpButton@ CreateScrollUpButtonHierarchy( GUIObject@ parent )
    {
        ScrollUpButton obj();
        obj.Init( parent );
        return obj;
    }

    ScrollDownButtom@ CreateScrollDownButtomHierarchy( GUIObject@ parent )
    {
        ScrollDownButtom obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreatePerkHierarchy( null );
    }
}

namespace TownView
{
    class TownView : GUIScreen
    {
        uint LocId;
        hash MapIndex;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 164, 158 );
            SetBackgroundImage( "art/intrface/town_view.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( params !is null )
            {
                LocId    = uint( params[ "LocationId" ] );
                MapIndex = hash( params[ "MapIndex" ] );
            }
        }
    }

    class CancelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 20 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class CancelButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 136, 33 );
            SetNotHittable( true );
            SetText( MSG_GAME( STR_TOWN_VIEW_BACK ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class EnterButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 13, 61 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }

        void OnLMouseClick() override
        {
            TownView@ townView = cast< TownView >( Screen );
            ServerRpc.Rpc_TransitToMap( townView.LocId, townView.MapIndex, 0 );
        }
    }

    class EnterButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 136, 33 );
            SetNotHittable( true );
            SetText( MSG_GAME( STR_TOWN_VIEW_ENTER ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class CounterCheckBox : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 13, 101 );
            SetSize( 136, 33 );
            SetPressedImage( "art/intrface/moptbtn.png" );
        }
    }

    class CounterCheckBoxName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 136, 33 );
            SetNotHittable( true );
            SetText( MSG_GAME( STR_TOWN_VIEW_CONTOURS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    TownView@ CreateTownViewHierarchy( GUIObject@ parent )
    {
        TownView obj();
        CreateCancelButtonHierarchy( obj );
        CreateEnterButtonHierarchy( obj );
        CreateCounterCheckBoxHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CancelButton@ CreateCancelButtonHierarchy( GUIObject@ parent )
    {
        CancelButton obj();
        CreateCancelButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CancelButtonName@ CreateCancelButtonNameHierarchy( GUIObject@ parent )
    {
        CancelButtonName obj();
        obj.Init( parent );
        return obj;
    }

    EnterButton@ CreateEnterButtonHierarchy( GUIObject@ parent )
    {
        EnterButton obj();
        CreateEnterButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    EnterButtonName@ CreateEnterButtonNameHierarchy( GUIObject@ parent )
    {
        EnterButtonName obj();
        obj.Init( parent );
        return obj;
    }

    CounterCheckBox@ CreateCounterCheckBoxHierarchy( GUIObject@ parent )
    {
        CounterCheckBox obj();
        CreateCounterCheckBoxNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CounterCheckBoxName@ CreateCounterCheckBoxNameHierarchy( GUIObject@ parent )
    {
        CounterCheckBoxName obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateTownViewHierarchy( null );
    }
}

namespace Cursor
{
    class Screen : GUIScreen
    {
        void OnConstruct() override
        {
            SetCanMove( true, false );
        }
    }

    import uint GetActiveItemAttackDistantion( Critter& cr ) from "Parameters";
    import int to_hit( const Critter& chosen, const Critter& target, const Item& weapon, uint8 weaponMode ) from "ClientMain";

    class Cursor : GUIPanel
    {
        Sprite CursorDefault;
        Sprite CursorHand;
        Sprite CursorWait;
        Sprite CursorAttack;
        Sprite CursorUseItem;
        Sprite CursorUseSkill;
        Sprite[] CursorMoveScreen;

        void OnConstruct() override
        {
        }

        void OnInit() override
        {
            CursorDefault.Load( "art/intrface/cursor_default.png" );
            CursorHand.Load( "art/intrface/cursor_hand.png" );
            CursorWait.Load( "art/intrface/cursor_wait.png" );
            CursorAttack.Load( "art/intrface/cursor_attack.png" );
            CursorUseItem.Load( "art/intrface/cursor_use_item.png" );
            CursorUseSkill.Load( "art/intrface/cursor_use_skill.png" );
            CursorMoveScreen.resize( 8 );
            CursorMoveScreen[ 0 ].Load( "art/intrface/cursor_move_screen_u.png" );
            CursorMoveScreen[ 1 ].Load( "art/intrface/cursor_move_screen_ur.png" );
            CursorMoveScreen[ 2 ].Load( "art/intrface/cursor_move_screen_r.png" );
            CursorMoveScreen[ 3 ].Load( "art/intrface/cursor_move_screen_dr.png" );
            CursorMoveScreen[ 4 ].Load( "art/intrface/cursor_move_screen_d.png" );
            CursorMoveScreen[ 5 ].Load( "art/intrface/cursor_move_screen_dl.png" );
            CursorMoveScreen[ 6 ].Load( "art/intrface/cursor_move_screen_l.png" );
            CursorMoveScreen[ 7 ].Load( "art/intrface/cursor_move_screen_ul.png" );
        }

        void OnDraw() override
        {
            if( __HideCursor )
                return;
            
            // Wait
            int cursor = __Cursor;
            if( __WaitPing )
            {
                CursorWait.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
                return;
            }
            // Move cursor
            __ShowMoveCursor = ( cursor == CursorType::Move );
            // Game scroll
            bool hasMouseScroll = true;
            if( __ScrollMouseLeft && __ScrollMouseUp )
                CursorMoveScreen[ 7 ].Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            else if( __ScrollMouseRight && __ScrollMouseUp )
                CursorMoveScreen[ 1 ].Draw( __MouseX, __MouseY, 0, 0, 1, -1 );
            else if( __ScrollMouseLeft && __ScrollMouseDown )
                CursorMoveScreen[ 5 ].Draw( __MouseX, __MouseY, 0, 0, -1, 1 );
            else if( __ScrollMouseRight && __ScrollMouseDown )
                CursorMoveScreen[ 3 ].Draw( __MouseX, __MouseY, 0, 0, 1, 1 );
            else if( __ScrollMouseLeft )
                CursorMoveScreen[ 6 ].Draw( __MouseX, __MouseY, 0, 0, -1, 0 );
            else if( __ScrollMouseRight )
                CursorMoveScreen[ 2 ].Draw( __MouseX, __MouseY, 0, 0, 1, 0 );
            else if( __ScrollMouseUp )
                CursorMoveScreen[ 0 ].Draw( __MouseX, __MouseY, 0, 0, 0, -1 );
            else if( __ScrollMouseDown )
                CursorMoveScreen[ 4 ].Draw( __MouseX, __MouseY, 0, 0, 0, 1 );
            else
                hasMouseScroll = false;
            if( hasMouseScroll )
                return;
            
            // Other cursors
            if( cursor == CursorType::UseWeapon )
            {
                CursorAttack.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            
                Critter@ chosen = GetChosen();
                if( chosen is null )
                    return;
            
                Critter@ cr = GetMonitorCritter( __MouseX, __MouseY );
                if( cr is null || cr is chosen )
                    return;
            
                uint attackDist = GetActiveItemAttackDistantion( chosen );
                if( attackDist == 0 )
                    return;
            
                bool trace = false;
                Critter@[] critters;
                GetCrittersPath( chosen.HexX, chosen.HexY, cr.HexX, cr.HexY, 0.0f, attackDist, FIND_ALL, critters );
                for( uint i = 0; i < critters.length(); i++ )
                {
                    if( critters[ i ].Id == cr.Id )
                    {
                        trace = true;
                        break;
                    }
                }
                if( !trace )
                    return;
            
                const Item@ item = chosen.GetSlotItem( SLOT_HAND1 );
                int hit = to_hit( chosen, cr, item, item.Mode );
                if( hit == 0 )
                    return;
                
                DrawText( hit + "%", __MouseX + 6, __MouseY + 6, 100, 100, COLOR_RED, FONT_DEFAULT, 0 );
            }
            else if( cursor == CursorType::UseItem )
            {
                CursorUseItem.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CursorType::UseSkill )
            {
                CursorUseSkill.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CursorType::Move )
            {
                uint16 hx, hy;
                if( !GetMonitorHex( __MouseX, __MouseY, hx, hy ) )
                    CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CursorType::Default )
            {
                CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CursorType::Hand )
            {
                //CustomCall( "CurDrawHand" );
                CursorHand.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else
            {
                CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
        }
    }

    class LMenu : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class MenuSlots : GUIGrid
    {
        void OnConstruct() override
        {
        }
    }

    class MenuSlot : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    Screen@ CreateScreenHierarchy( GUIObject@ parent )
    {
        Screen obj();
        CreateCursorHierarchy( obj );
        CreateLMenuHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    Cursor@ CreateCursorHierarchy( GUIObject@ parent )
    {
        Cursor obj();
        obj.Init( parent );
        return obj;
    }

    LMenu@ CreateLMenuHierarchy( GUIObject@ parent )
    {
        LMenu obj();
        CreateMenuSlotsHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MenuSlots@ CreateMenuSlotsHierarchy( GUIObject@ parent )
    {
        MenuSlots obj();
        CreateMenuSlotHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    MenuSlot@ CreateMenuSlotHierarchy( GUIObject@ parent )
    {
        MenuSlot obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateScreenHierarchy( null );
    }
}

namespace ItemsContainer
{
    funcdef void SelectCallbackFunc( Item& item );

    class ItemsContainer : GUIPanel
    {
        int ItemsCollection = ITEMS_INVENTORY;
        SelectCallbackFunc@ SelectCallback;
        
        void SetSelectCallback( SelectCallbackFunc@ callback )
        {
            @SelectCallback = callback;
        }

        void OnConstruct() override
        {
        }
    }

    class ContainerItemView : GUIItemView
    {
        void OnConstruct() override
        {
            SetSize( 70, 300 );
            SetCropContent( true );
            SetAutoScroll( true, false );
            SetCellPrototype( "ContainerItemPanel" );
            SetGridSize( 10 );
            SetColumns( 1 );
            SetUseSorting( true );
        }

        void OnShow( dictionary@ params ) override
        {
            SetItemsCollection( cast< ItemsContainer >( Parent ).ItemsCollection );
        }

        int OnCheckItem( Item@ item ) override
        {
            return int( 0x7FFF + item.SortValue );
        }
    }

    class ContainerItemPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 70, 30 );
            SetDraggable( true );
        }

        void OnLMouseClick() override
        {
            if( __Cursor == CursorType::Default )
            {
                ItemsContainer@ cont = cast< ItemsContainer >( Parent.Parent );
                if( cont.SelectCallback !is null )
                {
                    GUIItemView@ itemView = cast< GUIItemView >( Parent );
                    Item@ item = itemView.GetItem( CellIndex );
                    if( item !is null )
                        cont.SelectCallback( item );
                }
            }
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
        }
    }

    class ImageItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetNotHittable( true );
        }

        void OnShow( dictionary@ params ) override
        {
            SetSize( Parent.Width, Parent.Height );
        }

        void OnDragChanged() override
        {
            if( !IsDragged )
                SetSize( Parent.Width, Parent.Height );
            else
                SetSize( Parent.Width * 2, Parent.Height * 2 );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint picInv = 0;
            if( item !is null )
                picInv = ( item.PicInv != 0 ? item.PicInv : item.PicInv );
            SetBackgroundImage( picInv, IMAGE_LAYOUT_ZOOM );
        }
    }

    class CountItem : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 68, 29 );
            SetNotHittable( true );
            SetTextFlags( FT_CENTERR | FT_BOTTOM );
            SetTextColor( COLOR_WHITE );
        }

        void OnDrawItem( Item@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint count = 0;
            if( item !is null && item.Stackable )
                count = item.Count;
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    }

    class ScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 76, 6 );
            SetSize( 22, 23 );
            SetBackgroundImage( "art/intrface/inv_scr_up_normal.png" );
            SetPressedImage( "art/intrface/inv_scr_up_pressed.png" );
            SetDisabledImage( "art/intrface/inv_scr_up_disabled.png" );
        }

        void OnDraw() override
        {
            GUIItemView@ contItems = cast< GUIItemView >( Parent.Find( "ContainerItemView", false ) );
            SetCondition( contItems.CanModifyScroll( -1, 0 ) );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ contItems = cast< GUIItemView >( Parent.Find( "ContainerItemView", false ) );
            contItems.ModifyScroll( -10, 0 );
        }
    }

    class ScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 76, 29 );
            SetSize( 22, 23 );
            SetBackgroundImage( "art/intrface/inv_scr_dn_normal.png" );
            SetPressedImage( "art/intrface/inv_scr_dn_pressed.png" );
            SetDisabledImage( "art/intrface/inv_scr_dn_disabled.png" );
        }

        void OnDraw() override
        {
            GUIItemView@ contItems = cast< GUIItemView >( Parent.Find( "ContainerItemView", false ) );
            SetCondition( contItems.CanModifyScroll( 1, 0 ) );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ contItems = cast< GUIItemView >( Parent.Find( "ContainerItemView", false ) );
            contItems.ModifyScroll( 10, 0 );
        }
    }

    ItemsContainer@ CreateItemsContainerHierarchy( GUIObject@ parent )
    {
        ItemsContainer obj();
        CreateContainerItemViewHierarchy( obj );
        CreateScrollUpHierarchy( obj );
        CreateScrollDownHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ContainerItemView@ CreateContainerItemViewHierarchy( GUIObject@ parent )
    {
        ContainerItemView obj();
        CreateContainerItemPanelHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ContainerItemPanel@ CreateContainerItemPanelHierarchy( GUIObject@ parent )
    {
        ContainerItemPanel obj();
        CreateImageItemHierarchy( obj );
        CreateCountItemHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    ImageItem@ CreateImageItemHierarchy( GUIObject@ parent )
    {
        ImageItem obj();
        obj.Init( parent );
        return obj;
    }

    CountItem@ CreateCountItemHierarchy( GUIObject@ parent )
    {
        CountItem obj();
        obj.Init( parent );
        return obj;
    }

    ScrollUp@ CreateScrollUpHierarchy( GUIObject@ parent )
    {
        ScrollUp obj();
        obj.Init( parent );
        return obj;
    }

    ScrollDown@ CreateScrollDownHierarchy( GUIObject@ parent )
    {
        ScrollDown obj();
        obj.Init( parent );
        return obj;
    }

    ItemsContainer@ CreateHierarchy( GUIObject@ parent )
    {
        return CreateItemsContainerHierarchy( parent );
    }
}

namespace Preview
{
    class Preview : GUIPanel
    {
        uint PreviewCritterId;
        uint PreviewItemId;
        bool ItemInInv;
        Sprite spr;
        int CurDir;
        uint LastDirChangeTick;

        void OnConstruct() override
        {
            SetSize( 100, 100 );
            SetCropContent( true );
        }

        void OnInit() override
        {
            SetSize( Parent.Width, Parent.Height );
            CurDir            = 0;
            LastDirChangeTick = GetTick();
        }

        void OnShow( dictionary@ params ) override
        {
            if( PreviewCritterId == 0 && PreviewItemId == 0 )
            {
                Critter@ chosen = GetChosen();
                PreviewCritterId = ( chosen !is null ? chosen.Id : 0 );
            }
        }

        void OnDraw() override
        {
            if( PreviewCritterId != 0 )
            {
                Critter@ cr = GetCritter( PreviewCritterId );
                if( cr is null )
                    return;
                if( cr.IsAnim3d() )
                {
                    float[] chaPosition( 14 );
                    // Position
                    chaPosition[ 0 ] = AbsolutePosX + Width / 2;
                    chaPosition[ 1 ] = AbsolutePosY + Height - 10;
                    // Rotation
                    chaPosition[ 2 ] = __MapCameraAngle;
                    chaPosition[ 3 ] = ( __MapHexagonal ? 150 - CurDir * 60 : 135 - CurDir * 45 );
                    chaPosition[ 4 ] = 0.0;
                    // Scale
                    chaPosition[ 5 ] = 1.0;
                    chaPosition[ 6 ] = 1.0;
                    chaPosition[ 7 ] = 1.0;
                    // Speed
                    chaPosition[ 8 ] = 1.0;
                    // Reserved
                    chaPosition[ 9 ] = 0.0;
                    // Stencil rectangle
                    chaPosition[ 10 ] = AbsolutePosX;
                    chaPosition[ 11 ] = AbsolutePosY;
                    chaPosition[ 12 ] = AbsolutePosX + Width;
                    chaPosition[ 13 ] = AbsolutePosY + Height;
                    DrawCritter3d( 2, cr.ModelName, cr.GetAnim1(), ANIM2_IDLE, cr.Anim3dLayer, chaPosition, 0 );
                }
                else
                {
                    uint curTick = GetTick();
                    if( curTick - LastDirChangeTick >= 500 )
                    {
                        LastDirChangeTick = curTick;
                        CurDir++;
                        if( CurDir >= ( __MapHexagonal ? 6 : 8 ) )
                            CurDir = 0;
                    }
                    DrawCritter2d( cr.ModelName, cr.GetAnim1(), ANIM2_IDLE, CurDir, AbsolutePosX, AbsolutePosY, AbsolutePosX + Width, AbsolutePosY + Height, false, true, 0 );
                }
            }
            else if( PreviewItemId != 0 )
            {
                Item@ item = GetItem( PreviewItemId );
                if( item !is null )
                {
                    spr.Load( ItemInInv ? item.PicInv : item.PicMap );
                    spr.SetFirstFrame();
                    if( ItemInInv )
                        spr.Draw( AbsolutePosX, AbsolutePosY, Width, Height, layout: IMAGE_LAYOUT_ZOOM );
                    else
                        spr.Draw( AbsolutePosX, AbsolutePosY, Width, Height, layout: IMAGE_LAYOUT_CENTER );
                }
            }
        }
    }

    Preview@ CreatePreviewHierarchy( GUIObject@ parent )
    {
        Preview obj();
        obj.Init( parent );
        return obj;
    }

    Preview@ CreateHierarchy( GUIObject@ parent )
    {
        return CreatePreviewHierarchy( parent );
    }
}

namespace SayExtended
{
    class SayExtended : GUIScreen
    {
        int HeaderMessageID;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 290, 85 );
            SetBackgroundImage( "art/intrface/say.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( params !is null )
            {
                HeaderMessageID = int( params[ "MsgHeaderId" ] );
            }
        }
    }

    class TitleSay : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 140, 14 );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( MSG_TEXT( cast< SayExtended >( Parent ).HeaderMessageID ) );
        }
    }

    class MainSayText : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 23, 32 );
            SetSize( 245, 15 );
            SetTextFlags( FT_CENTERY );
            SetInputLength( 40 );
        }

        void OnInit() override
        {
            SetCarriage( true );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( "" );
        }
    }

    class DoneButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 38, 58 );
            SetSize( 14, 14 );
            SetPressedImage( "art/intrface/DI_RDBT1.png" );
        }

        void OnLMouseClick() override
        {
            string inputText = Screen.FindText( "MainSayText" ).Text;
            ServerRpc.Rpc_ProcessSayExtended( 0, inputText );
            HideScreen();
        }
    }

    class DoneButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 20, -1 );
            SetText( MSG_GAME( STR_SAY_OK ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class CancelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 164, 57 );
            SetSize( 14, 14 );
            SetPressedImage( "art/intrface/DI_RDBT1.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    class CancelButtonName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 19, -1 );
            SetText( MSG_GAME( STR_SAY_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    SayExtended@ CreateSayExtendedHierarchy( GUIObject@ parent )
    {
        SayExtended obj();
        CreateTitleSayHierarchy( obj );
        CreateMainSayTextHierarchy( obj );
        CreateDoneButtonHierarchy( obj );
        CreateCancelButtonHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    TitleSay@ CreateTitleSayHierarchy( GUIObject@ parent )
    {
        TitleSay obj();
        obj.Init( parent );
        return obj;
    }

    MainSayText@ CreateMainSayTextHierarchy( GUIObject@ parent )
    {
        MainSayText obj();
        obj.Init( parent );
        return obj;
    }

    DoneButton@ CreateDoneButtonHierarchy( GUIObject@ parent )
    {
        DoneButton obj();
        CreateDoneButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    DoneButtonName@ CreateDoneButtonNameHierarchy( GUIObject@ parent )
    {
        DoneButtonName obj();
        obj.Init( parent );
        return obj;
    }

    CancelButton@ CreateCancelButtonHierarchy( GUIObject@ parent )
    {
        CancelButton obj();
        CreateCancelButtonNameHierarchy( obj );
        obj.Init( parent );
        return obj;
    }

    CancelButtonName@ CreateCancelButtonNameHierarchy( GUIObject@ parent )
    {
        CancelButtonName obj();
        obj.Init( parent );
        return obj;
    }

    GUIScreen@ CreateScreen()
    {
        return CreateSayExtendedHierarchy( null );
    }
}
