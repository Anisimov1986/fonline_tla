// FOS Server Client

// Author: cvet
#include "Tla"

void ModuleInit()
{
    __EventItemCheckMove.Subscribe( item_check_move );
    __EventCritterCheckMoveItem.Subscribe( critter_check_move_item );
    #ifdef __SERVER
    __EventCritterMoveItem.Subscribe( critter_move_item );
	// Drop item
	__EventCritterDropItem.Subscribe (critter_drop_item);
    #endif
}
  #ifdef __SERVER
bool critter_drop_item( Critter& critter, Item& item )
{
	Critter@[] npcs;
    if( critter.GetCritters( false, FIND_LIFE_AND_KO | FIND_ONLY_NPC, npcs ) > 0 )
    {
		for( uint i = 0; i < npcs.length(); i++ )
        {
            Critter@ npc = npcs[ i ];
			if(valid(npc))
				__EventCritterSomeCritterDropItem.Raise(npc, critter, item);
        }
	}	
	return true;
}
#endif
// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call when somebody want move item from one place to another.
// Entity can be any one from the Critter, Item, Map.
// Return true to allow transaction, false to disallow.
bool item_check_move( const Item& item, int count, const Entity& from, const Entity& to )
{
    bool isDrop = (from is to);

    // Private items
    if( false /* is private item */ )
    {
        // Move to private container
        const Item@ toCont = cast< Item >( to );
        if( toCont !is null /* && toCont is private container */ )
            return true;

        // Move to owner
        const Critter@ toCr = cast< Critter >( to );
        if( toCr !is null && !isDrop /* && toCr is owner */ )
            return true;

        #ifdef __CLIENT
        // Notify player why we can't drop
        #endif
        return false;
    }
    return true;
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.
bool critter_check_move_item( const Critter& cr, const Item& item, uint8 toSlot, const Item@ itemSwap )
{
    uint8 fromSlot = item.CritSlot;

    // Drop
    if( toSlot == SLOT_GROUND )
        return true;

    // If busy, then allow only hands item swapping
    bool handsSwap = ( ( fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 ) || ( fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 ) );
    if( valid( itemSwap ) && !handsSwap )
        return false;

    // Weapon animation
    if( toSlot == SLOT_HAND1 )
    {
        if( item.Type == ItemType::Weapon && !IsCritterAnim1( cr, item.Weapon_Anim1 ) )
            return false;
    }

    // Armor animation
    if( toSlot == SLOT_ARMOR )
    {
        if( item.Type != ItemType::Armor )
            return false;
        if( item.Slot != SLOT_INV )
            return false;
        if( cr.IsNoArmor )
            return false;
    }

    // Custom slot checks
    if( toSlot > SLOT_ARMOR )
    {
        if( toSlot != item.Slot )
            return false;
    }

    // Allow moving
    return true;
}

#ifdef __SERVER
// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on critter item moved.
void critter_move_item(const Critter& critter, const Item& item, uint8 fromSlot )
{
Critter@ cr = GetCritter(critter.Id);
    uint8 toSlot = item.CritSlot;

    // Armor changing
    if( item.Type == ItemType::Armor && ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) )
    {
        // Default dude
        bool isMale = ( cr.Gender == GENDER_MALE );
        hash crModel = cr.ModelNameBase;
        if( crModel == 0 )
            crModel = ( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
        if( toSlot == SLOT_ARMOR )
            crModel = ( isMale ? item.Armor_CrTypeMale : item.Armor_CrTypeFemale );

        // Long hair dude redirects
        if( cr.ModelNameBase == CRTYPE_LHD_JUMPSUIT && isMale )
        {
            crModel = CRTYPE_LHD_JUMPSUIT;
            if( toSlot == SLOT_ARMOR )
            {
                crModel = item.Armor_CrTypeMale;
                if( crModel == CRTYPE_DW_LEATHER_ARMOR_M )
                    crModel = CRTYPE_LHD_LEATHER_ARMOR;
                else if( crModel == CRTYPE_DW_LEATHER_JACKET_M )
                    crModel = CRTYPE_LHD_LEATHER_JACKET;
                else if( crModel == CRTYPE_DW_METAL_ARMOR_M )
                    crModel = CRTYPE_LHD_METAL_ARMOR;
            }
        }

        if( cr.ModelName != crModel )
            cr.ModelName = crModel;

        // Armor modifier
        cr.CurrentArmorPerk = ( toSlot == SLOT_ARMOR ? item.Armor_Perk : 0 );
    }
	Critter@[] npcs;
    if( cr.GetCritters( false, FIND_LIFE_AND_KO | FIND_ONLY_NPC, npcs ) > 0 )
    {
		for( uint i = 0; i < npcs.length(); i++ )
        {
            Critter@ npc = npcs[ i ];
			if(valid(npc))
				__EventCritterSomeCritterMoveItem.Raise(npc, cr, item, fromSlot);        
		}
	}	

    // Slot modifiers
    // SLOT_PERK_MIRROR_SHADES // +1 charisma
    // SLOT_PERK_COSMETIC_CASE // +1 charisma to female
    // SLOT_PERK_MOTION_SENSOR // +20 outdoorsman
    // SLOT_PERK_STEALTH_BOY   // +20 sneak
}
#endif
