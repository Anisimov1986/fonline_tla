// FOS Server
// Author: cvet, heX, Tab10id

//bool Scenery::s_Dialog(Critter,const Item,Item,int)
bool s_Dialog( Critter player, const Item scenery, Item item, int skill)// 691 revision CritterProperty skill )
{
    // Запускаем диалог, если игрок не применял к сценери скилл или итем
    int dialogId = scenery.SceneryParams[ 0 ];
    if( skill == SKILL_PICK_ON_GROUND && not valid( item ) )
        return RunDialog( player, dialogId, scenery.HexX, scenery.HexY, false );
    return false;
}

bool s_DoorControl( Critter player, const Item scenery, Item item, int skill )
{
    auto params = scenery.SceneryParams;
    int  entireNum = params[ 0 ];
    int  toOpen = params[ 1 ];

    if( toOpen == 1 )
         Stdlib::DoorControl( player, entireNum, true );
    else
         Stdlib::DoorControl( player, entireNum, false );
    return true;
}

bool s_TransitToMap( Critter player, const Item scenery, Item item, int skill )
{
    auto params = scenery.SceneryParams;
    int  locPid = params[ 0 ];
    int  mapIndex = params[ 1 ];
    int  entire = params[ 2 ];
    return Stdlib::TransitToMap( player, locPid, mapIndex, entire );
}


array<const Item> GetMapSceneries(const Map map, uint16 hexX, uint16 hexY, uint radius, int protoId)
{
	return GetMapSceneries( map, hexX, hexY, radius, HASH( "" + protoId) );
}

array<const Item> GetMapSceneries(const Map map, uint16 hexX, uint16 hexY, uint radius, hash protoId)
{
	auto sceneries = array<const Item>();

	if( valid( map ) )
	{
		auto staticItems = map.GetStaticItems();
		for( uint i = 0; i < staticItems.length(); i++ )
		{
			const Item staticItem = staticItems[ i ];
			if( staticItem.Type == ItemType::Generic && staticItem.ProtoId == protoId )
			{
				if(GetDistantion( hexX, hexY, staticItem.HexX, staticItem.HexY ) <= radius)
				{
					staticItems.insertLast( staticItem );
				}
			}//: Can't implicitly convert from 'const Item@[]@&' to 'const Item@[]@&'.
		}
	}
	return sceneries;
}
