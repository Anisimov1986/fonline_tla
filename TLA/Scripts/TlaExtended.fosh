// FOS Common

// Critter events, description see in templates.fos
#define CRITTER_EVENT_IDLE                       ( 0 ) // EventCritterIdle / SubscribeToCritter
#define CRITTER_EVENT_FINISH                     ( 1 ) // EventCritterFinish / SubscribeToCritter
#define CRITTER_EVENT_DEAD                       ( 2 ) // EventCritterDead / SubscribeToCritter
#define CRITTER_EVENT_RESPAWN                    ( 3 ) // EventCritterRespawn / SubscribeToCritter
#define CRITTER_EVENT_SHOW_CRITTER               ( 4 ) // EventCritterShow / SubscribeToCritter
#define CRITTER_EVENT_SHOW_CRITTER_1             ( 5 ) // EventCritterShowDist1 / SubscribeToCritter
#define CRITTER_EVENT_SHOW_CRITTER_2             ( 6 ) // EventCritterShowDist2 / SubscribeToCritter
#define CRITTER_EVENT_SHOW_CRITTER_3             ( 7 ) // EventCritterShowDist3 / SubscribeToCritter
#define CRITTER_EVENT_HIDE_CRITTER               ( 8 ) // EventCritterHide / SubscribeToCritter
#define CRITTER_EVENT_HIDE_CRITTER_1             ( 9 ) // EventCritterHideDist1 / SubscribeToCritter
#define CRITTER_EVENT_HIDE_CRITTER_2             ( 10 ) // EventCritterHideDist2 / SubscribeToCritter
#define CRITTER_EVENT_HIDE_CRITTER_3             ( 11 ) // EventCritterHideDist3 / SubscribeToCritter
#define CRITTER_EVENT_SHOW_ITEM_ON_MAP           ( 12 ) // EventCritterShowItemOnMap / SubscribeToCritter
#define CRITTER_EVENT_CHANGE_ITEM_ON_MAP         ( 13 ) // EventCritterChangeItemOnMap / SubscribeToCritter
#define CRITTER_EVENT_HIDE_ITEM_ON_MAP           ( 14 ) // EventCritterHideItemOnMap / SubscribeToCritter
#define CRITTER_EVENT_ATTACK                     ( 15 ) // EventCritterAttack / SubscribeToCritter
#define CRITTER_EVENT_ATTACKED                   ( 16 ) // EventCritterAttacked / SubscribeToCritter
#define CRITTER_EVENT_STEALING                   ( 17 ) // EventCritterStealing / SubscribeToCritter
#define CRITTER_EVENT_MESSAGE                    ( 18 ) // EventCritterMessage / SubscribeToCritter
#define CRITTER_EVENT_USE_ITEM                   ( 19 ) // EventCritterUseItem / SubscribeToCritter
#define CRITTER_EVENT_USE_ITEM_ON_ME             ( 20 ) // EventCritterUseItem / SubscribeToOnCritter
#define CRITTER_EVENT_USE_SKILL                  ( 21 ) // EventCritterUseSkill / SubscribeToCritter
#define CRITTER_EVENT_USE_SKILL_ON_ME            ( 22 ) // EventCritterUseSkill / SubscribeToOnCritter
#define CRITTER_EVENT_DROP_ITEM                  ( 23 ) // EventCritterDropItem / SubscribeToCritter
#define CRITTER_EVENT_MOVE_ITEM                  ( 24 ) // EventCritterMoveItem / SubscribeToCritter
#define CRITTER_EVENT_KNOCKOUT                   ( 25 ) // EventCritterKnockout / SubscribeToCritter
#define CRITTER_EVENT_SMTH_DEAD                  ( 26 ) // EventCritterSomeCritterDead / SubscribeToCritter
#define CRITTER_EVENT_SMTH_STEALING              ( 27 ) // EventCritterSomeCritterStealing / SubscribeToCritter
#define CRITTER_EVENT_SMTH_ATTACK                ( 28 ) // EventCritterSomeCritterAttack / SubscribeToCritter
#define CRITTER_EVENT_SMTH_ATTACKED              ( 29 ) // EventCritterSomeCritterAttacked / SubscribeToCritter
#define CRITTER_EVENT_SMTH_USE_ITEM              ( 30 ) // EventCritterSomeCritterUseItem / SubscribeToCritter
#define CRITTER_EVENT_SMTH_USE_SKILL             ( 31 ) // EventCritterSomeCritterUseSkill / SubscribeToCritter
#define CRITTER_EVENT_SMTH_DROP_ITEM             ( 32 ) // EventCritterSomeCritterDropItem / SubscribeToCritter
#define CRITTER_EVENT_SMTH_MOVE_ITEM             ( 33 ) // EventCritterSomeCritterMoveItem / SubscribeToCritter
#define CRITTER_EVENT_SMTH_KNOCKOUT              ( 34 ) // EventCritterKnockout / Subscribe
#define CRITTER_EVENT_PLANE_BEGIN                ( 35 ) // EventNpcPlaneBegin / SubscribeToCritter
#define CRITTER_EVENT_PLANE_END                  ( 36 ) // EventNpcPlaneEnd / SubscribeToCritter
#define CRITTER_EVENT_PLANE_RUN                  ( 37 ) // EventNpcPlaneRun / SubscribeToCritter
#define CRITTER_EVENT_BARTER                     ( 38 ) // EventCritterBarter / SubscribeToCritter
#define CRITTER_EVENT_TALK                       ( 39 ) // EventCritterTalk / SubscribeToCritter
#define CRITTER_EVENT_GLOBAL_PROCESS             ( 40 ) // EventGlobalMapProcess / SubscribeToCritter
#define CRITTER_EVENT_GLOBAL_INVITE              ( 41 ) // EventGlobalMapInvite / SubscribeToCritter
#define CRITTER_EVENT_TURN_BASED_PROCESS         ( 42 ) // EventMapTurnBasedProcess / SubscribeToCritter
#define CRITTER_EVENT_SMTH_TURN_BASED_PROCESS    ( 43 ) //
#define CRITTER_EVENT_MAX                        ( 44 ) //

// Item events, description see in templates.fos
#define ITEM_EVENT_FINISH                        ( 0 ) // EventItemFinish  / SubscribeToItem
// При атаке итемом криттера. Если возвращается true, то обработка атаки не произойдет. При false вызывается обработчик криттера.
#define ITEM_EVENT_ATTACK                        ( 1 ) // EventCritterAttack / SubscribeToWeapon
#define ITEM_EVENT_USE                           ( 2 ) // EventCritterUseItem / SubscribeToItem
// ниже При использовании итема на что-либо. При flase вызывается обработчик криттера, потом глобальный on_use_item. При true выход.
#define ITEM_EVENT_USE_ON_ME                     ( 3 ) // EventCritterUseItem / SubscribeToOnItem
#define ITEM_EVENT_SKILL                         ( 4 ) // EventCritterUseSkill / SubscribeToOnItem
#define ITEM_EVENT_DROP                          ( 5 ) // EventCritterDropItem / SubscribeToItem
#define ITEM_EVENT_MOVE                          ( 6 ) // EventCritterMoveItem / SubscribeToItem
#define ITEM_EVENT_WALK                          ( 7 ) // EventItemWalk/ SubscribeToItem
#define ITEM_EVENT_MAX                           ( 8 ) //

// Map events, description see in templates.fos
#define MAP_EVENT_FINISH                         ( 0 ) // EventMapFinish / SubscribeToMap
#define MAP_EVENT_LOOP_0                         ( 1 ) // EventMapLoop1 / SubscribeToMap
#define MAP_EVENT_LOOP_1                         ( 2 ) // EventMapLoop2 / SubscribeToMap
#define MAP_EVENT_LOOP_2                         ( 3 ) // EventMapLoop3 / SubscribeToMap
#define MAP_EVENT_LOOP_3                         ( 4 ) // EventMapLoop4 / SubscribeToMap
#define MAP_EVENT_LOOP_4                         ( 5 ) // EventMapLoop5 / SubscribeToMap
#define MAP_EVENT_IN_CRITTER                     ( 6 ) // EventMapCritterIn / SubscribeToMap
#define MAP_EVENT_OUT_CRITTER                    ( 7 ) // EventMapCritterOut / SubscribeToMap
#define MAP_EVENT_CRITTER_DEAD                   ( 8 ) // EventMapCritterDead / SubscribeToMap
#define MAP_EVENT_TURN_BASED_BEGIN               ( 9 ) // EventMapTurnBasedBegin / SubscribeToMap
#define MAP_EVENT_TURN_BASED_END                 ( 10 ) // EventMapTurnBasedProcesstMapTurnBasedEnd / SubscribeToMap
#define MAP_EVENT_TURN_BASED_PROCESS             ( 11 ) //
#define MAP_EVENT_MAX                            ( 12 ) //

// Location events, description see in templates.fos
#define LOCATION_EVENT_FINISH                    ( 0 ) // EventLocationFinish / SubscribeToLocation
#define LOCATION_EVENT_ENTER                     ( 1 ) // EventLocationEnter / SubscribeToLocation
#define LOCATION_EVENT_MAX                       ( 2 ) //

// Return values for CRITTER_EVENT_PLANE_ BEGIN/END/RUN events
#define PLANE_RUN_GLOBAL                         ( 0 ) //
#define PLANE_KEEP                               ( 1 ) //
#define PLANE_DISCARD                            ( 2 ) //


// Недостающие определения

//#pragma property Item Public bool 
//#pragma property Item Public bool Locker_Broken//TODO: Разобраться с флагами
//#pragma property Item Public bool IsBroken
#pragma property Critter Protected uint8 PerkBonusMove
#pragma property Critter Protected        int   MaxMoveApBase
//#pragma property Critter Protected        bool   IsNoArmor
//#pragma property Critter Public hash ModelNameBase

//#pragma property Critter PrivateCommon const bool[] Anims

#pragma property Critter Public hash AnimType


#ifdef __SERVER
// Недостающие события
# pragma event "EventCritterSomeCritterDead( Critter& critter, Critter& killed, Critter@ killer)" deferred
# pragma event "EventCritterSomeCritterUseSkill( Critter& critter, Critter& fromCr, CritterProperty skill, Critter@ onCritter, Item@ onItem, const Item@ onScenery )" deferred
# pragma event "EventCritterSomeCritterUseItem( Critter& critter, Critter& fromCr, Item& item, Critter@ onCritter, Item@ onItem, const Item@ onScenery, uint param )" deferred
# pragma event "EventCritterSomeCritterDropItem( Critter& critter, Critter& fromCr, Item& item )"
# pragma event "EventCritterSomeCritterMoveItem( Critter& critter, Critter& fromCr, const Item& item, uint8 itemMode )"
# pragma event "EventCritterSomeCritterAttack( Critter& critter, Critter& attacker, Critter& target, Item& weapon, uint8 weaponMode, const Item@ ammo )"
# pragma event "EventCritterSomeCritterStealing( Critter& critter, Critter& thief, Critter& fromCr, Item&, uint )"
# pragma event "EventCritterSomeCritterAttacked( Critter& critter, Critter& target, Critter& attacker )"
// Не хватает объявления криттера

# pragma event "EventGlobalMapInviteEx( Critter& critter, Item@, uint, int, uint&, uint16&, uint16&, uint8& )"
# pragma event "EventCritterDeadEx( Critter& critter, Critter@ killer)"
# pragma event "EventMapLoopEx( Map& map, uint loopIndex )"
# pragma event "EventCritterMoveItemEx( Critter& critter, const Item& item, uint8 itemMode )"
# pragma event "EventNpcPlaneBeginEx( Critter& critter, NpcPlane&, int, Critter@, Item@ )"
# pragma event "EventNpcPlaneEndEx( Critter& critter, NpcPlane&, int, Critter@, Item@ )"
# pragma event "EventNpcPlaneRunEx( Critter& critter, NpcPlane&, int, uint&, uint&, uint& )"
// 631

# pragma event "EventMapCritterOutEx( Map& map, Critter& critter )"
# pragma event "EventCritterAttacked( Critter& critter, Critter& attacker )"
# pragma event "EventGlobalMapProcess( int, Critter& critter, Item@, float&, float&, float&, float&, float&, uint&, bool& )"


// revision 631
import uint GetFollowGroup( Critter& critter, int findType, Critter@[]@ group ) from "GlobalmapGroupExtended";
import Critter@ GetFollowLeader(Critter& critter) from "GlobalmapGroupExtended";
import Critter@[] GetGlobalGroup(Critter& critter) from "GlobalmapGroupExtended";
import void LeaveGlobalGroup(Critter& critter) from "GlobalmapGroupExtended";
import void DropTimers( Critter& cr) from "GlobalmapGroupExtended";

//645
# pragma event "EventGlobalMapInvite( Critter& critter, Item@, uint, int, uint&, uint16&, uint16&, uint8& )"

#endif

// Недостающие SayType
#define SAY_ENCOUNTER_ANY           			(14) // Activate dialog box on global map, using before encounter
#define SAY_ENCOUNTER_RT            			(15) // Activate dialog box on global map, using before encounter
#define SAY_ENCOUNTER_TB           				(16) // Activate dialog box on global map, using before encounter
#define SAY_FIX_RESULT              			(17)
#define SAY_DIALOGBOX_TEXT          			(18)
#define SAY_DIALOGBOX_BUTTON #(b)   			(19+(b)) // Max 20 buttons (0..19)
#define SAY_SAY_TITLE               			(39)
#define SAY_SAY_TEXT                			(40)

// EventMapLoops
# pragma event "EventMapLoop1( Map& map )"
# pragma event "EventMapLoop2( Map& map )"
# pragma event "EventMapLoop3( Map& map )"
# pragma event "EventMapLoop4( Map& map )"
# pragma event "EventMapLoop5( Map& map )"

# pragma event "EventMapCritterDead( Map& map, Critter& critter, Critter@ killer )"

// Dialogboxes

#define DIALOGBOX_NCR_ILL_BRAHMIN 				(1) // диалог из NcrCommon
#define DIALOGBOX_PURGATORY_INVITE				(2) // Диалог Чистилища

// Недостающие типы существ



#pragma property Item PrivateServer bool IsLockpick
#pragma property Item PrivateServer uint8 Lockpick_Points
#pragma property Item PrivateServer bool Lockpick_IsElectro

#pragma property Item PrivateServer bool Door_IsMultyHex
#pragma property Item PrivateServer uint8[] Door_MultyHexLine1
#pragma property Item PrivateServer uint8[] Door_MultyHexLine2
#pragma property Item PrivateServer uint[] Door_BlockerIds
// Locker
/*
#define LOCKER_ISOPEN                            ( 0x01 ) // Hardcoded
#define LOCKER_LOCKED                            ( 0x02 )
#define LOCKER_JAMMED                            ( 0x04 )
#define LOCKER_BROKEN                            ( 0x08 )
#define LOCKER_NOOPEN                            ( 0x10 ) // Hardcoded
#define LOCKER_ELECTRO                           ( 0x20 )

*/
// Flags
// Tactics specific
// 8        9       10 1 2 3 4 5 6 7 8 9 20  1 2  3 4 5 6  7 8 9 30  1
// | Crouch | Prone                       | Skin  | | Hair | | Armor |
#define ANIM1_CROUCH                                                         ( 0x0100 )
#define ANIM1_PRONE                                                          ( 0x0200 )
#define ANIM1_COLOR_SKIN                                                     # (index)   ( ( ( index ) & 0xF ) << 20 ) // 0..15, colors see in colorOffsets animation.fos
#define ANIM1_COLOR_HAIR                                                     # (index)   ( ( ( index ) & 0xF ) << 24 ) // 0..15, colors see in colorOffsets animation.fos
#define ANIM1_COLOR_ARMOR                                                    # (index)   ( ( ( index ) & 0xF ) << 28 ) // 0..15, colors see in colorOffsets animation.fos
// Arcanum specific
// 8 9 10 1 2        3 4 5 6     7     8 9 20 1 2 3 4 5 6 7 8 9 30 1
//          | Shield       |< Palette >|
#define ANIM1_SHIELD                                                         ( 0x1000 )
#define ANIM1_PALETTE                                                        # (num)         ( ( ( num ) & 3 ) << ( ANIM1_FLAGS_BITS + 8 ) )

// Tactics
#define CRTYPE_TACTICS_RHUMANOID		 ( GetStrHash( "RHumanoid" ) )
//	Line 368: @  460    RHumanoid             316  0  2  1  1  1  0  1   1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0    400  200   0  0  RHumanoidU

// Fix boy function call states
#define FIXBOY_LIST                              ( 0 )
#define FIXBOY_BUTTON                            ( 1 )
#define FIXBOY_CRAFT                             ( 2 )

// Fix boy craft results
#define FIXBOY_ALLOW_CRAFT                       ( 0x0001 )
#define FIXBOY_CHECK_TIMEOUT                     ( 0x0002 )
#define FIXBOY_SET_TIMEOUT                       ( 0x0004 )
#define FIXBOY_CHECK_PARAMS                      ( 0x0008 )
#define FIXBOY_CHECK_MATERIALS                   ( 0x0010 )
#define FIXBOY_CHECK_TOOLS                       ( 0x0020 )
#define FIXBOY_SUB_MATERIALS                     ( 0x0040 )
#define FIXBOY_ADD_CRAFT_ITEMS                   ( 0x0080 )
#define FIXBOY_ADD_EXPERIENCE                    ( 0x0100 )
#define FIXBOY_SEND_SUCC_MESSAGE                 ( 0x0200 )
#define FIXBOY_SEND_FAIL_MESSAGE                 ( 0x0400 )
#define FIXBOY_DEFAULT                           ( 0xFFFF )

//rev631


#pragma property Critter Protected int  Charisma
#pragma property Critter Protected int  MaxLife
#pragma property Critter Protected bool IsNoAim


// Global map events
#define GLOBAL_PROCESS_MOVE                ( 0 )          // Called every __GlobalMapMoveTime
#define GLOBAL_PROCESS_ENTER               ( 1 )
#define GLOBAL_PROCESS_START_FAST          ( 2 )
#define GLOBAL_PROCESS_START               ( 3 )
#define GLOBAL_PROCESS_SET_MOVE            ( 4 )
#define GLOBAL_PROCESS_STOPPED             ( 5 )
#define GLOBAL_PROCESS_NPC_IDLE            ( 6 )          // Called every __CritterIdleTick
#define GLOBAL_PROCESS_KICK                ( 7 )
#define GLOBAL_MAP_BASE_SPEED              ( 2.4f )       // Base speed, 2.4 pixels per second


// Global map walk types
#define GM_WALK_GROUND                     ( 0 )
#define GM_WALK_FLY                        ( 1 )
#define GM_WALK_WATER                      ( 2 )


// MarkInsert
//#pragma rpc Client void ShowScreenElevator( int elevatorType, int p1, int p2 )

