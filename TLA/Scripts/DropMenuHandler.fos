// FOS Server Client

#pragma rpc Server StartDialog( uint npcId )
#pragma rpc Server UseSkillOnItem( uint itemId, const CritterProperty skill)

#ifdef __CLIENT

void ModuleInit()
{
    auto dropMenu = FixedDropMenu::FixedDropMenu( MOUSE_BUTTON_LEFT, CursorType::Default, 500, 40, "art/intrface/", "IACCUXX1" );
	
	dropMenu.AddButton( 10, CanCloseMenu, CloseMenu, "CANCELN.frm", "CANCELH.frm");
	dropMenu.AddButton( 20, CanLook, Look, "LOOKN.frm", "LOOKH.frm");
	dropMenu.AddButton( 30, CanDialog, Dialog, "TALKN.frm", "TALKH.frm");
	dropMenu.AddButton( 40, CanUse, Use, "USEGETN.frm", "USEGETH.frm");
	
	//INVENH/N - инвентарь кнопка PUSHH/PUSHN - толчок; ROTATEH/ROTATEN - поворот.USEGETH/N - рука использования/LOOKH|LOOKN - просмотр подробный
	
	Gui::SetDropMenu( dropMenu );
}
	
bool CanDialog( Critter cr, Item item )
{
	// ToDo - диалог с предметами
	return cr != null && IsChosenAlive() && cr.IsNpc() && cr.IsLife() && cr.DialogId != 0 && !cr.IsNoTalk;
}

void Dialog( Critter cr, Item item )
{
	ServerRpc.StartDialog( cr.Id );
}

bool IsChosenAlive()
{
    Critter chosen = GetChosen();
    return chosen != null && chosen.IsLife();
}


// Close menu
bool CanCloseMenu( Critter cr, Item item )
{
	return  valid( cr ) || valid( item );
}

void CloseMenu( Critter cr, Item item )
{
	//
}

//Look
bool CanLook( Critter cr, Item item )
{
	return valid( cr ) || valid( item );
}

void Look( Critter cr, Item item )
{
	if( valid( item ) )
        Message( ClientMain::item_description( item, ItemLookTypes::Default) );
    else if( valid( cr ) )
		Message( ClientMain::critter_description( cr, CritterLookTypes::LookFull ) );
}

bool CanUse( Critter cr, Item item )
{
	// Loot critter
	if( cr != null && IsChosenAlive() && !cr.IsChosen() && cr.IsDead() && !cr.IsNoLoot )
        return true;
	return item != null && IsChosenAlive() && item.Accessory == ItemOwnership::MapHex &&
           !item.IsWall && ( item.IsCanUse || item.IsCanUseOnSmth || item.IsCanPickUp );
}

void Use( Critter cr, Item item )
{
    //if(item.Accessory != ItemOwnership::MapHex )
    //    return;
    if( valid ( item ) && item.Accessory == ItemOwnership::MapHex )
    {
       //ServerRpc.UseSkillOnItem( item.Id, SKILL_PICK_ON_GROUND );
	   ChosenActions::SetChosenActions( array< uint > = { TlaExtended::ChosenPickItem, item.ProtoId, item.HexX, item.HexY, item.Id, 0, 0 } );
    }
}


#endif

#ifdef __SERVER

void StartDialog( Critter client, uint npcId )
{
	Critter npc = GetCritter( npcId );
    if( valid(client) && client.IsLife() && valid(npc) && npc.IsLife() && npc.IsNpc() && !npc.IsNoTalk )
	{
		RunDialog( client, npc, false );
	}
}

void UseSkillOnItem(Critter cr, uint itemId, const CritterProperty skill)
{
    Item item = GetItem( itemId );
    if(valid( cr ) && valid( item ))
    {
        if( item.Type == ItemType::Container || item.Type == ItemType::Door )
        {
            Lockers::UseSkillOnLocker( cr, item, SKILL_PICK_ON_GROUND );
        }
    }
}
#endif