// FOS Server
// Author: Sufir

#include "Tla"
#include "V13ZGuard"
#include "V13GuardLib"

// Defines
uint   CurGuardian     = 5002372;
int    GuardDlg        = 1909;
uint16 GuardX          = 69,
       GuardY          = 72,
       GuardDir        = 3;

void _SoldierInit( Critter& soldier, bool firstTime )
{
    soldier.IsNoSupply = true;
    __EventCritterMessage.SubscribeToCritter( soldier, _SoldierGetMessage );
    __EventCritterSomeCritterDropItem.SubscribeToCritter( soldier, _SoldierMined );
    __EventCritterSomeCritterDead.SubscribeToCritter( soldier, _GuardianDead );
    __EventCritterAttacked.SubscribeToCritter( soldier, _FriendlyFire );
    __EventCritterAttack.SubscribeToCritter( soldier, _FriendlyFire2 );
    __EventNpcPlaneBeginEx.SubscribeToCritter( soldier, _FriendlyFirePlane );
}

void _SoldierGetMessage( Critter& soldier, Critter& fromCr, int message, int value )
{
    if( !soldier.IsLife() )
        return;
    if( soldier.Id == fromCr.Id )
        return;
    if( !fromCr.IsSeenBy( soldier ) )
        return;
    Critter@ player = GetCritter( value );
    if( !valid( player ) )
        return;
    if( !player.IsPlayer() )
        return;
    if( message == MSG_V13_GUARD_ALARM )
    {
        AddAttackPlane( soldier, 0, player.Id, int(float(player.CharismaBase) * 1.5) );
        // soldier.AddEnemyToStack( player.Id );
    }
    else if( message == MSG_V13_GUARD_KILL )
    {
        AddAttackPlane( soldier, 0, player.Id );
    }
}

// Если солдат обнаружил закладывающего взрывчатку игрока - атакуем его.
void _SoldierMined( Critter& soldier, Critter& dropper, Item& item )
{
    if( !soldier.IsNoPlanes() )
        return;
    if( !valid( dropper ) )
        return;
    if( !dropper.IsPlayer() )
        return;
    if( !dropper.IsLife() )
        return;

    // Заминировать нас не так-то просто, нужно быть действительно мастером и удачливым ловкачем.
    if( IsMined( soldier, item, dropper, soldier.PerceptionBase * 20, Pids_MiscActiveExplosions ) )
        AddAttackPlane( soldier, 0, dropper.Id );
}


// Если сержант на КПП убит, один из солдат займёт его место, если хоть один из солдат жив.
void _GuardianDead( Critter& soldier, Critter& guardian, Critter@ killer )
{
    if( !soldier.IsLife() )
        return;

    if( guardian.Id == CurGuardian )
    {
        soldier.NpcRole = ROLE_GUARDIAN;
        guardian.NpcRole = ROLE_SOLDIER;
        CurGuardian = soldier.Id;
        guardian.HomeMapId = soldier.HomeMapId;
        guardian.HomeHexX = soldier.HomeHexX;
        guardian.HomeHexY = soldier.HomeHexY;
        guardian.HomeDir = soldier.HomeDir;
        soldier.HomeMapId = soldier.GetMap().Id;
        soldier.HomeHexX = GuardX;
        soldier.HomeHexY = GuardY;
        soldier.HomeDir = GuardDir;
        guardian.DialogId = soldier.DialogId;
        soldier.DialogId = GuardDlg;
        guardian.SetScript( "_SoldierInit" );
        soldier.SetScript( "_GuardInit" );
    }
    else
    {
        if( valid( killer ) )
            AddAttackPlane( soldier, 0, killer.Id );
    }
}

// Если NPC атакован одним из "своих" - не атакуем его.
bool _FriendlyFirePlane( Critter& guardian, NpcPlane& plane, int reason, Critter@ some, Item@ someItem )
{
    if( plane.Type == AI_PLANE_ATTACK )
    {
        Critter@ target = ::GetCritter( plane.Attack_TargId );
        if( valid( target ) && target.NpcRole == ROLE_GUARDIAN || target.NpcRole == ROLE_SOLDIER )
            return false;
    }
    return true;
}
bool _FriendlyFire2( Critter& critter, Critter& target, Item& weapon, uint8 weaponMode, const Item@ ammo )
{
	return _FriendlyFire(critter, target);
}

// Если NPC атакован одним из "своих" - не атакуем его.
bool _FriendlyFire( Critter& guardian, Critter& attacker )
{
    if( guardian.IsNpc() && attacker.IsNpc() )
    {
        if( guardian.NpcRole == ROLE_GUARDIAN || guardian.NpcRole == ROLE_SOLDIER )
        {
            guardian.Wait( 5000 );
            attacker.Wait( 5000 );
            if( guardian.CheckEnemyInStack( attacker.Id ) )
                guardian.EraseEnemyFromStack( attacker.Id );
            if( attacker.CheckEnemyInStack( guardian.Id ) )
                attacker.EraseEnemyFromStack( guardian.Id );
            EraseAttackPlane( attacker, guardian.Id );
            EraseAttackPlane( guardian, attacker.Id );
            return true;
        }
    }
    return false;
}
