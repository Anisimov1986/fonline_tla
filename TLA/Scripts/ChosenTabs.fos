// FOS Client

// Author: cvet
// Server and client stuff for radio
#include "Tla"

import int GetIniValue( string& iniKey, int defaultValue ) from "IniParser";
import int[] @ GetIniValues2( string & iniKey, int[] @ defaultValues ) from "IniParser";

Sprite TabPic;
int[]  Position;
int    StepX;
int    StepY;
bool   LevelUp;
int    CurTab;

void InitChosenTabs() // Export
{
    TabPic.LoadByIni( "ChosenTabPic", PT_ART_INTRFACE );
    Position = GetIniValues2( "ChosenTab", null );
    StepX = GetIniValue( "ChosenTabStepX", 0 );
    StepY = GetIniValue( "ChosenTabStepY", 5 );
    if( StepX != 0 )
        StepX += TabPic.Width;
    if( StepY != 0 )
        StepY += TabPic.Height;
    LevelUp = false;
    CurTab = 0;
}

void SetChosenTabLevelUp( bool enable ) // Export
{
    LevelUp = enable;
}

void DrawChosenTabs() // Export
{
    if( GUI_GetActiveMainScreen().Index != CLIENT_MAIN_SCREEN_GAME )
        return;

    Critter@ chosen = GetChosen();
    if( not valid( chosen ) )
        return;

    if( LevelUp && ( GUI_GetActiveMainScreen().Index != CLIENT_MAIN_SCREEN_GAME ||
                     GUI_GetActiveScreen().Index == CLIENT_SCREEN_CHARACTER ||
                     GUI_GetActiveScreen().Index == CLIENT_SCREEN_PERK ) )
        LevelUp = false;

    CurTab = 0;

    if( chosen.IsHide )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_HIDEMODE_TITLE ), COLOR_DGREEN );

    if( LevelUp )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_LEVELUP_TITLE ), COLOR_DGREEN );

    if( chosen.IsOverweight )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_OVERWEIGHT_TITLE ), COLOR_DRED );

    if( chosen.IsPoisoned )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_POISONED_TITLE ), COLOR_DRED );

    if( chosen.IsRadiated )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_RADIATED_TITLE ), COLOR_DRED );

    if( chosen.IsInjured )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_INJURED_TITLE ), COLOR_DRED );

    if( chosen.IsAddicted )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_ADDICTED_TITLE ), COLOR_DRED );

    if( IS_TIMEOUT( chosen.TimeoutTransfer ) )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_TIMEOUT_TITLE ), ( chosen.TimeoutTransfer - __FullSecond ) / 1000, COLOR_DRED );

    if( IsTurnBased() && chosen.IsTurnBasedTurn() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_YOU_TURN_TITLE ), GetTurnBasedTime() / 1000, COLOR_DGREEN );

    if( IsTurnBased() && !chosen.IsTurnBasedTurn() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_TURN_BASED_TITLE ), COLOR_DGREEN );
}

void DrawTab( string@ text, uint color )
{
    TabPic.Draw( Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY );
    DrawText( text, Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY, TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}

void DrawTab( string@ text, int value, uint color )
{
    text = ReplaceText( text, "VALUE", value );
    TabPic.Draw( Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY );
    DrawText( text, Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY, TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}
