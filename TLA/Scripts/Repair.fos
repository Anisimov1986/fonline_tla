// FOS Server
// Author: cvet

#include "Tla"

bool TryRepairItem( Critter& cr, Item& item ) // Export
{
    if( not item.Deteriorable )
        return true;

    if( IS_TIMEOUT( cr.TimeoutBattle ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_TIMEOUT_BATTLE_WAIT );
        return true;
    }

    if( IS_TIMEOUT( cr.TimeoutSkRepair ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
        return true;
    }

    if( FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_NOTRESC ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_NO_RESC );
        return true;
    }

    // Repair
    int  repair = cr.SkillRepair;
    hash activePid = cr.GetSlotItem( SLOT_HAND1 ).ProtoId;
    if( activePid == Content::Item::multi_tool )
    {
        repair += 25;
        if( Random( 0, 30 ) == 0 )
            cr.DeleteItem( Content::Item::multi_tool, 1 );
    }
    else if( activePid == Content::Item::super_tool_kit )
    {
        repair += 50;
        if( Random( 0, 30 ) == 0 )
            cr.DeleteItem( Content::Item::super_tool_kit, 1 );
    }

    // Repair
    if( FLAG( item.BrokenFlags, BI_BROKEN ) )
    {
        if( FLAG( item.BrokenFlags, BI_HIGHBROKEN ) )
            repair -= 100;                               // было 150
        else if( FLAG( item.BrokenFlags, BI_NORMBROKEN ) )
            repair -= 75;                                // было 100
        else if( FLAG( item.BrokenFlags, BI_LOWBROKEN ) )
            repair -= 25;                                // было 50

        repair -= item.BrokenCount * 50 / MAX_BROKENS;   // было 100
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) )
        {
            item.Deterioration = 0;
            UNSETFLAG( item.BrokenFlags, BI_BROKEN );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_SUCC );
            cr.Experience += 40;
        }
        else
        {
            item.BrokenCount += 1;
            if( item.BrokenCount >= MAX_BROKENS )
                SETFLAG( item.BrokenFlags, BI_NOTRESC );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_REPAIR_FAIL );
        }
    }
    // Service
    else
    {
        if( FLAG( item.BrokenFlags, BI_SERVICE ) )
            repair -= 25;
        repair -= item.BrokenCount * 50 / MAX_BROKENS;
        repair = CLAMP( repair, 6, 95 );

        if( repair >= Random( 1, 100 ) )
        {
            SETFLAG( item.BrokenFlags, BI_SERVICE );
            if( activePid == Content::Item::oil_can )
            {
                item.Deterioration = 0;
                cr.DeleteItem( Content::Item::oil_can, 1 );
            }
            else
            {
                int cnt = repair * MAX_DETERIORATION / 100;
                if( cnt > int(item.Deterioration) )
                    item.Deterioration = 0;
                else
                    item.Deterioration -= cnt;
            }
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_SUCC );
            cr.Experience += 20;
        }
        else
        {
            DeteriorateItem( cr, item, MAX_DETERIORATION / 5 );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_SERVICE_FAIL );
        }
    }
    SetItemCost( item );
    cr.TimeoutSkRepair = REPAIR_TIMEOUT( cr );
    return true;
}

void DeteriorateItem( Critter& cr, Item& item, int deteriorationCount ) // Export
{
    if( deteriorationCount <= 0 || not item.Deteriorable || FLAG( item.BrokenFlags, BI_ETERNAL ) || FLAG( item.BrokenFlags, BI_BROKEN ) )
        return;

    item.Deterioration += deteriorationCount;
    if( item.Deterioration >= MAX_DETERIORATION )
    {
        item.Deterioration = MAX_DETERIORATION;
        item.BrokenCount += 1;
        SetItemCost( item );
        int brokenLvl = Random( 0, item.BrokenCount / ( MAX_BROKENS / 4 ) );

        if( item.BrokenCount >= MAX_BROKENS || brokenLvl >= 3 )
            SETFLAG( item.BrokenFlags, BI_NOTRESC );
        else if( brokenLvl == 2 )
            SETFLAG( item.BrokenFlags, BI_HIGHBROKEN );
        else if( brokenLvl == 1 )
            SETFLAG( item.BrokenFlags, BI_NORMBROKEN );
        else
            SETFLAG( item.BrokenFlags, BI_LOWBROKEN );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_DETERIORATION_WEAPON_BROKEN );
    }
}

void SetDeterioration( Item& item, int deteriorationProcent ) // Export
{
    if( not item.Deteriorable )
        return;
    UNSETFLAG( item.BrokenFlags, BI_BROKEN );
    deteriorationProcent = CLAMP( deteriorationProcent, 0, 100 );
    item.Deterioration = MAX_DETERIORATION * deteriorationProcent / 100;
    item.BrokenCount = MAX_BROKENS * deteriorationProcent / 100;
    if( deteriorationProcent == 100 )
        SETFLAG( item.BrokenFlags, BI_BROKEN );
}

int GetDeteriorationProcent( Item& item ) // Export
{
    if( not item.Deteriorable )
        return 0;
    if( FLAG( item.BrokenFlags, BI_BROKEN ) )
        return 100;
    int value = item.Deterioration * 100 / MAX_DETERIORATION;
    return CLAMP( value, 0, 100 );
}

void SetItemCost( Item& item )
{
    // item.Cost = item.Cost * CLAMP(100 - GetDeteriorationProcent(item), 5, 100)/ 100;
    int wearPercent = GetDeteriorationProcent( item );
    if( wearPercent == 100 )
    {
        item.Cost = uint( item.Cost / 3 );
    }
    else if( wearPercent > 75 )
    {
        item.Cost = uint( 2 * item.Cost / 3 );
    }
    else
    {
        item.Cost = 0;
    }
}
