// FOS Server
// Author: cvet
// Doors and keys stuff.

//#include "Tla"

bool UseItemOnLocker( Critter& cr, Item& locker, Item& item ) // Export
{
    return true;
}

bool UseSkillOnLocker( Critter& cr, Item& locker, CritterProperty skill ) // Export
{
    Map@ map = cr.GetMap();
    if( not valid( map ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
        return true;
    }

    if( skill == SKILL_PICK_ON_GROUND )
    {
        if( locker.Type == ItemType::Door )
        {
            // NoOpen
            if( locker.Locker_NoOpen )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
                return true;
            }

            // Critter on hex
            if( locker.Opened && map.GetCritter( locker.HexX, locker.HexY ) !is null )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
                return true;
            }

            // Check key
            if( !locker.Opened && locker.LockerId != 0 &&
                !locker.Locker_Broken && !IsKeyAviable( cr, locker.LockerId ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrItemLockerNeedKey );
                return true;
            }

            // Change state
            SwitchLocker( locker, !locker.Opened );
        }
        else if( locker.Type == ItemType::Container )
        {
            // NoOpen
            if( locker.Locker_NoOpen )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
                return true;
            }

            // Check key
            if( !locker.Opened && locker.LockerId != 0 &&
                !locker.Locker_Broken && !IsKeyAviable( cr, locker.LockerId ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrItemLockerNeedKey );
                return true;
            }

            // Is changeble
            if( locker.Container_Changeble )
            {
                // Change state
                if( locker.Opened )
                    SwitchLocker( locker, !locker.Opened );
                else
                {
                    SwitchLocker( locker, !locker.Opened );
                    cr.ShowContainer( null, locker, locker.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
                }
            }
            // No changeble
            else
            {
                cr.ShowContainer( null, locker, locker.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
            }
        }
    }
    else if( skill == CritterProperty::SkillSteal )
    {
        if( locker.Type == ItemType::Container && locker.Opened )
            cr.ShowContainer( null, locker, locker.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
        else
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
    }
    else if( skill == CritterProperty::SkillLockpick )
    {
        // NoOpen
        if( locker.Locker_NoOpen )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
            return true;
        }

        if( IS_TIMEOUT( cr.TimeoutSkLockpick ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrSkillWeariness );
            return true;
        }

        if( locker.LockerId == 0 || locker.Opened )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
            return true;
        }

        int  base = cr.SkillLockpick - locker.LockerComplexity;
        hash activePid = cr.GetSlotItem( SLOT_HAND1 ).ProtoId;
        if( activePid == Content::Item::lockpicks )
        {
            base += 25;
            if( Random( 0, 30 ) == 0 )
                cr.DeleteItem( Content::Item::lockpicks, 1 );
        }
        else if( activePid == Content::Item::exp_lockpick_set )
        {
            base += 50;
            if( Random( 0, 30 ) == 0 )
                cr.DeleteItem( Content::Item::exp_lockpick_set, 1 );
        }
        // Todo: Content::Item::electronic_lockpicks, Content::Item::elec_lockpick_mkii

        base = CLAMP( base, 0, 95 );
        if( base >= Random( 1, 100 ) )
        {
            SwitchLocker( locker, true );
            if( locker.Type == ItemType::Container )
                cr.ShowContainer( null, locker, locker.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
            cr.Experience += 50;
            Scores::AddScore( cr, Scores::Cracker, 1 );
        }
        else
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrSkillLockpickFail );
        }

        cr.TimeoutSkLockpick = LOCKPICK_TIMEOUT( cr );
    }
    else if( skill == SKILL_TAKE_ALL_CONT )
    {
        return false;
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
    }
    return true;
}

bool IsKeyAviable( Critter& cr, uint lockerId ) // Export
{
    if( lockerId == 0 )
        return true;
    if( _CritFingersDoorId( cr.Id ) == lockerId || _CritEyesDoorId( cr.Id ) == lockerId )
        return true;
    Item@[] keys;
    for( uint i = 0, j = cr.GetItemsByType( ItemType::Key, keys ); i < j; i++ )
        if( keys[ i ].LockerId == lockerId )
            return true;
    return false;
}

uint GetKeyId( Critter& cr, uint lockerId ) // Export
{
    if( lockerId == 0 || _CritFingersDoorId( cr.Id ) == lockerId || _CritEyesDoorId( cr.Id ) == lockerId )
        return 0;
    Item@[] keys;
    for( uint i = 0, j = cr.GetItemsByType( ItemType::Key, keys ); i < j; i++ )
        if( keys[ i ].LockerId == lockerId )
            return keys[ i ].Id;
    return 0;
}

bool SwitchLocker( Item& locker, bool toOpen ) // Export
{
    locker.Opened = toOpen;

    if( locker.Type == ItemType::Door )
    {
        locker.IsShootThru = toOpen;
        locker.IsLightThru = toOpen;
        locker.IsNoBlock = toOpen;
    }
    return toOpen;
}
