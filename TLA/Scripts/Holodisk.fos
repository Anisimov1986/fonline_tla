// FOS Server

#include "Tla"

void AddHolodiskInfo( Critter& cr, uint holoNum )
{
    if( holoNum == 0 )
        return;

    uint[] holoInfo = cr.HoloInfo;
    if( holoInfo.exists( holoNum ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_HOLO, STR_HOLO_READ_ALREADY );
    }
    else
    {
        holoInfo.insertLast( holoNum );
        cr.HoloInfo = holoInfo;
        cr.SayMsg( SAY_NETMSG, TEXTMSG_HOLO, STR_HOLO_READ_SUCC );
    }
}

void ReadHolodisk( Critter& cr, Item& holo )
{
    uint holoNum = ( holo.HolodiskNum != 0 ? holo.HolodiskNum : holo.HolodiskNum );
    if( holoNum == 0 )
        cr.SayMsg( SAY_NETMSG, TEXTMSG_HOLO, STR_HOLO_READ_FAIL );
    else
        AddHolodiskInfo( cr, holoNum );
}

void WriteHolodisk( Critter& cr, Item& holo, uint holoNum )
{
    if( holo.ProtoId != Content::Item::holodisk )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_HOLO, STR_HOLO_WRITE_FAIL );
    }
    else if( holo.HolodiskNum != 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_HOLO, STR_HOLO_READ_MEMORY_FULL );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_HOLO, STR_HOLO_WRITE_SUCC );
        holo.HolodiskNum == holoNum;
    }
}

void ClearHolodisk( Critter& cr, Item& holo )
{
    if( holo.ProtoId != Content::Item::holodisk )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_HOLO, STR_HOLO_ERASE_FAIL );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_HOLO, STR_HOLO_ERASE_SUCC );
        holo.HolodiskNum == 0;
    }
}
