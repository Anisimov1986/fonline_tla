// FOS Server
// Author: cvet

#include "Tla"

#pragma property Critter PrivateServer uint8 ReplHellTurretHack Max = 100

#define TIME_TO_DEATH    ( REAL_MINUTE( Random( 110, 130 ) ) ) // Время самоубийства турели

uint[] TurretIds;

void _TurretInit( Critter& turret, bool firstTime )
{
    turret.TeamId = TEAM_ReplicationTurret;
    turret.ReplicationTime = 1;
    turret.PerceptionBase = 10;
    turret.ActionPointsBase = 100;
    turret.MaxLifeBase = 1000;
    turret.BonusLook = 300;
    turret.StrengthBase = 10;
    turret.EnduranceBase = 10;
    turret.SkillBigGuns = 300;
    turret.IsNoEnemyStack = true;
    turret.IsUnlimitedAmmo = true;
    turret.PerkTerminator = 1;

    turret.SetEvent( CRITTER_EVENT_SMTH_USE_SKILL, "_TurretSmthUseSkill" );
    turret.SetEvent( CRITTER_EVENT_SMTH_ATTACK, "_TurretSmthAttack" );

    if( turret.GetTimeEvents( CTE_AUTOKILL, null, null, null ) == 0 )
        turret.AddTimeEvent( "cte_KillTurret", TIME_TO_DEATH, CTE_AUTOKILL );

    if( turret.CountItem( Content::Item::heavy_dual_minigun_long_range ) == 0 )
        turret.AddItem( Content::Item::heavy_dual_minigun_long_range, 1 );

    TurretIds.insertLast( turret.Id );
}

uint cte_KillTurret( Critter& cr, int identifier, uint& rate )
{
    if( !cr.IsDead() )
        cr.ToDead( ANIM2_DEAD_FRONT, null );
    return TIME_TO_DEATH;
}

void t_Electro( Critter& cr, const Item& trigger, bool entered, uint8 dir )
{
    if( not entered || not cr.IsPlayer() )
        return;

    Map@ map = cr.GetMap();
    if( not valid( map ) )
        return;

    bool attack = false;

    // В отстойник. Убиваем.
    if( dir == 1 || dir == 2 || dir == 3 )
        attack = true;
    // Из отстойника. Проверяем баланс репликации, если отрицательный, то убиваем.
    else if( cr.ReplicationMoney < 0 )
        attack = true;

    if( attack )
    {
        for( uint i = 0, j = TurretIds.length(); i < j; i++ )
        {
            Critter@ turret = GetCritter( TurretIds[ i ] );
            if( valid( turret ) && not turret.IsDead() )
                AddAttackPlane( turret, 0, cr );
        }
    }
}

void _TurretSmthUseSkill( Critter& turret, Critter& hacker, CritterProperty skill, Critter@ onCritter, Item@ onItem, Item@ onScenery )
{
    if( skill == SkillScience && valid( onCritter ) && onCritter.Id == turret.Id )
    {
        int sk = hacker.SkillScience - hacker.ReplHellTurretHack * 10;
        sk = CLAMP( sk, 6, 95 );
        if( sk >= Random( 1, 100 ) )
        {
            turret.DropPlanes();
            AddMiscPlane( turret, 100, __FullSecond + REAL_SECOND( 10 ), null ); // Wait 10 seconds
            turret.Say( SAY_NORM_ON_HEAD, "!@#$%^&*" );
            hacker.ReplHellTurretHack += 1;
            if( hacker.ReplHellTurretHack >= 100 )
                hacker.ReplHellTurretHack = 0;
        }
        else
        {
            AddAttackPlane( turret, 0, hacker );
        }
    }
}

void _TurretSmthAttack( Critter& turret, Critter& attacker, Critter& target )
{
    if( attacker.IsPlayer() )
        AddAttackPlane( turret, 0, attacker );
}
