// FOS Server
// Переопределение эвентов, в которых не хватает имен переменных и не работает SubscribeToCritter и аналогичное
#include "Tla"

void ModuleInit()
{
	__EventGlobalMapProcess.Subscribe( GlobalMapProcess );
	__EventCritterDead.Subscribe( CritterDead );
	__EventMapLoop.Subscribe( MapLoop );
	__EventCritterMoveItem.Subscribe( CritterMoveItem );
	__EventNpcPlaneBegin.Subscribe( NpcPlaneBegin );
	__EventNpcPlaneEnd.Subscribe( NpcPlaneEnd );
	__EventNpcPlaneRun.Subscribe( NpcPlaneRun );
	__EventGlobalMapInvite.Subscribe ( GlobalMapInvite );
}
/*
# pragma event "EventGlobalMapInviteEx( Critter& critter, Item@, uint, int, uint&, uint16&, uint16&, uint8& )"
# pragma event "EventCritterDeadEx( Critter& critter, Critter@ killer)"
# pragma event "EventMapLoopEx( Map& map, uint loopIndex )"
# pragma event "EventCritterMoveItemEx( Critter& critter, const Item& item, uint8 itemMode )"
# pragma event "EventNpcPlaneBeginEx( Critter& critter, NpcPlane&, int, Critter@, Item@ )"
# pragma event "EventNpcPlaneEndEx( Critter& critter, NpcPlane&, int, Critter@, Item@ )"
# pragma event "EventNpcPlaneRunEx( Critter& critter, NpcPlane&, int, uint&, uint&, uint& )"
*/

/* */

void GlobalMapInvite( Critter& leader, Item@ car, uint encounterDescriptor, int combatMode, uint& mapId, uint16& hexX, uint16& hexY, uint8& dir )
{
	__EventGlobalMapInviteEx.Raise(leader, car, encounterDescriptor, combatMode, mapId, hexX, hexY, dir);
}

void CritterMoveItem( const Critter& cr, const Item& item, uint8 fromSlot )
{
	Critter@ critter = GetCritter(cr.Id);
	if(valid(critter))
	{
	__EventCritterMoveItemEx.Raise(critter, item, fromSlot);
	}
}

void MapLoop( Map& map)
{
	uint loopIndex = 1;
	__EventMapLoopEx.Raise(map, loopIndex); 
 }
void NpcPlaneBegin ( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	__EventNpcPlaneBeginEx.Raise(cr, plane, reason, someCr, someItem);
}

void NpcPlaneEnd( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	__EventNpcPlaneEndEx.Raise(cr, plane, reason, someCr, someItem);
}

void NpcPlaneRun( Critter& cr, NpcPlane& plane, int reason, uint& result0, uint& result1, uint& result2 )
{
	__EventNpcPlaneRunEx.Raise(cr, plane, reason, result0, result1, result2);
}

void CritterDead( Critter& cr, Critter@ killer )
{
	__EventCritterDeadEx.Raise(cr, killer);
}

void GlobalMapProcess( int type, Critter& cr, Item@ car, float& x, float& y, float& toX, float& toY, float& speed, uint& encounterDescriptor, bool& waitForAnswer )
{
	__EventGlobalMapProcessEx.Raise(type, cr, car, x, y, toX, toY, speed, encounterDescriptor, waitForAnswer);
}