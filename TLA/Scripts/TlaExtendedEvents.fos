// FOS Server
// Переопределение эвентов, в которых не хватает имен переменных и не работает SubscribeToCritter и аналогичное
//#include "Tla"

void ModuleInit()
{
	__EventCritterDead.Subscribe( CritterDead );
	__EventNpcPlaneBegin.Subscribe( NpcPlaneBegin );
	__EventNpcPlaneEnd.Subscribe( NpcPlaneEnd );
	__EventNpcPlaneRun.Subscribe( NpcPlaneRun );
	__EventMapCritterOut.Subscribe( MapCritterOut );
}
/*
# pragma event "EventCritterDeadEx( Critter& critter, Critter@ killer)"
# pragma event "EventNpcPlaneBeginEx( Critter& critter, NpcPlane&, int, Critter@, Item@ )"
# pragma event "EventNpcPlaneEndEx( Critter& critter, NpcPlane&, int, Critter@, Item@ )"
# pragma event "EventNpcPlaneRunEx( Critter& critter, NpcPlane&, int, uint&, uint&, uint& )"
# pragma event "EventMapCritterOutEx( Map& map, Critter& critter )"
*/

/* */

void MapCritterOut( const Map& map, const Critter& critter )
{
	Map@ mapEx = GetMap(map.Id);
	Critter@ cr = GetCritter(critter.Id);
	__EventMapCritterOutEx.Raise(mapEx, cr);
}



void NpcPlaneBegin ( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	__EventNpcPlaneBeginEx.Raise(cr, plane, reason, someCr, someItem);
}

void NpcPlaneEnd( Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem )
{
	__EventNpcPlaneEndEx.Raise(cr, plane, reason, someCr, someItem);
}

void NpcPlaneRun( Critter& cr, NpcPlane& plane, int reason, uint& result0, uint& result1, uint& result2 )
{
	__EventNpcPlaneRunEx.Raise(cr, plane, reason, result0, result1, result2);
}

void CritterDead( Critter& cr, Critter@ killer )
{
	__EventCritterDeadEx.Raise(cr, killer);
}

/*void GlobalMapProcess( int type, Critter& cr, Item@ car, float& x, float& y, float& toX, float& toY, float& speed, uint& encounterDescriptor, bool& waitForAnswer )
{
	__EventGlobalMapProcessEx.Raise(type, cr, car, x, y, toX, toY, speed, encounterDescriptor, waitForAnswer);
}*/
