// FOS Server

#include "Tla"

#pragma property Global PrivateServer uint  BaseSierraRule
#pragma property Global PrivateServer uint  BaseMariposaRule
#pragma property Global PrivateServer uint  BaseCathedralRule

#pragma property Global PrivateServer uint8 BaseSierraOrg          Max = 2
#pragma property Global PrivateServer uint8 BaseMariposaOrg        Max = 2
#pragma property Global PrivateServer uint8 BaseCathedralOrg       Max = 2

#pragma property Global PrivateServer uint  BaseSierraTimeEventId
#pragma property Global PrivateServer uint  BaseMariposaTimeEventId
#pragma property Global PrivateServer uint  BaseCathedralTimeEventId

#pragma property Global PrivateServer uint  BaseEnclaveScore
#pragma property Global PrivateServer uint  BaseBosScore

#define SIERRA_BASE          ( 0 )
#define MARIPOSA_BASE        ( 1 )
#define CATHEDRAL_BASE       ( 2 )
#define MAX_BASES            ( 3 )

#define ORG_ENCLAVE          ( 1 )
#define ORG_BOS              ( 2 )

#define BASE_REFRESH_TIME    ( REAL_MINUTE( Random( 25, 35 ) ) ) // 25-35 real minutes
#define CAR_WAIT_TIME        ( 60 * 60 )                         // 1 game hour

#define ENTIRE_SUPPLY_CAR    ( 50 )

const       hash[] CarMaps = { Content::Map::sad_enter, Content::Map::mariposa_enter, Content::Map::cath_enter };
const       hash[] TerminalMaps = { Content::Map::sad_level4, Content::Map::mariposa_level4, Content::Map::cath_level3 };
const       GlobalVarsProperty[] GvarRule = { GlobalVarsProperty::BaseSierraRule, GlobalVarsProperty::BaseMariposaRule, GlobalVarsProperty::BaseCathedralRule };
const       GlobalVarsProperty[] GvarOrg = { GlobalVarsProperty::BaseSierraOrg, GlobalVarsProperty::BaseMariposaOrg, GlobalVarsProperty::BaseCathedralOrg };
const       GlobalVarsProperty[] GvarTimeEvent = { GlobalVarsProperty::BaseSierraTimeEventId, GlobalVarsProperty::BaseMariposaTimeEventId, GlobalVarsProperty::BaseCathedralTimeEventId };
const int[] ScoreCur = { SCORE_SIERRA_CUR, SCORE_MARIPOSA_CUR, SCORE_CATHEDRAL_CUR };
const int[] ScoreBest = { SCORE_SIERRA_BEST, SCORE_MARIPOSA_BEST, SCORE_CATHEDRAL_BEST };
const int[] ScoreOrg = { SCORE_SIERRA_ORG, SCORE_MARIPOSA_ORG, SCORE_CATHEDRAL_ORG };


void BaseRefresh( int value )
{
    RefreshBase( value );
}

void RefreshBase( int base )
{
    if( base >= MAX_BASES )
        return;

    Globals.SetAsInt( GvarTimeEvent[ base ], 0 );

    uint varRule = Globals.GetAsInt( GvarRule[ base ] );
    if( varRule == 0 )
        return;

    uint varOrg = Globals.GetAsInt( GvarOrg[ base ] );
    if( varOrg == 0 )
        return;

    Map@ map = GetMapByPid( CarMaps[ base ], 0 );
    if( not valid( map ) )
        return;

    CreateSupplyCar( map, base, varRule, varOrg );

    Critter@ player = GetCritter( varRule );
    if( valid( player ) && player.IsPlayer() )
        AddScore( player, ScoreBest[ base ], 1 );

    if( varOrg == ORG_ENCLAVE )
        Globals.BaseEnclaveScore += 1;
    else if( varOrg == ORG_BOS )
        Globals.BaseBosScore += 1;

    if( Globals.BaseEnclaveScore > Globals.BaseBosScore )
        SetBestScore( SCORE_BASE_BEST_ORG, "Enclave" );
    else if( Globals.BaseEnclaveScore < Globals.BaseBosScore )
        SetBestScore( SCORE_BASE_BEST_ORG, "Br. of Steel" );
    else
        SetBestScore( SCORE_BASE_BEST_ORG, "<draw>" );
}

void CreateSupplyCar( Map@ map, int base, uint playerId, int org )
{
    Entire[] entires;
    ParseEntires( map, entires, ENTIRE_SUPPLY_CAR );

    hash   carPid = ( org == ORG_BOS ? Content::Item::hummer : Content::Item::scout );

    uint16 hx, hy;
    for( int i = 0, j = entires.length(); i <= j; i++ )
    {
        if( i == j )
            return;

        Entire@ ent = entires[ i ];
        if( map.CheckPlaceForItem( ent.HexX, ent.HexY, carPid ) )
        {
            hx = ent.HexX;
            hy = ent.HexY;
            break;
        }
    }

    Item@ car = map.AddItem( hx, hy, carPid, 1 );
    if( not valid( car ) )
        return;
    car.LockerId = 1;
    car.Charge = Random( 0, car.Car_TankVolume );
    car.Deterioration = Random( 0, car.Car_MaxDeterioration );

    Item@ bag = car.GetChild( 0 );
    if( valid( bag ) )
    {
        bag.LockerId = ( org == ORG_ENCLAVE ? _CritFingersDoorId( playerId ) : _CritEyesDoorId( playerId ) );
        bag.LockerComplexity = Random( 100, 200 );

        if( org == ORG_ENCLAVE )
        {
            if( Random( 1, 200 ) == 1 )
                bag.AddItem( Content::Item::advanced_power_armor, 1, 0 );
            if( Random( 1, 250 ) == 1 )
                bag.AddItem( Content::Item::advanced_power_armor_mk2, 1, 0 );
        }
        else
        {
            if( Random( 1, 60 ) == 1 )
                bag.AddItem( Content::Item::powered_armor, 1, 0 );
            if( Random( 1, 80 ) == 1 )
                bag.AddItem( Content::Item::hardened_power_armor, 1, 0 );
        }

        bag.AddItem( Content::Item::bottle_caps, Random( 100, 1000 ), 0 );
        FillBag( bag, Pids_Ammo, 40, 80, 80 );
        FillBag( bag, Pids_AmmoOther, 1, 5, 40 );

        FillBag( bag, Pids_WeaponPistols, 1, 2, 40 );
        FillBag( bag, Pids_WeaponRifles, 1, 1, 10 );
        FillBag( bag, Pids_WeaponShotguns, 1, 1, 20 );
        FillBag( bag, Pids_WeaponPistolMachineGun, 1, 1, 20 );
        FillBag( bag, Pids_WeaponBigGuns, 1, 1, 10 );
        FillBag( bag, Pids_WeaponLaser, 1, 1, 5 );
        FillBag( bag, Pids_WeaponPlasma, 1, 1, 5 );
        FillBag( bag, Pids_WeaponPulse, 1, 1, 5 );
        FillBag( bag, Pids_WeaponGrenade, 2, 5, 80 );
        FillBag( bag, Pids_WeaponThrowingOther, 10, 30, 100 );
        FillBag( bag, Pids_WeaponCutting, 1, 2, 80 );
        FillBag( bag, Pids_WeaponShock, 1, 2, 80 );
        FillBag( bag, Pids_WeaponElectric, 1, 2, 80 );
        FillBag( bag, Pids_WeaponUnarmed, 1, 2, 80 );

        FillBag( bag, Pids_ArmorLight, 1, 2, 40 );
        FillBag( bag, Pids_ArmorMedium, 1, 1, 20 );

        FillBag( bag, Pids_DrugsPreparations, 1, 5, 60 );
        FillBag( bag, Pids_DrugsAlcohol, 1, 3, 50 );
        FillBag( bag, Pids_Drugs, 1, 3, 60 );
        FillBag( bag, Pids_DrugsOther, 1, 2, 50 );

        FillBag( bag, Pids_MiscExplosions, 1, 1, 50 );

        FillBag( bag, Pids_MiscPartsBasic, 1, 5, 70 );
        FillBag( bag, Pids_MiscPartsSelfSpecial, 1, 1, 20 );
        FillBag( bag, Pids_MiscPartsSpecial, 1, 1, 10 );
        FillBag( bag, Pids_MiscPartsBody, 1, 1, 5 );

        FillBag( bag, Pids_MiscToolsTech, 1, 1, 30 );
        FillBag( bag, Pids_MiscToolsMediacal, 1, 1, 80 );
        FillBag( bag, Pids_MiscToolsOther, 1, 1, 80 );
        FillBag( bag, Pids_MiscToolsSpecial, 1, 1, 50 );
        FillBag( bag, Pids_MiscOther, 1, 1, 70 );

        // Activate militia on Cathedral
        if( base == CATHEDRAL_BASE )
        {
            Critter@[] npcs, players;
            if( map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players ) > 0 && map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_NPC, npcs ) > 0 )
            {
                for( uint i = 0, ii = npcs.length(); i < ii; i++ )
                {
                    Critter@ npc = npcs[ i ];
                    for( uint j = 0, jj = players.length(); j < jj; j++ )
                        AddAttackPlane( npc, 0, players[ j ] );
                }
            }
        }
    }

    SavedDeferredCall( GAME_SECOND_TO_TICK( CAR_WAIT_TIME ), DeleteCar, car.Id );
}

void FillBag( Item@ bag, hash[]& pids, uint min, uint max, int chance )
{
    if( chance >= Random( 1, 100 ) )
        bag.AddItem( pids[ Random( 0, pids.length() - 1 ) ], Random( min, max ), 0 );
}

void DeleteCar( uint value )
{
    Item@ car = GetItem( value );
    if( valid( car ) )
        DeleteItem( car );
}

bool s_Terminal( Critter& player, const Item& terminal, CritterProperty skill, Item@ item )
{
    if( player.IsPlayer() && skill == SKILL_PICK_ON_GROUND && not valid( item ) )
        RunDialog( player, Content::Dialog::base_terminal, terminal.HexX, terminal.HexY, false );
    return true;
}

void r_BaseToEnclave( Critter& player, Critter@ terminal, int val )
{
    BaseTo( player, ORG_ENCLAVE );
}

void r_BaseToBos( Critter& player, Critter@ terminal, int val )
{
    BaseTo( player, ORG_BOS );
}

void BaseTo( Critter@ player, int org )
{
    int base = GetBaseByMap( player.GetMap() );
    if( base == -1 )
        return;

    Globals.SetAsInt( GvarRule[ base ], player.Id );
    Globals.SetAsInt( GvarOrg[ base ], org );
    SetBestScore( ScoreCur[ base ], player.Name );
    SetBestScore( ScoreOrg[ base ], org == ORG_ENCLAVE ? "Enclave" : "Br. of Steel" );

    // Delete old
    if( Globals.GetAsInt( GvarTimeEvent[ base ] ) != 0 )
    {
        CancelDeferredCall( Globals.GetAsInt( GvarTimeEvent[ base ] ) );
        Globals.SetAsInt( GvarTimeEvent[ base ], 0 );
    }

    // Create new
    uint cteId = SavedDeferredCall( GAME_SECOND_TO_TICK( BASE_REFRESH_TIME ), BaseRefresh, base );
    Globals.SetAsInt( GvarTimeEvent[ base ], cteId );
}

int GetBaseByMap( Map@ map )
{
    if( not valid( map ) )
        return -1;
    hash mapPid = map.ProtoId;
    for( int i = 0, j = TerminalMaps.length(); i < j; i++ )
        if( TerminalMaps[ i ] == mapPid )
            return i;
    return -1;
}

bool d_CheckTerminalLock( Critter& player, Critter@ terminal, int val )
{
    return true;
}
