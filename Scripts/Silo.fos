// FOS Server
// Author: rifleman17
// Квест "Рискованное дельце"

#include "Tla"

#pragma property Critter Protected uint8 BHRocketBase Group = Quests, Quest = 3610, Max = 5

#pragma property Location PrivateServer uint8 SiloMissileLaunched Max = 2

#pragma property Global PrivateServer uint MissilesCanada
#pragma property Global PrivateServer uint MissilesKishinev
#pragma property Global PrivateServer uint MissilesBaku
#pragma property Global PrivateServer uint MissilesTokio
#pragma property Global PrivateServer uint MissilesEburg
#pragma property Global PrivateServer uint MissilesVladik
#pragma property Global PrivateServer uint MissilesRay
#pragma property Global PrivateServer uint MissilesFukusima

import void   QuakeScreen( Map& map, uint noise, uint timeMs ) from "Effects";
import void   FlushScreen( Critter& cr, uint fromColor, uint toColor, uint timeMs ) from "Effects";
import string DateTimeToString( uint gameTime ) from "Time";
import bool   SetKnownLoc( Critter& cr, bool byId, uint locNum ) from "Location";

#define ROLE    ( 12 )


void r_Attack( Critter& player, Critter@ npc )
{
    Map@ map = player.GetMap();
    uint num = map.GetNpcCount( ROLE, FIND_LIFE | FIND_ONLY_NPC );
    for( uint i = 0; i < num; i++ )
    {
        Critter@ cr = map.GetNpc( ROLE, FIND_LIFE | FIND_ONLY_NPC, i );
        AddAttackPlane( cr, 0, player );
    }
}

void _HoloInit( Item& item, bool firstTime )
{
    item.HolodiskNum = 109;
    // подписываемся на использование голодиска клешней
    item.SetEvent( ITEM_EVENT_USE, "_HoloUse" );
}

bool _HoloUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Item@ onScenery )
{
    if( cr.BHRocketBase > 1 && cr.BHRocketBase < 4 )
    {
        cr.BHRocketBase = 4;
        DeleteItem( item );
        cr.Experience += 5000;
        // 829/720
        uint locId = CreateLocation( Content::Location::silo_base,
                                     829 + Random( -1 * int(__GlobalMapZoneLength), int(__GlobalMapZoneLength) ),
                                     720 + Random( -1 * int(__GlobalMapZoneLength), int(__GlobalMapZoneLength) ),
                                     null );
        if( locId > 0 )
            SetKnownLoc( cr, true, locId );
    }
    return true;
}

void _AmbushInit( Map& map, bool firstTime )
{
    map.SetEvent( MAP_EVENT_CRITTER_DEAD, "_AmbushDead" );
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_AmbushInCritter" );
}

void _AmbushInCritter( Map& map, Critter& cr )
{
    if( cr.IsPlayer() )
    {
        map.GetLocation().AutoGarbage = true;
    }
}

void _AmbushDead( Map& map, Critter& cr, Critter@ killer )
{
    if( map.GetNpcCount( ROLE, FIND_LIFE | FIND_ONLY_NPC ) == 0 )
        map.GetLocation().AutoGarbage = true;
}

void BlockedDoorInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "_DoorSkill" );
}

void _BlockedDoorInit( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "_DoorSkill" );
}

bool _DoorSkill( Item& item, Critter& cr, CritterProperty skill )
{
    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 7110 );
    return true;
}

void t_Transit( Critter& player, const Item& trigger, bool entered, uint8 dir )
{
    Location@ loc = player.GetMap().GetLocation();
    if( !valid( loc ) )
        return;

    int  entire = trigger.SceneryParams[ 0 ];
    uint idx = ( loc.SiloMissileLaunched == 2 ? 3 : 2 );
    Map@ map = loc.GetMapByIndex( idx );
    if( valid( map ) )
        player.TransitToMap( map.Id, entire );
}

void r_Launch( Critter& player, Critter@ npc )
{
    Map@      map = player.GetMap();
    Location@ loc = map.GetLocation();
    Map@      mapFrom = loc.GetMapByIndex( 2 );
    Map@      mapTo = loc.GetMapByIndex( 3 );
    map.PlaySound( "AIRSIREN.OGG" );
    mapFrom.PlaySound( "AIRSIREN.OGG" );
    Critter@[] critters;
    mapFrom.GetCritters( 0, FIND_ALL | FIND_ALL, critters );
    QuakeScreen( mapFrom, 50, 1000 );
    for( uint i = 0, l = critters.length(); i < l; i++ )
    {
        Critter@ cr = critters[ i ];
        if( valid( cr ) )
        {
            FlushScreen( cr, COLOR_BLACK, COLOR_BLACK, 5000 );
            cr.TransitToMap( mapTo.Id, cr.HexX, cr.HexY, cr.Dir );
        }
    }
    QuakeScreen( mapTo, 50, 2000 );
    QuakeScreen( map, 50, 3000 );

}

void dlg_Stat( Critter& player, Critter@ npc, string@ lexems )
{
    if( IS_DIALOG_END( lexems ) or IS_DIALOG_SAY_MODE( lexems ) )
        return;
    lexems = "$when" + DateTimeToString( __FullSecond );
    lexems += "$canada" + Globals.MissilesCanada;
    lexems += "$kishinev" + Globals.MissilesKishinev;
    lexems += "$baku" + Globals.MissilesBaku;
    lexems += "$tokio" + Globals.MissilesTokio;
    lexems += "$eburg" + Globals.MissilesEburg;
    lexems += "$vladik" + Globals.MissilesVladik;
    lexems += "$ray" + Globals.MissilesRay;
    lexems += "$fukusima" + Globals.MissilesFukusima;
}

/*
   @lex when@ Последние зафиксированные пуски МБР.
   Канада: @lex canada@.
   Кишинев: @lex kishinev@.
   Баку: @lex baku@.
   Токио: @lex tokio@.
   Екатеринбург: @lex eburg@.
   Челябинск: 0.
   Владивосток: @lex vladik@.
   Райчихинск: @lex ray@.
   Фукусима: @lex fukusima@.
 */
