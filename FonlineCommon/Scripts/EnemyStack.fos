// FOS Server

#pragma property Critter PrivateServer uint[] EnemyStack
#pragma property Critter Public bool IsNoEnemyStack


void AddEnemyToStack(Critter cr, uint enemyId)
{
	if(valid(cr) && enemyId > 0)
	{
		uint[] enemies = cr.EnemyStack.clone(); // maybe .clone?
		for(int i = 0, l = enemies.length(); i < l; i ++)
		{
			if(enemies[i] == enemyId)
			{
				if(i < l - 1)
				{
					enemies.removeAt(i);
					enemies.insertLast(enemyId);
					cr.EnemyStack = enemies;
				}
				return;
			}
		}
		enemies.insertLast(enemyId);
		cr.EnemyStack = enemies;
	}
}

bool CheckEnemyInStack(Critter cr, uint enemyId)
{
	if(valid(cr) && enemyId > 0)
	{
		uint[] enemies = cr.EnemyStack.clone(); // maybe .clone?
		for(int i = 0, l = enemies.length(); i < l; i ++)
		{
			if(enemies[i] == enemyId)
				return true;	
		}
	}
	return false;
}

void EraseEnemyFromStack(Critter cr, uint enemyId)
{
	if(valid(cr) && enemyId > 0)
	{
		uint[] enemies = cr.EnemyStack.clone();
		for(int i = 0, l = enemies.length(); i < l; i ++)
		{
			if(enemies[i] == enemyId)
			{
				enemies.removeAt(i);
				cr.EnemyStack = enemies;
				return;
			}
		}
	}
}

void ClearEnemyStack(Critter cr)
{
	if(valid(cr))
		cr.EnemyStack = array< uint> ();
}

void ClearEnemyStackNpc(Critter cr)
{
	if(valid(cr))
	{
		uint[] enemies = cr.EnemyStack.clone();
		for(int i = 0, l = enemies.length(); i < l;)
		{
			Critter npc = GetCritter(enemies[i]);
			if(valid(npc) && npc.IsNpc())
			{
				enemies.removeAt(i);
			}
			else
			{
				i++;
			}
		}
		cr.EnemyStack = enemies;
	}
	
}