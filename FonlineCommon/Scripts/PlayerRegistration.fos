//FOS Common

#pragma property Global Protected CritterProperty[] RegProperties

#pragma rpc Server AddRegistrationProperty( CritterProperty property )

#pragma property Critter Protected bool IsGenerated

#pragma rpc Server GeneratePlayer( dict< CritterProperty, int > props )

//#pragma rpc Client Generated()

#ifdef __SERVER

void AddRegistrationProperty( CritterProperty property )
{
	auto properies = array<CritterProperty> ( Globals.RegProperties );
	properies.insertLast( property );
	Globals.RegProperties = properies;
}

void AddRegistrationProperty( Critter critter, CritterProperty property )
{
	AddRegistrationProperty (property);
}

void GeneratePlayer( Critter cr, dict< CritterProperty, int > props )
{
    if( cr.IsGenerated )
        ThrowException( "Player already generated", cr );

    Parameters::CritterGenerate( props );

    for( uint i = 0; i < props.length(); i++ )
        cr.SetAsInt( props.getKey( i ), props.getValue( i ) );

    cr.IsGenerated = true;
}

#endif


#ifdef __CLIENT

void ModuleInit()
{
    __EventCritterIn.Subscribe( OnCritterIn );
}

dict< CritterProperty, int > RegProps = {};

void CallRegisterPlayer( string name, string pass, dict< CritterProperty, int > props )
{
//GetCacheData

	RegProps = props.clone();
    CustomCall( "Register\n" + name + "\n" + pass, "\n" );
    GuiScreensExt::TryExit();
}


void OnCritterIn( Critter cr )
{
    if( !cr.IsChosen() || cr.IsGenerated )
        return;
	ServerRpc.GeneratePlayer( RegProps.clone());
}


void AddRegistrationProperty( CritterProperty property )
{
	ServerRpc.AddRegistrationProperty ( property );
}
#endif
